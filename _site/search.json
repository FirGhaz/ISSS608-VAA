[
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html",
    "href": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html",
    "title": "Big Mac Index Geo Network Analysis",
    "section": "",
    "text": "This exercise aims to develop a Shiny application featuring an interactive choropleth map to analyze global trade networks in conjunction with the Big Mac Index. By integrating geographical data with economic indicators, the application will enable a visual exploration of how trade volumes and net exports correlate with price parity across different regions. The choropleth will serve as a dynamic tool to observe patterns, offering users the ability to drill down into country-specific trade connections and Index values.\nThe final deliverable will be a user-centric Shiny application, optimized for engagement and insight discovery. It will be complemented by a concise report summarizing the analytical narratives that emerge from the visualization. This endeavor will not only underscore the practicality of geospatial data in economic analysis but also aims to enrich the discourse on the implications of trade dynamics for market pricing mechanisms like the Big Mac Index."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#univariate-analysis-on-choropleth-bmi-usd",
    "href": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#univariate-analysis-on-choropleth-bmi-usd",
    "title": "Big Mac Index Choropleth and Trade Network Analysis",
    "section": "2.1 Univariate Analysis on Choropleth (BMI (USD))",
    "text": "2.1 Univariate Analysis on Choropleth (BMI (USD))\n\n\nCode\nlibrary(ggplot2)\nlibrary(sf)\nlibrary(dplyr)\n\nworld_bmi2 &lt;- worldnew %&gt;% \n  filter(admin != \"Antarctica\") %&gt;%\n  st_transform(crs =\"+proj=robin\") %&gt;%\n  ggplot() +\n  geom_sf(color = \"grey\") +  # Fixed by adding a '+' at the end of this line\n  geom_sf(data = world_bmi, aes(fill = bmi_usd_price)) +  # Removed quotes around bmi_usd_price\n  scale_fill_viridis_c() +  # Changed to a continuous color scale\n  theme_minimal() +\n  theme(plot.title = element_text(face = \"bold\"),\n        axis.text.x = element_blank(),\n        legend.position = \"bottom\") +  # Changed legend position to bottom\n  labs(title = \"BMI Price (USD)\",\n       subtitle = \"Countries BMI Index at 2020\",\n       x = NULL, y = NULL, caption = \"Made by Firdaus\")\n\nprint(world_bmi2)\n\n\n\n\n\nTo have a sense of the BMI index over the selected countries over the years from 2002 to 2021. A plotly graph was plotted.\n\n\nCode\nfontStyle = list(\n  family = \"DM Sans\",\n  size = 15,\n  color = \"black\"\n)\n\nlabel = list(\n  bgcolor = \"#EEEEEE\",\n  bordercolor = \"transparent\",\n  font = fontStyle\n)\n\n\n\n\nCode\nbmi_geo &lt;- plot_ly(data = world_bmi, \n                   locationmode= 'ISO-3', \n                   frame = ~year) %&gt;%\n  add_trace(locations = ~iso_a3,\n            z = ~bmi_usd_price,\n            zmin = 0,\n            zmax = 8,\n            type = 'choropleth',\n            text = ~name,\n            #(\"Country: \", name, \"&lt;br&gt;\"\n                                 #\"BMI USD Price: $\", sprintf(\"%.2f\", bmi_usd_price), \"&lt;br&gt;\",\n                                 #\"GDP per Capita: $\", sprintf(\"%.2f\", gdp_per_capita), \"&lt;br&gt;\",\n                                 #\"Inflation: \", sprintf(\"%.2f%%\", inflation)), \n            colorscale = \"Electric\", \n            color = ~bmi_usd_price) %&gt;%\n  layout(geo = list(projection = list(type = 'natural earth'),\n          font = list(family = \"DM Sans\"),\n          title = 'Global Big Mac Index (USD Price) from 2002 to 2021')) %&gt;%\n  style(hoverlabel = label) %&gt;%\n  config (displayModeBar = FALSE) %&gt;%\n  colorbar(tickprefix = \"$\")\n\n\nWarning: Ignoring 151 observations\n\n\nCode\nbmi_geo\n\n\n\n\n\n\n\n\nCode\nwmpb_World &lt;- st_read(\"C:/FirGhaz/ISSS608-VAA/Take-home_Exercises/Take-Home_Ex04/data/geospatial/TM_WORLD_BORDERS-0.3.shp\")\n\n\nReading layer `TM_WORLD_BORDERS-0.3' from data source \n  `C:\\FirGhaz\\ISSS608-VAA\\Take-home_Exercises\\Take-Home_Ex04\\data\\geospatial\\TM_WORLD_BORDERS-0.3.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 246 features and 11 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -180 ymin: -90 xmax: 180 ymax: 83.6236\nGeodetic CRS:  WGS 84\n\n\n\n\nCode\nwmpb_World_BMI &lt;- wmpb_World %&gt;% left_join(bmi_data_raw,\n                          by = c(\"NAME\" = \"country\")) #altnative is name\n\n\n\n\nCode\nlibrary(dplyr)\n\nwmpb_World_BMI_2020 &lt;- wmpb_World_BMI %&gt;%\n  filter(year == 2020) %&gt;% \n  group_by(NAME) %&gt;%\n  #filter(\n    #any(!is.na(currency_code)) & \n    #any(!is.na(bmi_localprice)) & \n    #any(!is.na(bmi_usd_price)) & \n    #any(!is.na(export_usd)) & \n    #any(!is.na(import_usd)) & \n    #any(!is.na(GDP)) & \n    #any(!is.na(gdp_per_capita)) & \n   # any(!is.na(inflation)) & \n    #any(!is.na(year))\n  #) %&gt;%\n  ungroup()\n\n\n\n\nCode\nlibrary(tmap)\n\n\nBreaking News: tmap 3.x is retiring. Please test v4, e.g. with\nremotes::install_github('r-tmap/tmap')\n\n\nCode\nworld_bmi_2020 &lt;- wmpb_World_BMI_2020 %&gt;%\n  dplyr::select (geometry, NAME, ISO3) %&gt;%\n  left_join(bmi_data_iso, by = c(\"ISO3\" = \"Iso3\"))  %&gt;%\n  filter(year == 2020) \n  \nworld_bmi_2020 &lt;- world_bmi_2020 %&gt;%\n  mutate(geometry = st_make_valid(geometry))\n\n# Ensure tmap is in view mode for interactive visualization\ntmap_mode(\"view\")\n\n\ntmap mode set to interactive viewing\n\n\nCode\ntm &lt;- tm_shape(world_bmi_2020) +\n  tm_polygons(\"bmi_usd_price\", id = \"country\", popup.vars = c(\"Big Mac Index(USD)\" = \"bmi_usd_price\", \n                                                       \"Inflation\" = \"inflation\", \n                                                       \"GDP per Capita\" = \"gdp_per_capita\",\n                                                       \"Export\" = \"export_usd\",\n                                                       \"Import\" = \"import_usd\"),\n            popup.format = list(export_usd= list(digits = 1),import_usd= list(digits = 1), gdp_per_capita = list(digits = 0), inflation = list(digits = 1)\n  )) +\n  tm_layout()\n\ntm\n\n\n\n\n\n\n\n\n\nCode\n#tm_shape(wmpb_World_BMI_2020) +\n  #tm_fill(\"bmi_usd_price\",\n          #style = \"quantile\",\n          #palette = \"Blues\",\n          #thres.poly = 0) + \n # tm_facets(by=\"income_grp\", \n            #free.coords=TRUE, \n            #drop.shapes=FALSE) +\n  #tm_layout(legend.show = FALSE,\n            #title.position = c(\"center\", \"right\"), \n            #title.size = 20) +\n  #tm_borders(alpha = 0.5)\n\n\n\n2.1.1 Geo Percentile of BMI\n\n\nCode\nlibrary(sf)\n\ninvalid_geometries &lt;- !st_is_valid(wmpb_World_BMI_2020)\n\nsum(invalid_geometries)\n\n\n[1] 3\n\n\nCode\nwmpb_World_BMI_2020[invalid_geometries, ] &lt;- st_make_valid(wmpb_World_BMI_2020[invalid_geometries, ])\n\nall(st_is_valid(wmpb_World_BMI_2020))\n\n\n[1] TRUE\n\n\nCode\nvar &lt;- wmpb_World_BMI_2020$bmi_usd_price\n  \npercent &lt;- c(0,.01,.1,.5,.9,.99,1)\nquantiles &lt;- quantile(var,percent)\nprint(quantiles)\n\n\n      0%       1%      10%      50%      90%      99%     100% \n2.154124 2.164977 2.270332 3.480290 5.000793 6.395980 6.713142 \n\n\n\n\nCode\nget.var &lt;- function(var_name, wmpb_World_BMI_2020) {\n  # Assuming 'var_name' is a string representing the variable name to extract\n  v &lt;- wmpb_World_BMI[[var_name]] %&gt;% \n    as.numeric()\n  return(v)\n}\n\n\n\n\nCode\nlibrary(tmap)\ntmap_mode(\"view\")\n\n\ntmap mode set to interactive viewing\n\n\nCode\ntmap_options(legend.width = 0.25) # Adjusts the width of the legend area\n\n# Define the function\npercentmap &lt;- function(var_name, wmpb_World_BMI_2020, legtitle=NA, mtitle=\"Percentile Map\") {\n  percent &lt;- c(0, .01, .1, .5, .9, .99, 1)\n  var &lt;- get.var(var_name, wmpb_World_BMI_2020)\n  bperc &lt;- quantile(var, percent, na.rm = TRUE)\n  \n  tm_shape(wmpb_World_BMI_2020) +\n    tm_fill(var_name,\n            title = legtitle,\n            breaks = bperc,\n            palette = \"Greens\",\n            legend.hist = TRUE) +\n    tm_borders(col = \"black\") +\n    tm_layout(main.title = mtitle, \n              main.title.position = \"center\",\n              legend.position = c(\"left\", \"bottom\")) -&gt; tm\n  \n  print(tm)\n}\n\npercentmap(\"bmi_usd_price\", wmpb_World_BMI_2020, legtitle = \"Percentile\", mtitle = \"BMI USD($) Percentile Map\")\n\n\nlegend.postion is used for plot mode. Use view.legend.position in tm_view to set the legend position in view mode.\n\n\n\n\n2.1.2 Building a Boxmap\nDistribution Overview: The boxbreaks function calculates the interquartile range (IQR) of the bmi_usd_price variable to determine the “fences” or thresholds for outliers. It then establishes break points for categorizing regions: lower outliers, the first quartile (25%), the median (50%), the third quartile (75%), and upper outliers. This approach provides a quick way to identify where the majority of the data points lie in relation to the overall distribution and to spot regions with exceptionally high or low BMI prices.\nGeographic Variations: By applying the boxmap function, we visually analyze the geographic distribution of Big Mac prices across different countries. This analysis can reveal patterns or clusters of higher or lower prices. For instance, higher prices in developed countries could reflect stronger currencies or higher living costs, while lower prices in developing countries might be attributed to lower production costs or weaker currencies.\nOutliers and Economic Insights: Outliers identified through this method can offer insights into anomalies within the data. Lower outliers might indicate countries where Big Macs are unusually cheap, potentially due to lower labor and production costs or subsidy effects. Conversely, upper outliers might point to countries where Big Macs are disproportionately expensive, which could be due to import tariffs, high taxes, or significant demand relative to supply. Identifying these outliers can prompt further investigation into the economic policies, supply chain logistics, and market dynamics of these regions.\n\n\nCode\nboxbreaks &lt;- function(v,mult=1.5) {\n  qv &lt;- unname(quantile(v))\n  iqr &lt;- qv[3] - qv[1]\n  upfence &lt;- qv[3] + mult * iqr\n  lofence &lt;- qv[1] - mult * iqr\n  # initialize break points vector\n  bb &lt;- vector(mode=\"numeric\",length=6)\n  # logic for lower and upper fences\n  if (lofence &lt; qv[1]) {  # no lower outliers\n    bb[1] &lt;- lofence\n    bb[2] &lt;- floor(qv[1])\n  } else {\n    bb[2] &lt;- lofence\n    bb[1] &lt;- qv[1]\n  }\n  if (upfence &gt; qv[4]) { # no upper outliers\n    bb[6] &lt;- upfence\n    bb[5] &lt;- ceiling(qv[4])\n  } else {\n    bb[5] &lt;- upfence\n    bb[6] &lt;- qv[4]\n  }\n  bb &lt;- sort(bb)\n  bb[2:4] &lt;- qv[1:3]\n  return(bb)\n}\n\n\n\n\nCode\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\n\nCode\nget.var &lt;- function(vname, df) {\n\n  v &lt;- df[[vname]] %&gt;% as.numeric() \n  return(v)\n}\nlibrary(sf)  # Assuming you're working with sf objects\nlibrary(dplyr)  # For the pipe operator\n\nvar &lt;- na.omit(get.var(\"bmi_usd_price\", wmpb_World_BMI))\nbb &lt;- boxbreaks(var)\nprint(bb)\n\n\n[1] -2.457697  0.798722  2.242142  2.969668  5.000000  6.226088\n\n\n\n\nCode\nboxmap &lt;- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var &lt;- get.var(vnam,df)\n  bb &lt;- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Oranges\",\n          labels = c(\"lower outlier\", \n                     \"&lt; 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"&gt; 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\n\n\nCode\ntmap_mode(\"view\")\n\n\ntmap mode set to interactive viewing\n\n\nCode\nboxmap(\"bmi_usd_price\", wmpb_World_BMI_2020)+\n  tm_facets(by=\"continent\", \n            free.coords=TRUE, \n            drop.shapes=FALSE) \n\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\nWarning: Values have found that are higher than the highest break\n\n\nWarning: number of legend labels should be 5\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nComparison by Continent: The use of tm_facets to segment the map by continent allows for an examination of regional trends and comparisons. It can uncover how economic, cultural, and regional trade agreements influence the price of consumer goods like Big Macs. For example: - North America although USA and Canada are top 50 percentile, Mexico is lagging behind the big mac’s indicator. - Most of the EU countries are also in the 50 - 75% and above as compare to majority of Asia which still sits at &lt;25% percentile especially in the South East Asia Region.\nStatistical Significance: While this visual method offers valuable insights, it’s also crucial to conduct further statistical tests to determine the significance of the observed patterns. For instance, analyses such as ANOVA or post-hoc tests can quantify whether the differences in Big Mac prices between continents or between outlier and non-outlier countries are statistically significant."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#treemap-multi-variate-analysis",
    "href": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#treemap-multi-variate-analysis",
    "title": "Big Mac Index Choropleth and Trade Network Analysis",
    "section": "2.2 Treemap Multi Variate Analysis",
    "text": "2.2 Treemap Multi Variate Analysis\nThe treemap provides a hierarchical view of data and is particularly effective for showcasing proportional relationships using nested rectangles.\n\n\nCode\n# First, ensure that \"Seven seas (open ocean)\" rows are removed.\nwmpb_World_BMI_2020 &lt;- wmpb_World_BMI_2020[wmpb_World_BMI_2020$continent != \"Seven seas (open ocean)\", ]\nlibrary(viridis)\n\n\nLoading required package: viridisLite\n\n\nCode\nlibrary(dplyr)\n\n# Extract non-spatial data\nnon_spatial_data &lt;- as.data.frame(wmpb_World_BMI_2020)\n\n# Perform your filtering and factor level dropping\ncleaned_data &lt;- non_spatial_data %&gt;%\n  filter(continent != \"Seven seas (open ocean)\") %&gt;%\n  droplevels()\n\nlibrary(treemap)\n\ntreemap(cleaned_data,\n        index = c(\"continent\", \"NAME\"),\n        vSize = \"bmi_usd_price\",\n        vColor = \"gdp_per_capita\",\n        type = \"manual\",\n        palette=\"Blues\",\n        title = \"BMI (USD) by Continent and GDP per Capita, 2020\",\n        title.legend = \"Big Mac Index ($USD)\"\n)\n\n\n\n\n\nThis treemap is a visual between countries’ GDP per capita and Big Mac Index (BMI) prices in USD for 2020, highlighting economic disparities across continents. In Europe, the dark shades of affluent countries like Switzerland juxtapose with the lighter hues of Eastern nations, indicating a higher BMI aligned with greater wealth. Asia’s patchwork reflects stark differences in economic development, while North America’s uniform darkness suggests higher living costs in line with its economic status. Oceania and South America reveal variations in the cost of living, as seen through the diverse shades representing the BMI, suggesting distinct economic structures and market dynamics within these regions. This treemap serves as a succinct graphical summary of the intersection between a country’s economic health and the relative cost of a globally recognized product.\n\n\nCode\n# Perform your filtering and factor level dropping\ncleaned_data &lt;- non_spatial_data %&gt;%\n  filter(continent != \"Seven seas (open ocean)\") %&gt;%\n  droplevels()\n\nlibrary(treemap)\nlibrary(gridExtra)\n\n\n\nAttaching package: 'gridExtra'\n\n\nThe following object is masked from 'package:dplyr':\n\n    combine\n\n\nCode\n# Generate the treemap plots\np1 &lt;- treemap(cleaned_data,\n        index = c(\"continent\", \"NAME\"),\n        vSize = \"export_usd\",\n        vColor = \"gdp_per_capita\",\n        type = \"value\",\n        title = \"Exports by Continent and GDP per Capita, 2020\",\n        title.legend = \"GDP per Capita\"\n)\n\n\n\n\n\nCode\np1\n\n\n$tm\n       continent           NAME      vSize     vColor     stdErr vColorValue\n1         Africa           &lt;NA&gt;   90196296   5753.066   90196296    5753.066\n2         Africa   South Africa   90196296   5753.066   90196296    5753.066\n3           Asia          China 1943216340  10408.720 1943216340   10408.720\n4           Asia      Hong Kong  609417722  46109.230  609417722   46109.230\n5           Asia      Indonesia  145945190   3895.618  145945190    3895.618\n6           Asia          Japan  593173167  39986.929  593173167   39986.929\n7           Asia       Malaysia  210912635  10164.344  210912635   10164.344\n8           Asia           &lt;NA&gt; 4405132069 190703.780 4405132069  190703.780\n9           Asia    Philippines  122722239   3224.423  122722239    3224.423\n10          Asia      Singapore  312681363  61273.992  312681363   61273.992\n11          Asia       Thailand  197955678   7001.785  197955678    7001.785\n12          Asia         Turkey  269107736   8638.739  269107736    8638.739\n13        Europe        Denmark   93751519  60836.592   93751519   60836.592\n14        Europe        Hungary  107918977  16125.609  107918977   16125.609\n15        Europe           &lt;NA&gt; 2245755730 281926.161 2245755730  281926.161\n16        Europe         Poland  265790137  15816.820  265790137   15816.820\n17        Europe         Russia  304069412  10194.441  304069412   10194.441\n18        Europe         Sweden  135863019  52837.904  135863019   52837.904\n19        Europe    Switzerland  445958954  85897.784  445958954   85897.784\n20        Europe United Kingdom  892403713  40217.009  892403713   40217.009\n21 North America         Canada  443307739  43349.678  443307739   43349.678\n22 North America         Mexico  382451628   8894.891  382451628    8894.891\n23 North America           &lt;NA&gt; 3528452246 115773.203 3528452246  115773.203\n24 North America  United States 2702692879  63528.634 2702692879   63528.634\n25       Oceania      Australia  225016351  51868.248  225016351   51868.248\n26       Oceania           &lt;NA&gt;  263165157  93628.842  263165157   93628.842\n27       Oceania    New Zealand   38148806  41760.595   38148806   41760.595\n28 South America      Argentina   46597455   8500.838   46597455    8500.838\n29 South America         Brazil  187127788   6923.700  187127788    6923.700\n30 South America          Chile   65301622  13173.785   65301622   13173.785\n31 South America           &lt;NA&gt;  335665931  34661.950  335665931   34661.950\n32 South America           Peru   36639066   6063.627   36639066    6063.627\n   level        x0         y0          w          h   color\n1      1 0.9366025 0.00000000 0.06339751 0.13090379 #F3FAAF\n2      2 0.9366025 0.00000000 0.06339751 0.13090379 #F3FAAF\n3      2 0.0000000 0.42053177 0.30855118 0.57946823 #E8F59F\n4      2 0.3085512 0.42053177 0.09676563 0.57946823 #7FC865\n5      2 0.2860631 0.00000000 0.06478088 0.20729012 #F7FBB4\n6      2 0.0000000 0.14515846 0.19819620 0.27537331 #92D067\n7      2 0.3143116 0.20729012 0.09100521 0.21324165 #ECF7A4\n8      1 0.0000000 0.00000000 0.40531681 1.00000000 #006837\n9      2 0.3508439 0.00000000 0.05447288 0.20729012 #FBFDB9\n10     2 0.0000000 0.00000000 0.19819620 0.14515846 #40AA59\n11     2 0.1981962 0.00000000 0.08786685 0.20729012 #EFF8AA\n12     2 0.1981962 0.20729012 0.11611540 0.21324165 #ECF7A4\n13     2 0.8969585 0.00000000 0.03964399 0.21758885 #40AA59\n14     2 0.7938723 0.00000000 0.10308623 0.09632363 #DCF090\n15     1 0.4053168 0.00000000 0.53128568 0.38892879 #006837\n16     2 0.7938723 0.21758885 0.14273022 0.17133994 #DCF090\n17     2 0.6164356 0.00000000 0.17743663 0.15767584 #ECF7A4\n18     2 0.7938723 0.09632363 0.10308623 0.12126522 #66BD63\n19     2 0.6164356 0.15767584 0.17743663 0.23125296 #006837\n20     2 0.4053168 0.00000000 0.21111883 0.38892879 #92D067\n21     2 0.8122664 0.67194729 0.12433614 0.32805271 #86CB66\n22     2 0.8122664 0.38892879 0.12433614 0.28301850 #ECF7A4\n23     1 0.4053168 0.38892879 0.53128568 0.61107121 #006837\n24     2 0.4053168 0.38892879 0.40694954 0.61107121 #38A657\n25     2 0.9366025 0.18626996 0.06339751 0.32657098 #66BD63\n26     1 0.9366025 0.13090379 0.06339751 0.38193715 #006837\n27     2 0.9366025 0.13090379 0.06339751 0.05536617 #8CCD67\n28     2 0.9366025 0.56601599 0.06339751 0.06762787 #EFF8AA\n29     2 0.9366025 0.72841749 0.06339751 0.27158251 #EFF8AA\n30     2 0.9366025 0.63364386 0.06339751 0.09477362 #E4F39A\n31     1 0.9366025 0.51284094 0.06339751 0.48715906 #A6D96A\n32     2 0.9366025 0.51284094 0.06339751 0.05317505 #F3FAAF\n\n$type\n[1] \"value\"\n\n$vSize\n[1] \"export_usd\"\n\n$vColor\n[1] \"gdp_per_capita\"\n\n$stdErr\n[1] \"export_usd\"\n\n$algorithm\n[1] \"pivotSize\"\n\n$vpCoorX\n[1] 0.02812148 0.97187852\n\n$vpCoorY\n[1] 0.171685 0.910315\n\n$aspRatio\n[1] 1.788798\n\n$range\n[1]     0 90000\n\n$mapping\n[1] NA NA NA\n\n$draw\n[1] TRUE\n\n\nThe treemap above provides a hierarchical view of data and is particularly effective for showcasing proportional relationships using nested rectangles. We can observe that Asian economies such as China and Japan occupy large areas, indicating a high GDP per capita combined with significant exports. Contrastingly, the smaller rectangles representing countries like the Philippines and Malaysia suggest lower GDP per capita figures. Additionally, the treemap highlights the prominence of North America, particularly the United States, which dominates the visual space reflecting its substantial GDP per capita and export volume. Europe’s diverse economic status is represented through varying rectangle sizes, with countries like the United Kingdom and Switzerland appearing significantly larger than their eastern counterparts, denoting higher GDP per capita ratios. This visualization is a graphical abstract of the global economic hierarchy and the interplay between GDP and exports in different regions. Similar observations can be made to the treemap below.\n\n\nCode\np2 &lt;- treemap(cleaned_data,\n        index = c(\"continent\", \"NAME\"),\n        vSize = \"import_usd\",\n        vColor = \"gdp_per_capita\",\n        type = \"value\",\n          title = \"Imports by Continent and GDP per Capita, 2020\",\n        title.legend = \"GDP per Capita\"  \n)\n\n\n\n\n\nCode\np2\n\n\n$tm\n       continent           NAME      vSize     vColor     stdErr vColorValue\n1         Africa           &lt;NA&gt;  111672872   5753.066  111672872    5753.066\n2         Africa   South Africa  111672872   5753.066  111672872    5753.066\n3           Asia          China 2691026164  10408.720 2691026164   10408.720\n4           Asia      Hong Kong   98901566  46109.230   98901566   46109.230\n5           Asia      Indonesia  187775205   3895.618  187775205    3895.618\n6           Asia          Japan  721069677  39986.929  721069677   39986.929\n7           Asia       Malaysia  328732127  10164.344  328732127   10164.344\n8           Asia           &lt;NA&gt; 4775283470 190703.780 4775283470  190703.780\n9           Asia    Philippines   87263105   3224.423   87263105    3224.423\n10          Asia      Singapore  243048066  61273.992  243048066   61273.992\n11          Asia       Thailand  260938320   7001.785  260938320    7001.785\n12          Asia         Turkey  156529241   8638.739  156529241    8638.739\n13        Europe        Denmark   99444993  60836.592   99444993   60836.592\n14        Europe        Hungary  114597294  16125.609  114597294   16125.609\n15        Europe           &lt;NA&gt; 1610607147 281926.161 1610607147  281926.161\n16        Europe         Poland  242050390  15816.820  242050390   15816.820\n17        Europe         Russia  329678782  10194.441  329678782   10194.441\n18        Europe         Sweden  145256765  52837.904  145256765   52837.904\n19        Europe    Switzerland  317067068  85897.784  317067068   85897.784\n20        Europe United Kingdom  362511854  40217.009  362511854   40217.009\n21 North America         Canada  396545410  43349.678  396545410   43349.678\n22 North America         Mexico  445334660   8894.891  445334660    8894.891\n23 North America           &lt;NA&gt; 2231199038 115773.203 2231199038  115773.203\n24 North America  United States 1389318968  63528.634 1389318968   63528.634\n25       Oceania      Australia  265172650  51868.248  265172650   51868.248\n26       Oceania           &lt;NA&gt;  305240786  93628.842  305240786   93628.842\n27       Oceania    New Zealand   40068136  41760.595   40068136   41760.595\n28 South America      Argentina   59444252   8500.838   59444252    8500.838\n29 South America         Brazil  235799288   6923.700  235799288    6923.700\n30 South America          Chile   76477228  13173.785   76477228   13173.785\n31 South America           &lt;NA&gt;  417998827  34661.950  417998827   34661.950\n32 South America           Peru   46278058   6063.627   46278058    6063.627\n   level        x0         y0          w          h   color\n1      1 0.9338204 0.00000000 0.06617960 0.17852527 #F3FAAF\n2      2 0.9338204 0.00000000 0.06617960 0.17852527 #F3FAAF\n3      2 0.0000000 0.28546737 0.39844836 0.71453263 #E8F59F\n4      2 0.4362191 0.13381040 0.06899490 0.15165697 #7FC865\n5      2 0.3086156 0.12978047 0.12760343 0.15568691 #F7FBB4\n6      2 0.3984484 0.28546737 0.10676560 0.71453263 #92D067\n7      2 0.0000000 0.00000000 0.12183214 0.28546737 #ECF7A4\n8      1 0.0000000 0.00000000 0.50521396 1.00000000 #006837\n9      2 0.4362191 0.00000000 0.06899490 0.13381040 #FBFDB9\n10     2 0.2185391 0.00000000 0.09007658 0.28546737 #40AA59\n11     2 0.1218321 0.00000000 0.09670692 0.28546737 #EFF8AA\n12     2 0.3086156 0.00000000 0.12760343 0.12978047 #ECF7A4\n13     2 0.9425886 0.17852527 0.05741144 0.18325704 #40AA59\n14     2 0.8764294 0.17852527 0.06615915 0.18325704 #DCF090\n15     1 0.7925700 0.17852527 0.20743002 0.82147473 #006837\n16     2 0.9102004 0.36178231 0.08979959 0.28517250 #DCF090\n17     2 0.9012046 0.64695481 0.09879544 0.35304519 #ECF7A4\n18     2 0.7925700 0.17852527 0.08385943 0.18325704 #66BD63\n19     2 0.7925700 0.36178231 0.11763043 0.28517250 #006837\n20     2 0.7925700 0.64695481 0.10863458 0.35304519 #92D067\n21     2 0.6572185 0.17852527 0.13535148 0.30996033 #86CB66\n22     2 0.5052140 0.17852527 0.15200454 0.30996033 #ECF7A4\n23     1 0.5052140 0.17852527 0.28735602 0.82147473 #006837\n24     2 0.5052140 0.48848561 0.28735602 0.51151439 #38A657\n25     2 0.7529285 0.00000000 0.15714668 0.17852527 #66BD63\n26     1 0.7529285 0.00000000 0.18089187 0.17852527 #006837\n27     2 0.9100752 0.00000000 0.02374519 0.17852527 #8CCD67\n28     2 0.6449534 0.00000000 0.08054982 0.07807671 #EFF8AA\n29     2 0.5052140 0.00000000 0.13973943 0.17852527 #EFF8AA\n30     2 0.6449534 0.07807671 0.08054982 0.10044857 #E4F39A\n31     1 0.5052140 0.00000000 0.24771456 0.17852527 #A6D96A\n32     2 0.7255032 0.00000000 0.02742531 0.17852527 #F3FAAF\n\n$type\n[1] \"value\"\n\n$vSize\n[1] \"import_usd\"\n\n$vColor\n[1] \"gdp_per_capita\"\n\n$stdErr\n[1] \"import_usd\"\n\n$algorithm\n[1] \"pivotSize\"\n\n$vpCoorX\n[1] 0.02812148 0.97187852\n\n$vpCoorY\n[1] 0.171685 0.910315\n\n$aspRatio\n[1] 1.788798\n\n$range\n[1]     0 90000\n\n$mapping\n[1] NA NA NA\n\n$draw\n[1] TRUE"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#visualising-the-network-exploratory-data-analysis",
    "href": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#visualising-the-network-exploratory-data-analysis",
    "title": "Big Mac Index Choropleth and Trade Network Analysis",
    "section": "4.1 Visualising the Network: Exploratory Data Analysis",
    "text": "4.1 Visualising the Network: Exploratory Data Analysis\n\n\nCode\nlibrary(dplyr)\nlibrary(igraph)\n\n# Assuming 'country_name' is the common key and 'ISO3' is the column you want to join from 'world_bmi' to 'import_export_beef'\nimport_export_beef_enriched &lt;- import_export_beef %&gt;%\n  left_join(world_bmi, by = \"country\") %&gt;% \n  select(-matches(\"^world_bmi\"))  # Remove duplicated columns if needed\n\n\nWarning in left_join(., world_bmi, by = \"country\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 4 of `x` matches multiple rows in `y`.\nℹ Row 67 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\nCode\n# Filter the dataset for a specific year\nyear_2021_trade &lt;- import_export_beef_enriched %&gt;%\n filter(Year == 2021) #!is.na(country)) #!is.na(Partner))  # Adjust the year as needed\n\n#Create an igraph object from the filtered data\ntrade_network_2021 &lt;- graph_from_data_frame(d = year_2021_trade, directed = TRUE)"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#visualising-trade-beef-2021",
    "href": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#visualising-trade-beef-2021",
    "title": "Big Mac Index Choropleth and Trade Network Analysis",
    "section": "4.1.1 Visualising Trade (Beef) 2021",
    "text": "4.1.1 Visualising Trade (Beef) 2021\nWe will first study the trade connectivity patterns of beef at present, 2021.\n\n\nCode\nlibrary(ggraph)\n\n# Visualize the network\nggraph(trade_network_2021, layout = \"graphopt\") + \n  geom_edge_link(aes(color = Trade, edge_WIDTH = Value), alpha = 0.05) + # Use 'element' for color\n  scale_edge_color_manual(values = c(\"Import Quantity\" = \"#00CCB0\", \"Export Quantity\" = \"#FF6ABE\")) + # Customize colors\n  geom_node_point(color='red', size = 1) +\n  geom_node_text(aes(label = name), repel = FALSE, size = 2, color = \"white\") + \n  theme_minimal() +\n  ggtitle(\"Beef Imports | Exports Network 2021\") +\n  theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\nWarning in geom_edge_link(aes(color = Trade, edge_WIDTH = Value), alpha =\n0.05): Ignoring unknown aesthetics: edge_WIDTH\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\nIt can be observed that the edges / links in the cluster are tight knitted together, with the exception of Tanzania. This visualisation shows:\n\nGeographical Distribution: The network is globally distributed, with countries from various continents engaged in trade. However, it’s still dense in certain areas, indicating regional trading hubs or areas with more intensive trade relations.\nTrade Dependencies: The visualization highlights the interconnectedness of the global beef market and may reflect dependencies. For example, a disruption in one node could have cascading effects throughout the network.\nTrade Intensity: The number of lines and their density in the center of the plot suggest a high level of trade activity. Certain countries appear to be key nodes with many connections, signifying their importance in global beef trade.\nTrade Patterns: The visualization suggests that beef trade is not isolated within regions; there are transcontinental trade flows that highlight the global nature of the beef market.\n\nAnother method of visualisation using arc and sugiyama layout.\n\n\nCode\nlibrary(ggraph)\n\nggraph(trade_network, layout = \"sugiyama\") + \n  geom_edge_arc(aes(color = Trade, edge_WIDTH = Value), alpha = 0.1) + # Use 'element' for color\n  scale_edge_color_manual(values = c(\"Import Quantity\" = \"#00CCB0\", \"Export Quantity\" = \"#FF6ABE\")) + # Customize colors\n  geom_node_point(color = \"red\", size = 1) +\n  geom_node_text(aes(label = name), repel = TRUE, size = 2, angle= 90, hjust = 2, color = \"white\") + \n  theme_minimal() +\n  ggtitle(\"Beef Imports | Exports Network 2021\") + coord_fixed() +\n  theme_graph(background = 'grey10',\n                text_colour = 'grey')\n\n\nWarning in geom_edge_arc(aes(color = Trade, edge_WIDTH = Value), alpha = 0.1):\nIgnoring unknown aesthetics: edge_WIDTH\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning: ggrepel: 115 unlabeled data points (too many overlaps). Consider\nincreasing max.overlaps\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\nUtilising different type of layouts can give other observable insights. Such as:\n\nPotential Clusters: While not explicitly shown, there might be clusters within this network. These could represent trade blocs or regions that primarily trade among themselves due to geographical proximity, historical ties, or economic agreements.\nCentral Nodes: Certain nodes (countries) have a higher degree of connections, indicated by more lines converging on them. These nodes may be pivotal in the beef trade network, acting as major exporters or importers.\nTrade Volume and Direction: The thickness of the lines could indicate the volume of trade, with thicker lines representing larger quantities of beef traded. Pink lines for exports are prominent, suggesting that the visualization might be from a major beef-exporting nation’s perspective, or these countries are simply key players in beef exports globally."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#visualising-trade-beef-2002",
    "href": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#visualising-trade-beef-2002",
    "title": "Big Mac Index Choropleth and Trade Network Analysis",
    "section": "4.1.2 Visualising Trade (Beef) 2002",
    "text": "4.1.2 Visualising Trade (Beef) 2002\n\n\nCode\nlibrary(dplyr)\nlibrary(igraph)\n\n# Assuming 'country_name' is the common key and 'ISO3' is the column you want to join from 'world_bmi' to 'import_export_beef'\nimport_export_beef_enriched &lt;- import_export_beef %&gt;%\n  left_join(world_bmi, by = \"country\") %&gt;% \n  select(-matches(\"^world_bmi\"))  # Remove duplicated columns if needed\n\n\nWarning in left_join(., world_bmi, by = \"country\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 4 of `x` matches multiple rows in `y`.\nℹ Row 67 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\nCode\n# Filter the dataset for a specific year\nyear_2021_trade &lt;- import_export_beef_enriched %&gt;%\n filter(Year == 2002) #!is.na(country)) #!is.na(Partner))  # Adjust the year as needed\n\n#Create an igraph object from the filtered data\ntrade_network_2002 &lt;- graph_from_data_frame(d = year_2021_trade, directed = TRUE)\n\n\n\n\nCode\nggraph(trade_network_2002, layout = \"graphopt\") + \n  geom_edge_link(aes(color = Trade, edge_WIDTH = Value), alpha = 0.05) + # Use 'element' for color\n  scale_edge_color_manual(values = c(\"Import Quantity\" = \"#00CCB0\", \"Export Quantity\" = \"#FF6ABE\")) + # Customize colors\n  geom_node_point(color='red', size = 1) +\n  geom_node_text(aes(label = name), repel = FALSE, size = 2, color = \"white\") + \n  theme_minimal() +\n  ggtitle(\"Beef Imports | Exports Network 2002\") +\n  theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\nWarning in geom_edge_link(aes(color = Trade, edge_WIDTH = Value), alpha =\n0.05): Ignoring unknown aesthetics: edge_WIDTH\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n\n\nCode\nlibrary(ggraph)\n\np1 &lt;- ggraph(trade_network_2021, layout = \"graphopt\") + \n  geom_edge_link(aes(color = Trade, width = Value), alpha = 0.05) +\n  scale_edge_color_manual(values = c(\"Import Quantity\" = \"#00CCB0\", \"Export Quantity\" = \"#FF6ABE\"), guide = FALSE) +\n  geom_node_point(color='red', size = 1) +\n  geom_node_text(aes(label = name), repel = FALSE, size = 2, color = \"white\") + \n  theme_void() +\n  ggtitle(\"2021\") +\n  theme_graph(background = 'grey10',\n                text_colour = 'white') +\n   guides(color = FALSE, size = FALSE, edge_width = FALSE)\n\n\np2 &lt;- ggraph(trade_network_2002, layout = \"graphopt\") + \n  geom_edge_link(aes(color = Trade, width = Value), alpha = 0.05) + \n  scale_edge_color_manual(values = c(\"Import Quantity\" = \"#00CCB0\", \"Export Quantity\" = \"#FF6ABE\"), guide = FALSE) + \n  geom_node_point(color='red', size = 1) +\n  geom_node_text(aes(label = name), repel = FALSE, size = 2, color = \"white\") + \n  theme_void() +\n  ggtitle(\"2002\") +\n  theme_graph(background = 'grey10',\n                text_colour = 'white') +\n  guides(color = FALSE, size = FALSE, edge_width = FALSE)\n\n\n\n\nCode\nlibrary(patchwork)\n\n# Combine the plots side by side\ncombined_plot &lt;- p1 + p2\ncombined_plot\n\n\nWarning: The `trans` argument of `continuous_scale()` is deprecated as of ggplot2 3.5.0.\nℹ Please use the `transform` argument instead.\n\n\nWarning: The `guide` argument in `scale_*()` cannot be `FALSE`. This was deprecated in\nggplot2 3.3.4.\nℹ Please use \"none\" instead.\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\nSide by side comparison of trade network patterns for 2021 and 2002.\n\n\nDensity and Complexity of Trade: The network for 2021 appears denser and more complex, with more interconnections between countries. This suggests an increase in the global beef trade over the 19-year span. More countries seem to be involved in the trade network, indicating globalization and the diversification of trade partners.\nCentrality and Key Players: Certain countries appear as central nodes in both networks, likely indicating that they are key players in the beef trade. The positioning of these countries may suggest their role as major exporters or importers. Over time, the central nodes might have shifted, reflecting changes in trade dominance.\nChanges in Trade Patterns: By comparing the thickness and number of links (representing the volume of trade), it’s possible to infer changes in trade patterns. Countries that have a larger number of thicker lines in 2021 compared to 2002 could have increased their beef trade volume significantly.\nReduced Peripherality: In the earlier network, there might be countries that appear as outliers or peripheral nodes, engaged in trade with only a few partners. Over time, these peripheral countries seem to have woven into the fabric of the global trade network more completely, with an increase in the number of trade links.\nEffects of Globalization: The network’s densification is likely a result of globalization. As trade barriers have been reduced and markets have opened up, countries have broadened their trade partnerships, leading to more robust and complex trade networks."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#network-centrality-and-community-clustering",
    "href": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#network-centrality-and-community-clustering",
    "title": "Big Mac Index Geo Network Analysis",
    "section": "3.1 Network Centrality and Community Clustering",
    "text": "3.1 Network Centrality and Community Clustering\nFor our scope of the project, we will select 50+ countries with (1) significant trade activities and (2) complete data together with BMI(Index). A Trade Connectivity Index (TCI) will be calculated for each edge in the network will be calculated as follows:\n\nEdge Weight Formula: Trade Connectivity Index (TCI)\nThis formula reflects the proportion of beef trade (exports and imports) in relation to the total trade volume between two countries. It highlights the significance of beef trade in the bilateral trade relationship, making it particularly relevant for analysing the trade networks with respect to the Big Mac Index. Hence, this will be applied to our network edges.\n\nBeef Exports Value and Beef Imports Value refer to the value of beef traded between the two countries forming an edge in the network.\nTotal Exports Value and Total Imports Value encompass the total trade volume between these countries, providing a base to understand the relative importance of beef trade.\n\nNode Attributes\nFor the nodes, you can maintain attributes that reflect each country’s economic and demographic scale, as well as its relevance to the Big Mac Index:\n\nBMI Index: Directly use the Big Mac Index as a node attribute to represent the pricing level of a Big Mac, serving as a proxy for purchasing power parity.\nTrade Value: This could be represented by either Total Exports or Total Imports to reflect the country’s engagement in global trade. Alternatively, you might use a composite measure such as GDP to reflect overall economic size and capacity.\n\nWe will compute the centrality and community clusters to determine their community clusters\nIn our exploration of global trade dynamics, specifically through the lens of beef exports and imports, we aim to uncover insights into the Big Mac Index, a whimsical gauge of purchasing power parity devised by The Economist. Analyzing beef trade patterns grants us a direct line of inquiry into the pricing mechanisms of the Big Mac, considering beef’s pivotal role in its composition. This focus allows us to parse the supply chain intricacies and market conditions that dictate the variability in Big Mac prices across different regions. The rationale behind this targeted analysis is to use beef trade as a tangible metric for understanding broader economic trends and pricing pressures that ultimately influence consumer goods’ costs.\nTo navigate this complex interplay, we’ve adopted a formula integrating critical trade data and economic indicators to model their relationship with the Big Mac Index. This formula captures the essence of trade balance, economic scale (granular and macro at the same time), and the specific impact of beef trade. It correlates net exports relative to GDP per capita with the proportions of beef exports and imports within total trade, providing a nuanced perspective on how trade dynamics influence market conditions and, by extension, Big Mac prices."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#computing-centrality",
    "href": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#computing-centrality",
    "title": "Big Mac Index Geo Network Analysis",
    "section": "3.2 Computing Centrality",
    "text": "3.2 Computing Centrality\n\n\nCode\nlibrary(ggraph)\nlibrary(igraph)\n\n\nbmi2021_graph &lt;- igraph::set_vertex_attr(bmi2021_graph, \"betweenness\", value = igraph::betweenness(bmi2021_graph))\n\n\ng &lt;- ggraph(bmi2021_graph, layout = \"fr\") +\n  geom_edge_link(aes(width = Value), alpha = 0.5, show.legend = FALSE) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(size = betweenness), color = \"black\") +\n  geom_node_text(aes(label = country), repel = TRUE, size = 2, hjust = 0.6, vjust = -1.8, color = \"black\") +\n  theme_graph()\n\n\ng &lt;- g + geom_node_point(aes(color = continent))\n\n\ng\n\n\n\n\n\nDegree Centrality Degree centrality measures the number of edges connected to a node. In directed networks, you can distinguish between in-degree and out-degree.\nDegree centrality is a measure used in network analysis to quantify the importance or influence of a particular node within a network. It is based on the number of connections, or edges, that a node has to other nodes. The central concept behind degree centrality is simple: nodes with more connections are considered more central and potentially more influential within the network.\nThere are two types of degree centrality:\nIn-Degree Centrality: This measures the number of incoming connections to a node. It can be particularly relevant in directed networks where the direction of the connection matters. A high in-degree centrality indicates that a node is a major target within the network, receiving many connections from other nodes. This can signify a node of high interest or popularity.\nOut-Degree Centrality: This measures the number of outgoing connections from a node. Like in-degree centrality, it is applicable in directed networks. A high out-degree centrality signifies that a node actively reaches out to many other nodes, which can indicate a source or distributor of information, goods, or influence within the network\n\n\nCode\nbmi2021_graph &lt;- igraph::set_vertex_attr(bmi2021_graph, \"degree\", value = igraph::degree(bmi2021_graph))\n\n# Plotting the graph with ggraph\ng &lt;- ggraph(bmi2021_graph, layout = \"fr\") +\n  geom_edge_link(aes(width = Value), alpha = 0.5,show.legend = FALSE) + \n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(size = degree, color = continent)) + # Size nodes by degree centrality and color by continent\n  geom_node_text(aes(label = country), repel = TRUE, size = 2, hjust = 0.5, color = \"black\", fontface = \"bold\") +\n  theme_graph() +\n  scale_size_continuous(range = c(1, 10)) + # Adjust the range for the size of the nodes\n  labs(size = \"Degree Centrality\") # Label for the size scale\n\n# Display the graph\ng\n\n\n\n\n\nDegree centrality is a straightforward but powerful concept in network analysis, useful for identifying key nodes that might play critical roles in the dissemination of information, disease transmission, social network influence, and more within a network.\nEigenvector Centrality Eigenvector centrality measures a node’s influence based on the principle that connections to high-scoring nodes contribute more to the score of the node in question.\n\n\nCode\neigenvector_centrality &lt;- eigen_centrality(bmi2021_graph)$vector\n\nprint(summary(eigenvector_centrality))\n\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n0.0000108 0.0010364 0.0061979 0.0611162 0.0231699 1.0000000 \n\n\nCode\nV(bmi2021_graph)$eigenvector &lt;- eigenvector_centrality\n\nprint(head(V(bmi2021_graph)$eigenvector))\n\n\n[1] 0.1068683 1.0000000 0.6944934 0.3322083 0.2881434 0.1124052\n\n\n\n\nCode\n# Now, use ggraph to visualize the network\ng_eigen &lt;- ggraph(bmi2021_graph, layout = \"fr\") + \n  geom_edge_link(aes(width = Value), alpha = 0.5,show.legend = FALSE) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(size = eigenvector, color = continent)) +\n  geom_node_text(aes(label = country), repel = TRUE, size = 3, color = \"black\") +\n  theme_graph() +\n  scale_size_continuous(name = \"Eigenvector Centrality\") +\n  guides(color = guide_legend(\"Continent\"))\n\n# Print the graph with eigenvector centrality\nprint(g_eigen)\n\n\n\n\n\nEigenvector centrality is useful for identifying influential nodes in a network where connections to high-scoring nodes contribute more to the score of the node than equal connections to low-scoring nodes.\nCloseness centrality\n\n\n\n\n\nPutting the results in a dataframe.\n\n\n                   node degree betweenness   closeness  eigenvector\n1                Sweden     56  51.0000000 0.004424779 1.000000e+00\n2                Israel     66 100.0000000 0.005714286 6.944934e-01\n3                Canada     52  24.0000000 0.250000000 3.322083e-01\n4               Germany     44  90.8183669 0.007812500 2.881434e-01\n5              Malaysia     22   1.5000000 0.142857143 1.500285e-01\n6           Netherlands     19  38.1816331 0.012500000 1.124052e-01\n7           Switzerland     32   1.5000000 0.003597122 1.068683e-01\n8               Belgium     62 173.4975715 0.023255814 1.005888e-01\n9                France     29  42.2459815 0.009090909 8.165931e-02\n10        United States     51  71.7345151 0.052631579 4.604534e-02\n11            Hong Kong      6   1.5000000 0.142857143 4.091687e-02\n12              Austria     41  63.1471309 0.012820513 3.472823e-02\n13            Indonesia      4   1.5000000 0.142857143 2.727791e-02\n14       United Kingdom     40  95.8733867 0.017857143 2.316993e-02\n15            Singapore     14   8.1621552 0.014285714 2.145370e-02\n16                Spain     18  25.6956297 0.014492754 2.078596e-02\n17              Denmark     16  31.1744346 0.090909091 1.970763e-02\n18            Argentina     20   6.9444526 0.066666667 1.797603e-02\n19                India      2   1.5000000 0.142857143 1.363896e-02\n20            Australia     16  23.1709300 0.090909091 1.071837e-02\n21             Portugal     16   9.0733029 0.033333333 1.053569e-02\n22              Lebanon     35  70.3148125 0.021739130 9.747172e-03\n23               Greece     16   9.1393395 0.125000000 9.049026e-03\n24           Costa Rica     61 133.3493109 0.200000000 7.821428e-03\n25                Japan     11  27.7088178 0.066666667 7.008999e-03\n26                Qatar     14   1.5000000 0.013333333 6.658762e-03\n27              Uruguay     25  21.3652549 0.025000000 6.197949e-03\n28          New Zealand     10  32.4385155 0.043478261 6.096445e-03\n29               Kuwait      7  19.9409967 0.333333333 5.675541e-03\n30             Thailand     23  23.2725229 0.500000000 3.172497e-03\n31       Czech Republic     34  26.4117937 0.142857143 2.833332e-03\n32               Turkey     16   1.5000000 0.111111111 2.568897e-03\n33                China      4   1.5000000 0.013333333 1.902503e-03\n34               Poland      4   1.5000000 0.013333333 1.902503e-03\n35               Brazil     17  13.3362885 0.250000000 1.837269e-03\n36          South Korea     10  11.2371524 0.038461538 1.823930e-03\n37         Saudi Arabia     14  16.0000000 0.033333333 1.774966e-03\n38              Ukraine      8   1.5000000 0.111111111 1.284449e-03\n39                Ghana      7   1.5000000 0.111111111 1.123893e-03\n40              Hungary     20  16.0000000 0.100000000 1.036376e-03\n41 United Arab Emirates      5   1.5000000 0.000100000 1.000436e-03\n42         South Africa      6   1.5000000 0.111111111 9.633364e-04\n43                 Peru      8   2.0000000 0.333333333 8.962643e-04\n44               Jordan     14  14.0000000 0.333333333 8.769263e-04\n45               Russia      4  30.0025813 0.111111111 8.339978e-04\n46              Croatia      6   1.5000000 0.020408163 7.633785e-04\n47                Chile     14  26.0404078 0.055555556 2.480581e-04\n48                Egypt      6   1.5000000 0.166666667 2.262896e-04\n49              Bahrain      5   0.7227148 1.000000000 2.173124e-04\n50               Mexico      7  12.0000000 1.000000000 2.097795e-04\n51                 Oman     10   1.5000000 0.000100000 3.243397e-05\n52          Philippines      4   1.5000000 1.000000000 1.594200e-05\n53             Viet Nam      3   1.5000000 1.000000000 1.084993e-05\n\n\nDegree Centrality: The simplest form of centrality, degree centrality, counts how many connections (edges) a node has. In directed networks, you can further distinguish between in-degree (number of incoming edges) and out-degree (number of outgoing edges). Nodes with a high degree centrality are considered highly connected or active within the network.\nCloseness Centrality: This measure calculates how close a node is to all other nodes in the network by considering the shortest paths. A node with a high closeness centrality can quickly interact with all others because it has the shortest average distance to all other nodes.\nBetweenness Centrality: Betweenness centrality quantifies the number of times a node acts as a bridge along the shortest path between two other nodes. Nodes with high betweenness centrality have significant control over information flow within the network because they lie on many shortest paths between other nodes.\nEigenvector Centrality: This measure considers not just the quantity of connections a node has, but also the quality. A node scores high in eigenvector centrality if it is connected to other nodes that are themselves central within the network. This measure reflects the intuition that not all connections are equal, and being connected to highly connected nodes contributes more to a node’s score.\n\n\nCode\nlibrary(dplyr)\n\n# Assuming `centrality_df` is your dataframe with centrality measures\nlibrary(dplyr)\nlibrary(tidyr)\n\n\n# Assuming `centrality_measures` is your dataframe with centrality measures\nnormalized_centrality_measures &lt;- centrality_measures %&gt;%\n  # Replace NaN values in closeness with 0 (or another appropriate value)\n  mutate(closeness = ifelse(is.nan(closeness), 0.0001, closeness)) %&gt;%\n  mutate(betweenness = case_when(betweenness == 0 ~ 1.5, TRUE ~ betweenness)) %&gt;%\n  #mutate(eigenvector = case_when(eigenvector == 0 ~ 1.5, TRUE ~ eigenvector))\n  mutate(across(c(degree, betweenness, closeness, eigenvector),\n                ~(. - min(.)) / (max(.) - min(.))))\n\n\n\n\nCode\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(dplyr)\n\n# Assuming `normalized_centrality_measures` is your original data frame\nselected_countries &lt;- c(\"Argentina\", \"Australia\", \"Brazil\", \"United Kingdom\", \n                        \"Canada\", \"Chile\", \"China\", \"Czech Republic\", \n                        \"Denmark\", \"Hong Kong\", \"Hungary\", \"Indonesia\", \n                        \"Japan\", \"Malaysia\", \"Mexico\", \"New Zealand\", \n                        \"Peru\", \"Philippines\", \"Poland\", \"Russia\", \n                        \"Singapore\", \"South Africa\", \"South Korea\", \n                        \"Sweden\", \"Switzerland\", \"Thailand\", \"Turkey\", \n                        \"United States\")\n\n# Pivot the data to long format\nlong_centrality_measures &lt;- normalized_centrality_measures %&gt;%\n  filter(node %in% selected_countries) %&gt;%\n  pivot_longer(cols = c(degree, betweenness, closeness, eigenvector),\n               names_to = \"measure\",\n               values_to = \"value\")\n\n# Create a function to generate plots for a given measure\ngenerate_plot &lt;- function(measure) {\n  plot &lt;- ggplot(long_centrality_measures %&gt;% filter(measure == !!measure), \n                 aes(x = reorder(node, value), y = value)) +\n    geom_col(aes(fill = value)) + \n    scale_fill_gradient(low = \"#f2e901\", high = \"#FF2F09\") +\n    \n    labs(x = \"Node\", y = paste(measure, \"Centrality (Normalized)\"), \n         title = paste(measure, \"Centrality of Nodes\")) +\n    coord_flip() + \n    theme_minimal() +\n    theme(\n      axis.text.y = element_text(size = 6),  # Adjust the y-axis font size\n      strip.text.y = element_text(size = 6),\n      legend.position = \"none\"# Adjust the facet label font size if needed\n    ) +\n    scale_y_continuous(limits = c(0, 1))  \n  return(plot)\n}\n\n# Generate the plots\ndegree_plot &lt;- generate_plot(\"degree\")\nbetweenness_plot &lt;- generate_plot(\"betweenness\")\ncloseness_plot &lt;- generate_plot(\"closeness\")\neigenvector_plot &lt;- generate_plot(\"eigenvector\")\n\n# Print the plots\ndegree_plot\n\n\n\n\n\nCode\nbetweenness_plot\n\n\n\n\n\nCode\ncloseness_plot\n\n\n\n\n\nCode\neigenvector_plot\n\n\n\n\n\n\n\nCode\nselected_countries &lt;- c(\"Argentina\", \"Australia\", \"Brazil\", \"United Kingdom\", \n                        \"Canada\", \"Chile\", \"China\", \"Czech Republic\", \n                        \"Denmark\", \"Hong Kong\", \"Hungary\", \"Indonesia\", \n                        \"Japan\", \"Malaysia\", \"Mexico\", \"New Zealand\", \n                        \"Peru\", \"Philippines\", \"Poland\", \"Russia\", \n                        \"Singapore\", \"South Africa\", \"South Korea\", \n                        \"Sweden\", \"Switzerland\", \"Thailand\", \"Turkey\", \n                        \"United States\")\n\nlong_centrality_measures &lt;- normalized_centrality_measures %&gt;%\n  filter(node %in% selected_countries) %&gt;%\n  pivot_longer(cols = c(degree, betweenness, closeness, eigenvector),\n               names_to = \"measure\",\n               values_to = \"value\")\n\n###################################################################################\n\n# Merge back the original degree centrality measure for hover info\nlong_centrality_measures_with_original &lt;- long_centrality_measures %&gt;%\n  left_join(centrality_measures %&gt;% select(node, original_degree = degree), by = \"node\")\n\n# Generate the plot for degree measure\ndegree_data &lt;- long_centrality_measures_with_original %&gt;%\n  filter(measure == \"degree\")\n\ndegree_plot &lt;- ggplot(degree_data, aes(x = reorder(node, value), y = value, text = paste(\"Country:\", node, \"&lt;br&gt;Degree Centrality:\", original_degree))) +\n  geom_col(aes(fill = value)) +\n  scale_fill_gradient(low = \"#f2e901\", high = \"#FF2F09\") +\n  scale_y_continuous(limits = c(0, 1)) +\n  labs(x = \"Node\", y = \"Degree Centrality (Normalized)\", title = \"Degree Centrality of Nodes\") +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n      axis.text.y = element_text(size = 5),  # Adjust the y-axis font size\n      strip.text.y = element_text(size = 5),\n      legend.position = \"none\"# Adjust the facet label font size if needed\n    )\n\n# Convert to Plotly for interactivity\ndegree_plotly &lt;- ggplotly(degree_plot, tooltip = \"text\")\n\n# Print the interactive plot\ndegree_plotly\n\n\n\n\n\n\n\n\nCode\n# Merge back the original closeness centrality measure for hover info\nlong_centrality_measures_with_original &lt;- long_centrality_measures %&gt;%\n  left_join(centrality_measures %&gt;% select(node, original_closeness = closeness), by = \"node\")\n\n# Generate the plot for closeness measure\ncloseness_data &lt;- long_centrality_measures_with_original %&gt;%\n  filter(measure == \"closeness\")\n\ncloseness_plot &lt;- ggplot(closeness_data, aes(x = reorder(node, value), y = value, text = paste(\"Country:\", node, \"&lt;br&gt; Closeness Centrality:\", original_closeness))) +\n  geom_col(aes(fill = value)) +\n  scale_fill_gradient(low = \"#f2e901\", high = \"#FF2F09\") +\n  scale_y_continuous(limits = c(0, 1)) +\n  labs(x = \"Node\", y = \"Closeness Centrality (Normalized)\", title = \"Closeness Centrality of Nodes\") +\n  coord_flip() +\n  theme_minimal() +\n  theme(\n      axis.text.y = element_text(size = 5),  # Adjust the y-axis font size\n      strip.text.y = element_text(size = 5),\n      legend.position = \"none\"# Adjust the facet label font size if needed\n    )\n\n# Convert to Plotly for interactivity\ncloseness_plotly &lt;- ggplotly(closeness_plot, tooltip = \"text\")\n\n# Print the interactive plot\ncloseness_plotly\n\n\n\n\n\n\n\n\nCode\nlong_centrality_measures_with_original &lt;- long_centrality_measures %&gt;%\n  left_join(centrality_measures %&gt;% select(node, original_betweenness = betweenness), by = \"node\")\n\n# Generate the plot for closeness measure\nbetweenness_data &lt;- long_centrality_measures_with_original %&gt;%\n  filter(measure == \"betweenness\")\n\nbetweenness_plot &lt;- ggplot(betweenness_data, aes(x = reorder(node, value), y = value, text = paste(\"Country:\", node, \"&lt;br&gt; Betweenness Centrality:\", original_betweenness))) +\n  geom_col(aes(fill = value)) +\n  scale_fill_gradient(low = \"#f2e901\", high = \"#FF2F09\") +\n  scale_y_continuous(limits = c(0, 1)) +\n  labs(x = \"Node\", y = \"Betweenness Centrality (Normalized)\", title = \"betweenness Centrality of Nodes\") +\n  coord_flip() +\n  theme_minimal() + theme(\n      axis.text.y = element_text(size = 5),  # Adjust the y-axis font size\n      strip.text.y = element_text(size = 5),\n      legend.position = \"none\"# Adjust the facet label font size if needed\n    )\n\n# Convert to Plotly for interactivity\nbetweenness_plotly &lt;- ggplotly(betweenness_plot, tooltip = \"text\")\n\n# Print the interactive plot\nbetweenness_plotly\n\n\n\n\n\n\n\n\nCode\nlong_centrality_measures_with_original &lt;- long_centrality_measures %&gt;%\n  left_join(centrality_measures %&gt;% select(node, original_eigenvector = eigenvector), by = \"node\")\n\n# Generate the plot for eigenvector measure\neigenvector_data &lt;- long_centrality_measures_with_original %&gt;%\n  filter(measure == \"eigenvector\")\n\neigenvector_plot &lt;- ggplot(eigenvector_data, aes(x = reorder(node, value), y = value, text = paste(\"Country:\", node, \"&lt;br&gt;Eigenvector Centrality:\", original_eigenvector))) +\n  geom_col(aes(fill = value)) +\n  scale_fill_gradient(low = \"#f2e901\", high = \"#FF2F09\") +\n  labs(x = \"Node\", y = \"Eigenvector Centrality (Normalized)\", title = \"Centrality of Nodes\") +\n  coord_flip() +\n  theme_minimal() + theme(\n      axis.text.y = element_text(size = 5),  # Adjust the y-axis font size\n      strip.text.y = element_text(size = 5),\n      legend.position = \"none\"# Adjust the facet label font size if needed\n    )\n\n# Convert to Plotly for interactivity\neigenvector_plotly &lt;- ggplotly(eigenvector_plot, tooltip = \"text\")\n\n# Print the interactive plot\neigenvector_plotly\n\n\n\n\n\n\n\n\nCode\ncombined_plot &lt;- subplot(degree_plotly, betweenness_plotly,closeness_plotly, eigenvector_plotly, nrows = 2, margin = 0.05)\n\n# Print the combined plot\ncombined_plot\n\n\n\n\n\n\nIn the Shiny App, we will allow the audience to explore these statistical methods to gain insights from the networks.\n\n\n\n\n\n\n\n\n\nBetweenness\nDegree\nEigenVector\nCloseness\n\n\n\n\nNodes like the United Kingdom, United States and Sweden have high betweenness centrality, suggesting that they act as significant connectors or bridges within the network, potentially controlling the flow of trade.\nNodes such as the Sweden, Canada, United States and UK have high degrees, meaning they have numerous trade connections, possibly making them central hubs in the beef trade network.\nThe eigenvector centrality considers not just the number but the quality of connections. Nodes with high eigenvector centrality, like the Sweden and Canada, are connected to other well-connected nodes, hinting at influential trade cliques.\nHigh closeness centrality for nodes like the Philippines, Thailand and Mexico suggests that they can quickly interact or trade with all other nodes, indicating efficiency in their trade operations.\n\n\nSome countries much higher centrality, which could mean the trade network relies heavily on these nodes, possibly creating vulnerability to disruptions.\nDegree centrality can suggest potential market influence, with highly connected nodes being able to leverage their position for competitive advantage.\nThis measure reflects the potential for a node to access and influence the broader network through its connections.\nCloseness centrality offers insight into the speed at which a country can react to supply and demand changes across the global network\n\n\nCountries with lower betweenness centrality might have more direct trade links or may not be critical transit points within the network.\nA spread of degree centrality across the network would indicate a democratized trading environment, but a concentration suggests a few key players dominate.\nLow eigenvector centrality could indicate peripheral or less influential roles within the trading network, possibly representing newer or more specialized markets.\nLow closeness centrality might point to potential delays in trade flows or inefficiencies, possibly due to geographical or logistical factor\n\n\n\n:::callout: Summary of Insights 1. Network Roles and Big Mac Pricing:\nCountries central in the beef trade network, indicated by high betweenness or degree centrality, may have more stable and competitive beef pricing due to their numerous trade links, which could affect their local Big Mac prices. The presence of key influencers, as suggested by eigenvector centrality, could indicate the potential for price setting or market influence, which can trickle down to the pricing of beef and related products like the Big Mac.\n\nTrade Efficiency and Cost:\n\nCloseness centrality can signal efficient trade practices and the potential for rapid adjustment to market changes, which could lead to more competitive and stable pricing for beef, affecting the Big Mac Index. Any delays or inefficiencies in beef imports could increase costs for local producers, potentially raising Big Mac prices in countries with lower closeness centrality.\n\nCluster Analysis and Market Groupings:\n\nClustering helps identify groups of countries with similar trade patterns, which can show regional variations in Big Mac prices due to similarities in trade dynamics and economic profiles. Understanding these clusters can provide insights into regional pricing strategies for the Big Mac and indicate how economic or trade changes in one country might impact others within the same cluster. :::"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#computing-community-indices",
    "href": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#computing-community-indices",
    "title": "Big Mac Index Geo Network Analysis",
    "section": "3.3 Computing Community Indices",
    "text": "3.3 Computing Community Indices\nTidygraph package inherits many of the community detection algorithms imbedded into igraph We will utilise 2 community detection algo: (1) Walktrap and (2) Spinglass (group_spinglass).Some community algorithms are designed to take into account direction or weight, while others ignore it.\nWalkTrap The Walktrap algorithm is another method for detecting communities in graphs. It attempts to find densely connected subgraphs (communities) in a graph based on random walks. The idea is that short random walks tend to stay in the same community.\n\n\nCode\n# Calibrating Parameters for Walktrap\n# Choosing the weights\n#E(bmi2021_graph)$Value\n#E(bmi2021_graph)$betweenness \n#E(bmi2021_graph)$eigenvector \n#E(bmi2021_graph)$closenesss\n#E(bmi2021_graph)$degree \n\nweights = E(bmi2021_graph)$Value\nsteps = 100 # (2 to 100)\n\nwalktrap_communities &lt;- cluster_walktrap(bmi2021_graph, \n                                         steps = steps,\n                                         weights = weights)\n# Assign community membership to nodes for visualization\nV(bmi2021_graph)$community &lt;- as.factor(membership(walktrap_communities))\n\ng &lt;- ggraph(bmi2021_graph, layout = 'kk') +\n  geom_edge_link2(aes(width = Value), alpha = 0.5) +\n  scale_edge_width(range = c(0.5, 8)) +\n  geom_node_point(aes(fill = bmi_usd_price, size = bmi_usd_price, color = community), show.legend = FALSE) +\n  geom_node_text(aes(label = country), repel = TRUE, size = 2, hjust = 0.6, vjust = -1.8, color = \"black\") +\n  theme_graph() +\n  labs(fill = \"BMI USD Price\", color = \"Community\")  \n\ng\n\n\n\n\n\nCalling out the communities - These communities will be passed on for regression.\n\n\nCode\ncommunity_membership &lt;- membership(walktrap_communities)\nnode_names &lt;- V(bmi2021_graph)$country \n\nif(length(community_membership) == length(node_names)) {\n    node_stats &lt;- data.frame(\n        node = node_names,\n        community = as.factor(community_membership)\n    )\n  \n    \n    countries_in_community &lt;- aggregate(node ~ community, data = node_stats, FUN = function(x) paste(x, collapse = \", \"))\n  \n    # Print the list of countries by community\n    print(countries_in_community)\n} else {\n    print(\"Mismatch in lengths of community memberships and node names.\")\n}\n\n\n   community\n1          1\n2          2\n3          3\n4          4\n5          5\n6          6\n7          7\n8          8\n9          9\n10        10\n11        11\n12        12\n                                                                                                             node\n1  Lebanon, South Korea, Chile, United Arab Emirates, Brazil, Bahrain, Philippines, Viet Nam, Oman, Egypt, Mexico\n2                                                           Germany, Netherlands, Belgium, New Zealand, Singapore\n3                                                   Sweden, Israel, Canada, Hong Kong, India, Malaysia, Indonesia\n4                                                                 Thailand, Czech Republic, Peru, Jordan, Hungary\n5         France, Austria, Greece, Portugal, Uruguay, United Kingdom, Saudi Arabia, Croatia, Qatar, Poland, China\n6                                                                         United States, Kuwait, Argentina, Japan\n7                                                                Costa Rica, Ukraine, South Africa, Ghana, Turkey\n8                                                                                                     Switzerland\n9                                                                                                           Spain\n10                                                                                                      Australia\n11                                                                                                        Denmark\n12                                                                                                         Russia\n\n\n\n\nCode\ncommunities_walktrap &lt;- cluster_walktrap(bmi2021_graph, weights = E(bmi2021_graph)$Value)\n\n# Add community membership directly into the graph object\nV(bmi2021_graph)$community &lt;- as.factor(membership(communities_walktrap))\n\n# Create nodes data frame\nnodes_data &lt;- data.frame(\n  id = V(bmi2021_graph)$country,  # Assuming 'name' attribute contains the country names\n  label = V(bmi2021_graph)$country,\n  value = V(bmi2021_graph)$bmi_usd_price, # Adjust attribute names as necessary\n  title = paste(\"&lt;b&gt;BMI:&lt;/b&gt;\", V(bmi2021_graph)$bmi_usd_price,\n                \"&lt;br&gt;&lt;b&gt;GDP:&lt;/b&gt;\", V(bmi2021_graph)$gdp_per_capita,\n                \"&lt;br&gt;&lt;b&gt;Inflation:&lt;/b&gt;\", V(bmi2021_graph)$inflation),\n  community = V(bmi2021_graph)$community\n)\n\n# Assign colors to communities\nnum_communities &lt;- length(unique(nodes_data$community))\ncolor_palette &lt;- colorRampPalette(RColorBrewer::brewer.pal(min(9, num_communities), \"Set1\"))\ncommunity_colors &lt;- color_palette(num_communities)\ncolor_mapping &lt;- setNames(community_colors, levels(nodes_data$community))\nnodes_data$color &lt;- color_mapping[nodes_data$community]\n\n\nedges_data &lt;- data.frame(from = bmi_edges_2021$Origin, \n                         to = bmi_edges_2021$Partners,\n                         value = bmi_edges_2021$Value,\n                         title = bmi_edges_2021$Trade,\n                         arrows = 'to')\n\n# Create the network visualization\nnetwork &lt;- visNetwork(nodes_data, edges_data) %&gt;%\n  visNodes(aes(fill = \"community\", color = \"community\"), shape = \"dot\", scaling = list(label = list(enabled = TRUE)), color = list(background = \"white\", border = \"#2B7CE9\"),\n           font = list(color = \"white\")) %&gt;%\n  visEdges(smooth = FALSE, color = list(color = \"#A5ABB6\", highlight = \"#FF4F09\", arrows = \"to\")) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123) %&gt;%\n  visInteraction(navigationButtons = TRUE) %&gt;%\n  visLegend()\n\n\n# Customize the background color with custom CSS\nnetwork &lt;- network %&gt;% \n  htmlwidgets::onRender(\"\n    function(el, x) {\n      el.style.backgroundColor = 'black';\n    }\n  \")\n\n\nnetwork\n\n\n\n\n\n\nSpinglass Exposing the calibrating parameters for this community detection algo.\nspins: The number of spin states. This is a crucial parameter that can indirectly determine the number of communities detected. A larger number of spins allows the algorithm to explore a more significant number of potential community structures.\ngamma: The resolution parameter influences the size of the communities detected. Higher values of gamma can lead to finer, smaller communities, while lower values can result in larger, more aggregated communities.\n\n\nCode\n# Choosing the weights\n#E(bmi2021_graph)$Value\n#E(bmi2021_graph)$betweenness \n#E(bmi2021_graph)$eigenvector \n#E(bmi2021_graph)$closenesss\n#E(bmi2021_graph)$degree \n\n# Assuming bmi2021_graph is already created and is an igraph object\n# Calibrating Parameters for Spinglass\nspins = 30 # (2 to 30)\ngamma = 1 # (1 to 15)\nweights = E(bmi2021_graph)$Value\n\n\nspinglass_communities &lt;- cluster_spinglass(bmi2021_graph, \n                                           spins = spins, \n                                           gamma = gamma,\n                                           weights = weights)\n\n# Assign community membership to nodes for visualization\nV(bmi2021_graph)$community &lt;- as.factor(membership(spinglass_communities))\n\n# Visualize the graph\nset.seed(123) # For reproducible layout\ng &lt;- ggraph(bmi2021_graph, layout = 'kk') + \n  geom_edge_link(aes(width = Value), alpha = 0.5) +\n  scale_edge_width(range = c(0.5, 8)) + \n  geom_node_point(aes(fill = bmi_usd_price, size = bmi_usd_price, color = community), show.legend = FALSE) +\n  geom_node_text(aes(label = country), repel = TRUE, size = 2, hjust = -0.2, vjust = 0.2, color = \"black\") +\n  theme_graph() +\n  labs(fill = \"BMI USD Price\", color = \"Community\", size = \"Betweenness\")\n\nprint(g)\n\n\n\n\n\nCalling out the communities - These communities will be passed on for regression.\n\n\nCode\n# Assuming you've already created 'node_stats' as previously discussed\ncommunity_membership &lt;- membership(spinglass_communities)\nnode_names &lt;- V(bmi2021_graph)$country  # Ensure this matches your node naming\n\nif(length(community_membership) == length(node_names)) {\n    node_stats &lt;- data.frame(\n        node = node_names,\n        community = as.factor(community_membership)\n    )\n  \n    # Group by community and concatenate country names\n    countries_in_community &lt;- aggregate(node ~ community, data = node_stats, FUN = function(x) paste(x, collapse = \", \"))\n  \n    # Print the list of countries by community\n    print(countries_in_community)\n} else {\n    print(\"Mismatch in lengths of community memberships and node names.\")\n}\n\n\n  community\n1         1\n2         2\n3         3\n4         4\n5         5\n6         6\n7         7\n8         8\n                                                                                             node\n1         Lebanon, South Korea, Chile, United Arab Emirates, Hungary, Philippines, Viet Nam, Oman\n2 France, Austria, Greece, New Zealand, Uruguay, Singapore, Thailand, Saudi Arabia, Croatia, Peru\n3             Canada, United Kingdom, Qatar, Poland, China, Hong Kong, India, Malaysia, Indonesia\n4                                                                                Spain, Australia\n5                                United States, Bahrain, Kuwait, Argentina, Japan, Mexico, Russia\n6                                                 Portugal, Czech Republic, Brazil, Jordan, Egypt\n7                                       Denmark, Costa Rica, Ukraine, South Africa, Ghana, Turkey\n8                                      Switzerland, Sweden, Israel, Germany, Netherlands, Belgium\n\n\n\n\nCode\n# Perform Spinglass community detection\ncommunities_spinglass &lt;- cluster_spinglass(bmi2021_graph, weights = E(bmi2021_graph)$Value)\n\n# Add community info to the nodes dataframe\nbmi_node_2021$community &lt;- communities_spinglass$membership\n\n# Ensure 'id' column for joining and 'label' for visNetwork node labels\nbmi_node_2021$label &lt;- bmi_node_2021$country\n\nbmi_node_2021$community &lt;- as.factor(bmi_node_2021$community)\n\nnum_communities &lt;- length(unique(bmi_node_2021$community))\n\n# Generate a color for each community\n# Use colorRampPalette to create more colors if needed\ncolor_palette &lt;- colorRampPalette(RColorBrewer::brewer.pal(min(12, num_communities), name = \"Set1\"))\ncommunity_colors &lt;- color_palette(num_communities)\n\n# Map community IDs to colors\ncolor_mapping &lt;- setNames(community_colors, levels(bmi_node_2021$community))\nbmi_node_2021$color &lt;- color_mapping[bmi_node_2021$community]\n\nbmi_edges_2021_aggregated &lt;- bmi_edges_2021 %&gt;%\n  left_join(bmi_node_2021, by = c(\"Origin\" = \"country\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(bmi_node_2021, by = c(\"Partners\" = \"country\")) %&gt;%\n  rename(to = id) %&gt;%\n   group_by(from, to) %&gt;%\n    summarise(Value = n()) %&gt;%\n filter(from!=to) %&gt;%\n  #filter(Value &gt; 1) %&gt;%\n  ungroup()\nbmi_node_2021$label &lt;- bmi_node_2021$country\n\n# Create the network visualization\nnetwork &lt;- visNetwork(nodes = bmi_node_2021, edges = bmi_edges_2021_aggregated) %&gt;%\n  visNodes(aes(fill = \"community\", color = \"community\"), shape = \"dot\", scaling = list(label = list(enabled = TRUE)),\n           font = list(size = 20, face = \"arial\", color = \"white\", bold = \"true\")) %&gt;%\n  visEdges(smooth = TRUE, color = list(color = \"#A5ABB6\", highlight = \"#FF4F09\", arrows = \"to\")) %&gt;%\n  visOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\n  visLayout(randomSeed = 123) %&gt;%\n  visInteraction(navigationButtons = TRUE) %&gt;%\n  visLegend()\n\n  # Add custom CSS to change the background color\nnetwork &lt;- network %&gt;% \n  htmlwidgets::onRender(\"\n    function(el, x) {\n      el.style.backgroundColor = 'black';\n    }\n  \")\n\nnetwork\n\n\n\n\n\n\n\n\nWalktrap\n\nInsight: Walktrap finds communities by simulating random walks on the network, with the idea that walks are “trapped” within densely connected parts of the graph. Implication for Big Mac Index: The communities detected could reflect clusters of countries where trade flow is more frequent or robust, possibly due to geographic proximity or trade agreements, which in turn may affect the local pricing strategies included in the Big Mac Index.\n\nSpinglass\n\nInsight: This method uses a spin model from statistical mechanics and is particularly good at detecting community structures where communities may be hierarchically nested. Implication for Big Mac Index: Spinglass communities may reflect complex and layered trade relationships, possibly uncovering hierarchies in economic interactions that could influence the Big Mac Index.\n\nComparison Summary:\n\nThe Walktrap method may reveal more about regional trading blocks or groups of countries with stronger internal trade links that could have similar Big Mac pricing due to shared market conditions. The Spinglass method can uncover more nuanced and multi-level communities, possibly highlighting intricate trade relationships and their cascading effects on the Big Mac Index."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html",
    "href": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html",
    "title": "Viz- Makeover Exercise",
    "section": "",
    "text": "This document serves as a submission for Take-home Exercise 2 as required by the course ISSS608 Visual Analytics and Applications.\nIn this exercise, we aim to apply the different data visualization design practices and principles and improve on the Take-home Exercise 1 output of a fellow classmate. Context for Exercise 1 as shown below.\nTask Context OECD education director Andreas Schleicher shared in a BBC article that “Singapore managed to achieve excellence without wide differences between children from wealthy and disadvantaged families.” (2016) Furthermore, several Singapore’s Minister for Education also started an “every school a good school” slogan. The general public, however, strongly believes that there are still disparities that exist, especially between the elite schools and neighborhood school, between students from families with higher socioeconomic status and those with relatively lower socioeconomic status and immigration and non-immigration families**.\nTask 1 Objectives The exercise task take-home exercise 1 are: to use appropriate Exploratory Data Analysis (EDA) methods and ggplot2 functions to reveal (1) Singapore students’ performance in mathematics, reading, and science and (2) relationship between these performances with schools, gender and socioeconomic status (SES) of the students."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#installation-of-packages-following-the-code-chunk-below",
    "href": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#installation-of-packages-following-the-code-chunk-below",
    "title": "Viz- Makeover Exercise",
    "section": "2.1 Installation of packages following the code chunk below:",
    "text": "2.1 Installation of packages following the code chunk below:\n\n\nCode\npacman::p_load(tidyverse, haven, dplyr, plyr, ggrepel, ggthemes, knitr, kableExtra, intsvy, hrbrthemes, ggridges, ggdist, patchwork, colorspace, reshape2, scales, ggplot2, ggpol, gridExtra)"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#importing-the-data",
    "href": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#importing-the-data",
    "title": "Viz- Makeover Exercise",
    "section": "2.2 Importing the data",
    "text": "2.2 Importing the data\nImporting data set and filtering data from Singapore Students only.\n\n\nCode\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\nstu_qqq_SG &lt;- stu_qqq %&gt;% filter(CNT ==\"SGP\")\nwrite_rds(stu_qqq_SG,\"data/stu_qqq_SG.rds\")\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")\nhead(stu_qqq_SG, 5)\n\n\n# A tibble: 5 × 1,279\n  CNT   CNTRYID CNTSCHID CNTSTUID CYC   NatCen STRATUM SUBNATIO REGION  OECD\n  &lt;chr&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 SGP       702 70200052 70200001 08MS  070200 SGP01   7020000   70200     0\n2 SGP       702 70200134 70200002 08MS  070200 SGP01   7020000   70200     0\n3 SGP       702 70200112 70200003 08MS  070200 SGP01   7020000   70200     0\n4 SGP       702 70200004 70200004 08MS  070200 SGP01   7020000   70200     0\n5 SGP       702 70200152 70200005 08MS  070200 SGP01   7020000   70200     0\n# ℹ 1,269 more variables: ADMINMODE &lt;dbl&gt;, LANGTEST_QQQ &lt;dbl&gt;,\n#   LANGTEST_COG &lt;dbl&gt;, LANGTEST_PAQ &lt;dbl&gt;, Option_CT &lt;dbl&gt;, Option_FL &lt;dbl&gt;,\n#   Option_ICTQ &lt;dbl&gt;, Option_WBQ &lt;dbl&gt;, Option_PQ &lt;dbl&gt;, Option_TQ &lt;dbl&gt;,\n#   Option_UH &lt;dbl&gt;, BOOKID &lt;dbl&gt;, ST001D01T &lt;dbl&gt;, ST003D02T &lt;dbl&gt;,\n#   ST003D03T &lt;dbl&gt;, ST004D01T &lt;dbl&gt;, ST250Q01JA &lt;dbl&gt;, ST250Q02JA &lt;dbl&gt;,\n#   ST250Q03JA &lt;dbl&gt;, ST250Q04JA &lt;dbl&gt;, ST250Q05JA &lt;dbl&gt;, ST250D06JA &lt;chr&gt;,\n#   ST250D07JA &lt;chr&gt;, ST251Q01JA &lt;dbl&gt;, ST251Q02JA &lt;dbl&gt;, ST251Q03JA &lt;dbl&gt;, …"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#data-wrangling",
    "href": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#data-wrangling",
    "title": "Viz- Makeover Exercise",
    "section": "2.3 Data Wrangling",
    "text": "2.3 Data Wrangling\n\n\nCode\nstu_qqq_SG_selectedV &lt;- stu_qqq_SG %&gt;% select(CNTSTUID, STRATUM, ST004D01T, IMMIG, ESCS,PV1READ:PV10READ, PV1SCIE:PV10SCIE, PV1MATH:PV10MATH)\nstu_qqq_SG_selectedV&lt;- stu_qqq_SG_selectedV %&gt;% mutate(CNTSTUID = as.character(CNTSTUID))\n\nnames(stu_qqq_SG_selectedV)[names(stu_qqq_SG_selectedV) == 'CNTSTUID'] &lt;- 'STUDENT ID'\n\nnames(stu_qqq_SG_selectedV)[names(stu_qqq_SG_selectedV) == 'ST004D01T'] &lt;- 'GENDER'\n\nstu_qqq_SG_selectedV &lt;- stu_qqq_SG_selectedV %&gt;%\n  mutate(GENDER = recode(as.character(GENDER), '1' = 'FEMALE', '2' = 'MALE'))\n\nstu_qqq_SG_selectedV &lt;- stu_qqq_SG_selectedV %&gt;%\n  mutate(STRATUM = recode(STRATUM, 'SGP01' = 'MAINSTREAM SCH', 'SGP03' = 'PRIVATE SCH'))\n\nstu_qqq_SG_selectedV&lt;- stu_qqq_SG_selectedV %&gt;%\n  mutate(IMMIG = recode(IMMIG, '1' = 'NATIVE', '2' = '2ND GEN', '3' = '1ST GEN'))"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#initial-visualisation-outlook",
    "href": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#initial-visualisation-outlook",
    "title": "Viz- Makeover Exercise",
    "section": "3.1 Initial Visualisation Outlook",
    "text": "3.1 Initial Visualisation Outlook\nThe first example we look at a visualisation example of Average PV values across frequency below:\n\nIntended Viz’s Proposition\nIn this visualisation, the author created a Histogram with a Box plot to show the Average PVs versus Frequency across 3 subjects. It was a good attempt to show the readers the distribution skews, the statistical mean (with the red dot) and, possibly the outliers’ stretch to determine min|max range within each subjects."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#potential-enhancements",
    "href": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#potential-enhancements",
    "title": "Viz- Makeover Exercise",
    "section": "3.2 Potential Enhancements",
    "text": "3.2 Potential Enhancements\nTo achieve the balance between aesthetics and clarity a few enhancements can be made:\n\nTo view the skewness of the distribution with accuracy, we must maintain the aspect ratio of the plots produced. This implies that patchwork function is not recommended as it will compress the aspect ratio making the scale of the axes inaccurate.\nThe X Axis should be represented accurate as the Average of PVs in each subject. while the Y Axis should be the score\nWe can also explore to include the Statistical Summary of Mean and Median values and the lines corresponding to it and input a legend on the top right for quick reference.\nBin width was selected at 20. This allows the balance of appeal (avoiding too many vertical lines) while still balancing the clarity of the shape of the distribution shown.\nThe Grid panels, major and minor lines were designed to be subtle-ly more apparent so that it can provide quick reference to x/y axis for the various bins\nBoth axes to start from ‘0’ to give an accurate representation of each bin.\nThe fill colour of the Histogram bins were made with high transparent fill effect, this is to allow easier reference of all the major and minor grid lines for x and y axes.\n\n\nMATHREADINGSCIENCE\n\n\n\n\nCode\nstu_qqq_SG_selectedV &lt;- stu_qqq_SG_selectedV %&gt;%\n  mutate(Maths = rowSums(stu_qqq_SG_selectedV[paste0('PV', c(1:10), \"MATH\")], \n                   na.rm = TRUE)/10) %&gt;% \n  mutate(Reading = \n           rowSums(stu_qqq_SG[paste0('PV', c(1:10), \"READ\")], \n                   na.rm = TRUE)/10) %&gt;% \n  mutate(Science = \n           rowSums(stu_qqq_SG[paste0('PV', c(1:10), \"SCIE\")], \n                   na.rm = TRUE)/10)\n\n# Maths Histogram and Boxplot with Mean and Median\nmaths_plot &lt;- ggplot(stu_qqq_SG_selectedV, aes(x = Maths)) +\n  geom_histogram(color = \"#459395\", binwidth = 20, fill = \"#459395\", alpha = 0.4) + coord_cartesian(xlim = c(0,1000), ylim = c(-80,600)) +\n  geom_boxplot(width = 40, position = position_nudge(y = -60), outlier.shape = 20, outlier.size = 4, outlier.color = \"darkblue\", fill = \"#459395\", color = \"#000000\", alpha = 0.1) +\n  geom_vline(aes(xintercept = mean(Maths, na.rm = TRUE)), linetype = \"dashed\", color = \"red\", size = 0.8, alpha = 0.5) +\n  annotate(\"text\", x = mean(stu_qqq_SG_selectedV$Maths, na.rm = TRUE) + 20, y = -20, label = paste(round(mean(stu_qqq_SG_selectedV$Maths, na.rm = TRUE), 2)), color = \"red\", size = 4, angle = 0, hjust = 1.35) +\n  geom_vline(aes(xintercept = median(Maths, na.rm = TRUE)), linetype = \"solid\", color = \"blue\", size = 0.8, alpha = 0.5) +\n  annotate(\"text\", x = median(stu_qqq_SG_selectedV$Maths, na.rm = TRUE) + 20, y = -20, label = paste(round(median(stu_qqq_SG_selectedV$Maths, na.rm = TRUE), 2)), color = \"blue\", size = 4, angle = 0, hjust = 0.15) +\n  labs(title = \"Distribution of Maths Scores (PV)\", x = \"Maths Scores\", y = \"Density\") +\n  theme_minimal()\n\nmaths_plot &lt;- maths_plot +\n  theme(panel.background = element_rect(fill = \"grey95\", color = NA),\n        panel.grid.major = element_line(color = \"grey80\", size = 0.5),\n        panel.grid.minor = element_line(color = \"grey90\", size = 0.25)) +\n  annotate(\"text\", x = 900, y = 580, label = \"Mean Value\", color = \"red\", size = 3.5, alpha = 0.8) +\n  annotate(\"text\", x = 900, y = 550, label = \"Median Value\", color = \"blue\", size = 3.5, alpha = 0.8)\n\nprint(maths_plot)\n\n\n\n\n\n\n\n\n\nCode\nreading_plot &lt;- ggplot(stu_qqq_SG_selectedV, aes(x = Reading)) +\n  geom_histogram(color = \"#EB7C69\", binwidth = 20, fill = \"#EB7C69\", alpha = 0.4) + coord_cartesian(xlim = c(0,1000), ylim = c(-80,600)) +\n  geom_boxplot(width = 40, position = position_nudge(y = -60), outlier.shape = 20, outlier.size = 4, outlier.color = \"red\", fill = \"#EB7C69\", color = \"#000000\", alpha = 0.1) +\n  geom_vline(aes(xintercept = mean(Reading, na.rm = TRUE)), linetype = \"dashed\", color = \"red\", size = 0.8, alpha = 0.5) +\n  annotate(\"text\", x = mean(stu_qqq_SG_selectedV$Reading, na.rm = TRUE) + 20, y = -20, label = paste(round(mean(stu_qqq_SG_selectedV$Reading, na.rm = TRUE), 2)), color = \"red\", size = 4, angle = 0, hjust = 1.35) +\n  geom_vline(aes(xintercept = median(Reading, na.rm = TRUE)), linetype = \"solid\", color = \"blue\", size = 0.8, alpha = 0.5) +\n  annotate(\"text\", x = median(stu_qqq_SG_selectedV$Reading, na.rm = TRUE) + 20, y = -20, label = paste(round(median(stu_qqq_SG_selectedV$Reading, na.rm = TRUE), 2)), color = \"blue\", size = 4, angle = 0, hjust = 0.15) +\n  labs(title = \"Distribution of Reading Scores (PV)\", x = \"Reading Scores\", y = \"Density\") +\n  theme_minimal()\n\nreading_plot &lt;- reading_plot +\n  theme(panel.background = element_rect(fill = \"grey95\", color = NA),\n        panel.grid.major = element_line(color = \"grey80\", size = 0.5),\n        panel.grid.minor = element_line(color = \"grey90\", size = 0.25)) +\n  annotate(\"text\", x = 900, y = 580, label = \"Mean Value\", color = \"red\", size = 3.5, alpha = 0.8) +\n  annotate(\"text\", x = 900, y = 550, label = \"Median Value\", color = \"blue\", size = 3.5, alpha = 0.8)\n\nprint(reading_plot)\n\n\n\n\n\n\n\n\n\nCode\nscience_plot &lt;- ggplot(stu_qqq_SG_selectedV, aes(x = Science)) +\n  geom_histogram(color = \"#FDA638\", binwidth = 20, fill = \"#FDA638\", alpha = 0.4) + coord_cartesian(xlim = c(0,1000), ylim = c(-80,600)) +\n  geom_boxplot(width = 40, position = position_nudge(y = -60), outlier.shape = 20, outlier.size = 4, outlier.color = \"darkorange\", fill = \"#FDA638\", color = \"#000000\", alpha = 0.1) +\n  geom_vline(aes(xintercept = mean(Science, na.rm = TRUE)), linetype = \"dashed\", color = \"red\", size = 0.8, alpha = 0.5) +\n  annotate(\"text\", x = mean(stu_qqq_SG_selectedV$Science, na.rm = TRUE) + 20, y = -20, label = paste(round(mean(stu_qqq_SG_selectedV$Science, na.rm = TRUE), 2)), color = \"red\", size = 4, angle = 0, hjust = 1.35) +\n  geom_vline(aes(xintercept = median(Science, na.rm = TRUE)), linetype = \"solid\", color = \"blue\", size = 0.8, alpha = 0.5) +\n  annotate(\"text\", x = median(stu_qqq_SG_selectedV$Science, na.rm = TRUE) + 20, y = -20, label = paste(round(median(stu_qqq_SG_selectedV$Science, na.rm = TRUE), 2)), color = \"blue\", size = 4, angle = 0, hjust = 0.15) +\n  labs(title = \"Distribution of Science Scores (PV)\", x = \"Science Scores\", y = \"Density\") +\n  theme_minimal()\n\nscience_plot &lt;- science_plot +\n  theme(panel.background = element_rect(fill = \"grey95\", color = NA),\n        panel.grid.major = element_line(color = \"grey80\", size = 0.5),\n        panel.grid.minor = element_line(color = \"grey90\", size = 0.25)) +\n  annotate(\"text\", x = 900, y = 580, label = \"Mean Value\", color = \"red\", size = 3.5, alpha = 0.8) +\n  annotate(\"text\", x = 900, y = 550, label = \"Median Value\", color = \"blue\", size = 3.5, alpha = 0.8)\n\nprint(science_plot)"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#initial-intended-visualisation-outlook",
    "href": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#initial-intended-visualisation-outlook",
    "title": "Viz- Makeover Exercise",
    "section": "4.1 Initial Intended Visualisation Outlook",
    "text": "4.1 Initial Intended Visualisation Outlook\nNext, we look at a visualisation example of Distribution of Student Performances by Gender:\n\nIntended Viz’s Proposition\nIn this visualisation, the author created boxplots to show the Reading PVs across 3 subjects by Gender."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#potential-enhancements-1",
    "href": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#potential-enhancements-1",
    "title": "Viz- Makeover Exercise",
    "section": "4.2 Potential Enhancements",
    "text": "4.2 Potential Enhancements\nTo achieve the balance between aesthetics and clarity these enhancements can be made:\n\nY axis must be accurately represented across all subjects. This will give a more coherent representation of the means and stats median across the 3 subjects.\nWe can also explore to include the Statistical Summary of Mean and Median values and the lines corresponding to it and input a legend on the top right for quick reference.\nA violin plot can be utilised in the background to give a sense of the distribution and range of the performance within each gender and subject domains.\nThe Grid panels, major and minor lines were designed to be subtle-ly more apparent so that it can provide quick reference to x/y axis for the various bins\nBoth axes to start from ‘0’ to give an accurate representation of each bin.\nThe fill colour of the Histogram bins were made with high transparent fill effect, this is to allow easier reference of all the major and minor grid lines for x and y axes.\n\n\n\nCode\nP7 &lt;- ggplot(data= stu_qqq_SG_selectedV,\n       aes(x= GENDER, y= Maths)) +\n  geom_violin(color = \"#459395\", size = 0.6, fill= \"#459395\", alpha = 0.4) +\n  geom_boxplot(width= 0.4, outlier.colour = \"grey30\", outlier.size = 3, outlier.color = \"darkblue\", \n               outlier.alpha = 0.5, outlier.shape = 19) +\n  stat_summary(geom = \"point\",       \n               fun =\"mean\",         \n               colour =\"red\",        \n               size=3) +  coord_cartesian(ylim = c(0,1000)) +\n  scale_color_manual(values=c(\"#999999\", \"#E69F00\")) +\n  theme_minimal() +\n  labs(title=\"Mathematics\") +  \n  theme(panel.background = element_rect(fill = \"grey95\", color = NA),\n        panel.grid.major = element_line(color = \"grey80\", size = 0.5),\n        panel.grid.minor = element_line(color = \"grey90\", size = 0.25),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        plot.title = element_text(size = 12, hjust = 0.5),\n        axis.text = element_text(size = 10))\nP7 &lt;- P7 +\n  stat_summary(aes(label = round(..y.., 2)), geom = \"text\", fun = mean, \n               vjust = -1.0, color = \"red\", size = 3) +\n  stat_summary(aes(label = round(..y.., 2)), geom = \"text\", fun = median, \n               vjust = 1.8, color = \"blue\", size = 3)\n  \n\nP8 &lt;- ggplot(data= stu_qqq_SG_selectedV,\n       aes(x= GENDER, y= Reading)) +\n  geom_violin(color = \"#EB7C69\", size = 0.6, fill= \"#EB7C69\", alpha = 0.4) +\n  geom_boxplot(width= 0.4, outlier.colour = \"grey30\", outlier.size = 3, outlier.color = \"darkred\", \n               outlier.alpha = 0.5, outlier.shape = 19) +\n  stat_summary(geom = \"point\",       \n               fun =\"mean\",         \n               colour =\"red\",        \n               size=3) +  coord_cartesian(ylim = c(0,1000)) +  \n  theme_minimal() +\n  labs(title=\"Reading\") + \n  theme(panel.background = element_rect(fill = \"grey95\", color = NA),\n        panel.grid.major = element_line(color = \"grey80\", size = 0.5),\n        panel.grid.minor = element_line(color = \"grey90\", size = 0.25),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        plot.title = element_text(size = 12, hjust = 0.5),\n        axis.text = element_text(size = 10))\n  \nP8 &lt;- P8 +\n  stat_summary(aes(label = round(..y.., 2)), geom = \"text\", fun = mean, \n               vjust = -1.0, color = \"red\", size = 3) +\n  stat_summary(aes(label = round(..y.., 2)), geom = \"text\", fun = median, \n               vjust = 1.8, color = \"blue\", size = 3)\n  \nP9 &lt;- ggplot(data= stu_qqq_SG_selectedV,\n       aes(x= GENDER, y= Science)) +\n  geom_violin(color = \"#FDA638\", size = 0.6, fill= \"#FDA638\", alpha = 0.4) +\n  geom_boxplot(width= 0.4, outlier.colour = \"grey30\", outlier.size = 3, outlier.color = \"red\", \n               outlier.alpha = 0.5, outlier.shape = 19) +\n  stat_summary(geom = \"point\",       \n               fun =\"mean\",         \n               colour =\"red\",        \n               size=3) +  coord_cartesian(ylim = c(0,1000)) +  \n  theme_minimal() +\n  labs(title=\"Science\") + \n  theme(panel.background = element_rect(fill = \"grey95\", color = NA),\n        panel.grid.major = element_line(color = \"grey80\", size = 0.5),\n        panel.grid.minor = element_line(color = \"grey90\", size = 0.25),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        plot.title = element_text(size = 12, hjust = 0.5),\n        axis.text = element_text(size = 10))\n\nP9 &lt;- P9 +\n  stat_summary(aes(label = round(..y.., 2)), geom = \"text\", fun = mean, \n               vjust = -1.0, color = \"red\", size = 3) +\n  stat_summary(aes(label = round(..y.., 2)), geom = \"text\", fun = median, \n               vjust = 1.8, color = \"blue\", size = 3) +\n  annotate(\"text\", x = 2.0, y = 1000, label = \"Mean Value\", color = \"red\", size = 3.5, alpha = 0.8) +\n  annotate(\"text\", x =2.0, y = 960, label = \"Median Value\", color = \"blue\", size = 3.5, alpha = 0.8)\n\n(P7 + P8 + P9) +\n    plot_annotation(title= \"Distribution of Performance (PV) by Gender\", subtitle = \"Higher mean scores in Math & Science, for Male Gender\", theme = theme(plot.title=element_text(size= 15, hjust= 0.5)))"
  }
]