[
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex01/Take-Home_Exercise01.html",
    "href": "Take-home_Exercises/Take-Home_Ex01/Take-Home_Exercise01.html",
    "title": "Creating Data Visualisation Beyond Default",
    "section": "",
    "text": "OECD education director Andreas Schleicher shared in a BBC article that “Singapore managed to achieve excellence without wide differences between children from wealthy and disadvantaged families.” (2016) Furthermore, several Singapore’s Minister for Education also started an “every school a good school” slogan. The general public, however, strongly believes that there are still disparities that exist, especially between the elite schools and neighborhood school, between students from families with higher socioeconomic status and those with relatively lower socioeconomic status and immigration and non-immigration families."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex01/Take-Home_Exercise01.html#data-sets",
    "href": "Take-home_Exercises/Take-Home_Ex01/Take-Home_Exercise01.html#data-sets",
    "title": "Creating Data Visualisation Beyond Default",
    "section": "3.1 Data Sets",
    "text": "3.1 Data Sets\nThe PISA 2022 database contains the full set of responses from individual students, school principals and parents. A total of five data sets were extracted and their contents are as follows:\n\nStudent questionnaire data file\nSchool questionnaire data file\nTeacher questionnaire data file\nCognitive item data file\nQuestionnaire timing data file\n\nIn this exercise, we are to utilize the student questionnaire data set only."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex01/Take-Home_Exercise01.html#data-preparation",
    "href": "Take-home_Exercises/Take-Home_Ex01/Take-Home_Exercise01.html#data-preparation",
    "title": "Creating Data Visualisation Beyond Default",
    "section": "3.2 Data Preparation",
    "text": "3.2 Data Preparation\n\n3.2.1 Installing R Packages\nInstallation of mulitple R packages via the use of pacman::p_load() function from the pacman package. See the code chunk below:\n\n\nCode\npacman::p_load(tidyverse, haven, dplyr, plyr, ggrepel, ggthemes, knitr, kableExtra, intsvy, hrbrthemes, ggridges, ggdist, patchwork, colorspace, reshape2, scales, ggplot2, ggpol, gridExtra)\n\n\n\n\n3.2.2 Uploading & Filtering the Data Set\nThe students questionaire data file was uploaded as stu_qqq_SG. See the code chunk below:\n\n\nCode\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\nstu_qqq_SG &lt;- stu_qqq %&gt;% filter(CNT ==\"SGP\")\nwrite_rds(stu_qqq_SG,\"data/stu_qqq_SG.rds\")\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")\nhead(stu_qqq_SG, 5)\n\n\n# A tibble: 5 × 1,279\n  CNT   CNTRYID CNTSCHID CNTSTUID CYC   NatCen STRATUM SUBNATIO REGION  OECD\n  &lt;chr&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 SGP       702 70200052 70200001 08MS  070200 SGP01   7020000   70200     0\n2 SGP       702 70200134 70200002 08MS  070200 SGP01   7020000   70200     0\n3 SGP       702 70200112 70200003 08MS  070200 SGP01   7020000   70200     0\n4 SGP       702 70200004 70200004 08MS  070200 SGP01   7020000   70200     0\n5 SGP       702 70200152 70200005 08MS  070200 SGP01   7020000   70200     0\n# ℹ 1,269 more variables: ADMINMODE &lt;dbl&gt;, LANGTEST_QQQ &lt;dbl&gt;,\n#   LANGTEST_COG &lt;dbl&gt;, LANGTEST_PAQ &lt;dbl&gt;, Option_CT &lt;dbl&gt;, Option_FL &lt;dbl&gt;,\n#   Option_ICTQ &lt;dbl&gt;, Option_WBQ &lt;dbl&gt;, Option_PQ &lt;dbl&gt;, Option_TQ &lt;dbl&gt;,\n#   Option_UH &lt;dbl&gt;, BOOKID &lt;dbl&gt;, ST001D01T &lt;dbl&gt;, ST003D02T &lt;dbl&gt;,\n#   ST003D03T &lt;dbl&gt;, ST004D01T &lt;dbl&gt;, ST250Q01JA &lt;dbl&gt;, ST250Q02JA &lt;dbl&gt;,\n#   ST250Q03JA &lt;dbl&gt;, ST250Q04JA &lt;dbl&gt;, ST250Q05JA &lt;dbl&gt;, ST250D06JA &lt;chr&gt;,\n#   ST250D07JA &lt;chr&gt;, ST251Q01JA &lt;dbl&gt;, ST251Q02JA &lt;dbl&gt;, ST251Q03JA &lt;dbl&gt;, …\n\n\nFocusing on the Exercise Objectives, the Data of Interests will be scoped towards selected variables. These variables are:\n\nSTRATUM\nGENDER\nIMMIGRANT STATUS\nSES STATUS\nPV Values\n\n\n\nCode\nstu_qqq_SG_selectedV &lt;- stu_qqq_SG %&gt;% select(CNTSTUID, STRATUM, ST004D01T, IMMIG, ESCS,PV1READ:PV10READ, PV1SCIE:PV10SCIE, PV1MATH:PV10MATH)\n\n\nThe variables are all anchored based on each Student’s UNIQUE ID - CNTSTUID\n\n\n3.2.3 Checking Data Structure and Coherency\nNext, we will check for duplicates, missing values and convert data types as part of data pre-processing.\nData Health Handling duplicates\n\n\nCode\nstu_qqq_SG_selectedV[duplicated(stu_qqq_SG_selectedV),]\n\n\n# A tibble: 0 × 35\n# ℹ 35 variables: CNTSTUID &lt;dbl&gt;, STRATUM &lt;chr&gt;, ST004D01T &lt;dbl&gt;, IMMIG &lt;dbl&gt;,\n#   ESCS &lt;dbl&gt;, PV1READ &lt;dbl&gt;, PV2READ &lt;dbl&gt;, PV3READ &lt;dbl&gt;, PV4READ &lt;dbl&gt;,\n#   PV5READ &lt;dbl&gt;, PV6READ &lt;dbl&gt;, PV7READ &lt;dbl&gt;, PV8READ &lt;dbl&gt;, PV9READ &lt;dbl&gt;,\n#   PV10READ &lt;dbl&gt;, PV1SCIE &lt;dbl&gt;, PV2SCIE &lt;dbl&gt;, PV3SCIE &lt;dbl&gt;, PV4SCIE &lt;dbl&gt;,\n#   PV5SCIE &lt;dbl&gt;, PV6SCIE &lt;dbl&gt;, PV7SCIE &lt;dbl&gt;, PV8SCIE &lt;dbl&gt;, PV9SCIE &lt;dbl&gt;,\n#   PV10SCIE &lt;dbl&gt;, PV1MATH &lt;dbl&gt;, PV2MATH &lt;dbl&gt;, PV3MATH &lt;dbl&gt;, PV4MATH &lt;dbl&gt;,\n#   PV5MATH &lt;dbl&gt;, PV6MATH &lt;dbl&gt;, PV7MATH &lt;dbl&gt;, PV8MATH &lt;dbl&gt;, …\n\n\nChecking missing values\n\n\nCode\nsum(is.na(stu_qqq_SG_selectedV))\n\n\n[1] 283\n\n\nThere are a total of 283 missing values which is merely 4.2% of the overall data set hence can regarded as statistically negligible.\nConverting Data Types: Converting CNTSTUID & GENDER from num type to chrtype as they are categorical in nature. Subsequently, renaming and recoding them to enhance data comprehension.\n\n\nCode\nstu_qqq_SG_selectedV&lt;- stu_qqq_SG_selectedV %&gt;% mutate(CNTSTUID = as.character(CNTSTUID))\n\nnames(stu_qqq_SG_selectedV)[names(stu_qqq_SG_selectedV) == 'CNTSTUID'] &lt;- 'STUDENT ID'\n\nnames(stu_qqq_SG_selectedV)[names(stu_qqq_SG_selectedV) == 'ST004D01T'] &lt;- 'GENDER'\n\nstu_qqq_SG_selectedV &lt;- stu_qqq_SG_selectedV %&gt;%\n  mutate(GENDER = recode(as.character(GENDER), '1' = 'FEMALE', '2' = 'MALE'))\n\nstu_qqq_SG_selectedV &lt;- stu_qqq_SG_selectedV %&gt;%\n  mutate(STRATUM = recode(STRATUM, 'SGP01' = 'MAINSTREAM SCH', 'SGP03' = 'PRIVATE SCH'))\n\nstu_qqq_SG_selectedV&lt;- stu_qqq_SG_selectedV %&gt;%\n  mutate(IMMIG = recode(IMMIG, '1' = 'NATIVE', '2' = '2ND GEN', '3' = '1ST GEN'))"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex01/Take-Home_Exercise01.html#explore-score-distribution-across-all-subjects",
    "href": "Take-home_Exercises/Take-Home_Ex01/Take-Home_Exercise01.html#explore-score-distribution-across-all-subjects",
    "title": "Creating Data Visualisation Beyond Default",
    "section": "4.1 Explore Score Distribution across all subjects",
    "text": "4.1 Explore Score Distribution across all subjects\n\n4.1.1 Observations through Prob Density and Histogram\nUtilising the prob density and histogram, we develop the visualisation to observe the distributions and the summary stats across all subject of interests.\n\nAll Subjects\n\n\nCode\nstu_qqq_SG_selectedV &lt;- stu_qqq_SG_selectedV %&gt;%\n  mutate(Maths = rowSums(stu_qqq_SG_selectedV[paste0('PV', c(1:10), \"MATH\")], \n                   na.rm = TRUE)/100) %&gt;% \n  mutate(Reading = \n           rowSums(stu_qqq_SG[paste0('PV', c(1:10), \"READ\")], \n                   na.rm = TRUE)/100) %&gt;% \n  mutate(Science = \n           rowSums(stu_qqq_SG[paste0('PV', c(1:10), \"SCIE\")], \n                   na.rm = TRUE)/100)\ntemp_Data &lt;- stu_qqq_SG_selectedV[, c(\"Science\", \"Reading\", \"Maths\")]\ntemp_Data &lt;- melt(temp_Data, variable.name = \"Subject\")\n\n\nNo id variables; using all as measure variables\n\n\nCode\nggplot(temp_Data, aes(x = value, y = Subject)) +\n  stat_halfeye(aes(fill = Subject), \n               adjust = 0.5,\n               justification = 0.1,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = 0.2) +\n  stat_summary(fun = mean, geom = \"point\", shape = 16, \n               size = 3, color = \"darkred\", \n               position = position_nudge(x = 0.0)) +\n  stat_summary(fun = mean, colour=\"darkred\", \n               geom = \"text\", show.legend = FALSE, \n               vjust = -1.5, aes( label=round(after_stat(x), 1))) +\n  labs(y = NULL, x = \"Scores\",\n       title = \"Distribution of Scores\",\n       subtitle = \"Math subject, yielded greater performance by students compared to Reading and Science\") +\n  theme_tidybayes()+\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nMaths Score\n\n\nCode\n# Calculate mean and median\nmean_value &lt;- mean(stu_qqq_SG_selectedV$Maths, na.rm = TRUE)\nmedian_value &lt;- median(stu_qqq_SG_selectedV$Maths, na.rm = TRUE)\n\n# Create the histogram\nhistogram_plot &lt;- ggplot(data = stu_qqq_SG_selectedV, aes(x = Maths)) +\n  geom_histogram(binwidth = 2, fill = \"lightblue\", color = \"black\") +  # Adjust binwidth and color here\n  geom_vline(xintercept = mean_value, color = \"red\", linetype = \"dashed\", linewidth = 0.5) +\n  geom_vline(xintercept = median_value, color = \"blue\", linetype = \"dotted\", linewidth = 0.5) +\n  labs(title = \"Histogram of Maths Scores\",\n       x = \"Maths Scores\",\n       y = \"Frequency\",\n       subtitle = paste(\"Mean (red):\", round(mean_value, 2), \n                        \"- Median (blue):\", round(median_value, 2)))\n\n# Print the plot\nprint(histogram_plot)  \n\n\n\n\n\n\n\nReading\n\n\nCode\n# Calculate mean and median\nmean_value &lt;- mean(stu_qqq_SG_selectedV$Reading, na.rm = TRUE)\nmedian_value &lt;- median(stu_qqq_SG_selectedV$Reading, na.rm = TRUE)\n\n# Create the histogram\nhistogram_plot &lt;- ggplot(data = stu_qqq_SG_selectedV, aes(x = Reading)) +\n  geom_histogram(binwidth = 2, fill = \"lightgreen\", color = \"black\") +  # Adjust binwidth and color here\n  geom_vline(xintercept = mean_value, color = \"red\", linetype = \"dashed\", linewidth = 0.5) +\n  geom_vline(xintercept = median_value, color = \"blue\", linetype = \"dotted\", linewidth = 0.5) +\n  labs(title = \"Histogram of Reading Scores\",\n       x = \"Reading Scores\",\n       y = \"Frequency\",\n       subtitle = paste(\"Mean (red):\", round(mean_value, 2), \n                        \"- Median (blue):\", round(median_value, 2)))\n\n# Print the plot\nprint(histogram_plot)  \n\n\n\n\n\n\n\nScience\n\n\nCode\n# Calculate mean and median\nmean_value &lt;- mean(stu_qqq_SG_selectedV$Science, na.rm = TRUE)\nmedian_value &lt;- median(stu_qqq_SG_selectedV$Science, na.rm = TRUE)\n\n# Create the histogram\nhistogram_plot &lt;- ggplot(data = stu_qqq_SG_selectedV, aes(x = Science)) +\n  geom_histogram(binwidth = 2, fill = \"lightpink\", color = \"black\") +  # Adjust binwidth and color here\n  geom_vline(xintercept = mean_value, color = \"red\", linetype = \"dashed\", linewidth = 0.5) +\n  geom_vline(xintercept = median_value, color = \"blue\", linetype = \"dotted\", linewidth = 0.5) +\n  labs(title = \"Histogram of Science Scores\",\n       x = \"Science Scores\",\n       y = \"Frequency\",\n       subtitle = paste(\"Mean (red):\", round(mean_value, 2), \n                        \"- Median (blue):\", round(median_value, 2)))\n\n# Print the plot\nprint(histogram_plot)"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex01/Take-Home_Exercise01.html#insights-observations",
    "href": "Take-home_Exercises/Take-Home_Ex01/Take-Home_Exercise01.html#insights-observations",
    "title": "Creating Data Visualisation Beyond Default",
    "section": "4.1.2 Insights & Observations",
    "text": "4.1.2 Insights & Observations\n\nThe aim of these visualisations was to show the performance distribution of students across all individual subjects.\nTrends in each plot showed :\n\ndistribution characteristic is of a Normal Distribution,\ndistribution mildly skews to the left.\nFrom here we can deduce that just about more than half of the cohort scores above the 50% mark.\n\nStudents fair better in Math, as a subject, compared to Reading and Science. :::"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex01/Take-Home_Exercise01.html#exploring-performance-score-by-gender",
    "href": "Take-home_Exercises/Take-Home_Ex01/Take-Home_Exercise01.html#exploring-performance-score-by-gender",
    "title": "Creating Data Visualisation Beyond Default",
    "section": "4.2 Exploring Performance Score by Gender",
    "text": "4.2 Exploring Performance Score by Gender\n\n4.2.1 Observations through boxplots\nUtilising the boxplots, we visualise the how gender fair across all subjects.\n\nMathReadingScience\n\n\n\n\nCode\nlibrary(ggplot2)\n\n# Calculate mean and median for each gender\nmeans &lt;- aggregate(Maths ~ GENDER, data = stu_qqq_SG_selectedV, FUN = mean)\n\n# Create the boxplot\nggplot(data = stu_qqq_SG_selectedV, aes(y = Maths, x = GENDER, color = GENDER)) +\n  geom_boxplot(width = 0.3) +\n  \n  # Add mean lines\n  geom_errorbar(data = means, aes(ymin = Maths, ymax = Maths, x = GENDER), \n                width = 0.2, color = \"darkred\") +\n  geom_text(data = means, aes(label = round(Maths, 1), y = Maths, x = GENDER), \n            vjust = -1.5, color = \"darkred\", size = 3) +\n  \n  # Titles and subtitles\n  labs(title = \"Maths Scores by Gender\",\n       subtitle = \"Male scores better in Maths in comparison with Female\",\n       x = \"Gender\",\n       y = \"Maths Scores\",\n       color = \"Gender\")\n\n\n\n\n\n\n\n\n\nCode\nlibrary(ggplot2)\n\n# Calculate mean and median for each gender\nmeans &lt;- aggregate(Reading ~ GENDER, data = stu_qqq_SG_selectedV, FUN = mean)\n\n# Create the boxplot\nggplot(data = stu_qqq_SG_selectedV, aes(y = Reading, x = GENDER, color = GENDER)) +\n  geom_boxplot(width = 0.3) +\n  \n  # Add mean lines\n  geom_errorbar(data = means, aes(ymin = Reading, ymax = Reading, x = GENDER), \n                width = 0.2, color = \"darkred\") +\n  geom_text(data = means, aes(label = round(Reading, 1), y = Reading, x = GENDER), \n            vjust = -1.5, color = \"darkred\", size = 3) +\n  \n  # Titles and subtitles\n  labs(title = \"Reading Scores by Gender\",\n       subtitle = \"Female scores better in Reading\",\n       x = \"Gender\",\n       y = \"Reading Scores\",\n       color = \"Gender\")\n\n\n\n\n\n\n\n\n\nCode\nlibrary(ggplot2)\n\n# Calculate mean and median for each gender\nmeans &lt;- aggregate(Science ~ GENDER, data = stu_qqq_SG_selectedV, FUN = mean)\n\n# Create the boxplot\nggplot(data = stu_qqq_SG_selectedV, aes(y = Science, x = GENDER, color = GENDER)) +\n  geom_boxplot(width = 0.3) +\n  \n  # Add mean lines\n  geom_errorbar(data = means, aes(ymin = Science, ymax = Science, x = GENDER), \n                width = 0.2, color = \"darkred\") +\n  geom_text(data = means, aes(label = round(Science, 1), y = Science, x = GENDER), \n            vjust = -1.5, color = \"darkred\", size = 3) +\n  \n  # Titles and subtitles\n  labs(title = \"Science Scores by Gender\",\n       subtitle = \"Male scores better in Science as compared to their Female counterparts\",\n       x = \"Gender\",\n       y = \"Science Scores\",\n       color = \"Gender\")\n\n\n\n\n\n\n\n\n\n\n4.2.2 Insights & Observations\n\nThe aim of these visualisations was to show Gender performance across all individual subjects.\nMales Mean scores are higher hence we can deduce that Males fair better in Math and Science subjects.\nFemale fair better in Reading as compared to their Male counterparts."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex01/Take-Home_Exercise01.html#exploring-performance-score-by-se-index",
    "href": "Take-home_Exercises/Take-Home_Ex01/Take-Home_Exercise01.html#exploring-performance-score-by-se-index",
    "title": "Creating Data Visualisation Beyond Default",
    "section": "4.3 Exploring Performance Score by SE Index",
    "text": "4.3 Exploring Performance Score by SE Index\n\n4.3.1 SE Distribution by Scores\nSE Distribution Let’s first take a look into the socioeconomic (SE) distribution to gain some insights.\n\n\nCode\nstu_qqq_SG_selectedV &lt;- na.omit(stu_qqq_SG_selectedV)\nggplot(data = stu_qqq_SG_selectedV, aes(x = ESCS)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0, point_colour = NA) +\n  geom_boxplot(width = 0.20,\n               outlier.shape = NA) +\n  labs(y = NULL,\n       title = \"SE Distribution\", subtitle = \"Left-Skewed SE Distribution\")  +\n  theme_tidybayes()\n\n\n\n\n\nESCS Index by Subject Performance\n\n\nCode\ncor1 &lt;- round(cor(stu_qqq_SG_selectedV$Maths, stu_qqq_SG_selectedV$ESCS),2)\ncor2 &lt;- round(cor(stu_qqq_SG_selectedV$Science, stu_qqq_SG_selectedV$ESCS),2)\ncor3 &lt;- round(cor(stu_qqq_SG_selectedV$Reading, stu_qqq_SG_selectedV$ESCS),2)\n\nse1 &lt;- ggplot(data = stu_qqq_SG_selectedV,\n             aes(y = Maths, x = ESCS)) +\n        geom_point(size = 0.1)+\n        geom_smooth(method = lm) + \n        annotate(\"text\", x = 2.5, y = 100, label=paste0(\"r = \", cor1), color = 'lightblue') +\n        theme_tidybayes()\n\nse2 &lt;- ggplot(data = stu_qqq_SG_selectedV,\n             aes(y = Science, x = ESCS)) +\n        geom_point(size = 0.1)+\n        geom_smooth(method = lm) +\n        annotate(\"text\", x = 2.5, y = 100, label=paste0(\"r = \", cor2), color = 'lightgreen') + \n        theme_tidybayes()\n\nse3 &lt;- ggplot(data = stu_qqq_SG_selectedV,\n             aes(y = Reading, x = ESCS)) +\n        geom_point(size = 0.1)+\n        geom_smooth(method = lm) + \n        annotate(\"text\", x = 2.5, y = 100, label=paste0(\"r = \", cor3), color = 'lightpink') +\n        theme_tidybayes()\n\nse1/se2/se3\n\n\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n4.3.2 Insights & Observations\n\nLeft Skewed Distribution from the SE Index can be deduced that students with normal to high ESCS Index are more prevalent as compared to the lower ESCS index. To bring the conversation further, we can study into the distribution of native, 1st Gen and 2nd Gen by the ESCS index in the future.\nDepicts a positive moderate correlation between Scores and ESCS index, hence we can infer that students with higher ESCS Index scores better in their subjects."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html",
    "href": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html",
    "title": "Viz- Makeover Exercise",
    "section": "",
    "text": "This document serves as a submission for Take-home Exercise 2 as required by the course ISSS608 Visual Analytics and Applications.\nIn this exercise, we aim to apply the different data visualization design practices and principles and improve on the Take-home Exercise 1 output of a fellow classmate. Context for Exercise 1 as shown below.\nTask Context OECD education director Andreas Schleicher shared in a BBC article that “Singapore managed to achieve excellence without wide differences between children from wealthy and disadvantaged families.” (2016) Furthermore, several Singapore’s Minister for Education also started an “every school a good school” slogan. The general public, however, strongly believes that there are still disparities that exist, especially between the elite schools and neighborhood school, between students from families with higher socioeconomic status and those with relatively lower socioeconomic status and immigration and non-immigration families**.\nTask 1 Objectives The exercise task take-home exercise 1 are: to use appropriate Exploratory Data Analysis (EDA) methods and ggplot2 functions to reveal (1) Singapore students’ performance in mathematics, reading, and science and (2) relationship between these performances with schools, gender and socioeconomic status (SES) of the students."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#installation-of-packages-following-the-code-chunk-below",
    "href": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#installation-of-packages-following-the-code-chunk-below",
    "title": "Viz- Makeover Exercise",
    "section": "2.1 Installation of packages following the code chunk below:",
    "text": "2.1 Installation of packages following the code chunk below:\n\n\nCode\npacman::p_load(tidyverse, haven, dplyr, plyr, ggrepel, ggthemes, knitr, kableExtra, intsvy, hrbrthemes, ggridges, ggdist, patchwork, colorspace, reshape2, scales, ggplot2, ggpol, gridExtra)"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#importing-the-data",
    "href": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#importing-the-data",
    "title": "Viz- Makeover Exercise",
    "section": "2.2 Importing the data",
    "text": "2.2 Importing the data\nImporting data set and filtering data from Singapore Students only.\n\n\nCode\nstu_qqq &lt;- read_sas(\"data/cy08msp_stu_qqq.sas7bdat\")\nstu_qqq_SG &lt;- stu_qqq %&gt;% filter(CNT ==\"SGP\")\nwrite_rds(stu_qqq_SG,\"data/stu_qqq_SG.rds\")\nstu_qqq_SG &lt;- read_rds(\"data/stu_qqq_SG.rds\")\nhead(stu_qqq_SG, 5)\n\n\n# A tibble: 5 × 1,279\n  CNT   CNTRYID CNTSCHID CNTSTUID CYC   NatCen STRATUM SUBNATIO REGION  OECD\n  &lt;chr&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;   &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;\n1 SGP       702 70200052 70200001 08MS  070200 SGP01   7020000   70200     0\n2 SGP       702 70200134 70200002 08MS  070200 SGP01   7020000   70200     0\n3 SGP       702 70200112 70200003 08MS  070200 SGP01   7020000   70200     0\n4 SGP       702 70200004 70200004 08MS  070200 SGP01   7020000   70200     0\n5 SGP       702 70200152 70200005 08MS  070200 SGP01   7020000   70200     0\n# ℹ 1,269 more variables: ADMINMODE &lt;dbl&gt;, LANGTEST_QQQ &lt;dbl&gt;,\n#   LANGTEST_COG &lt;dbl&gt;, LANGTEST_PAQ &lt;dbl&gt;, Option_CT &lt;dbl&gt;, Option_FL &lt;dbl&gt;,\n#   Option_ICTQ &lt;dbl&gt;, Option_WBQ &lt;dbl&gt;, Option_PQ &lt;dbl&gt;, Option_TQ &lt;dbl&gt;,\n#   Option_UH &lt;dbl&gt;, BOOKID &lt;dbl&gt;, ST001D01T &lt;dbl&gt;, ST003D02T &lt;dbl&gt;,\n#   ST003D03T &lt;dbl&gt;, ST004D01T &lt;dbl&gt;, ST250Q01JA &lt;dbl&gt;, ST250Q02JA &lt;dbl&gt;,\n#   ST250Q03JA &lt;dbl&gt;, ST250Q04JA &lt;dbl&gt;, ST250Q05JA &lt;dbl&gt;, ST250D06JA &lt;chr&gt;,\n#   ST250D07JA &lt;chr&gt;, ST251Q01JA &lt;dbl&gt;, ST251Q02JA &lt;dbl&gt;, ST251Q03JA &lt;dbl&gt;, …"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#data-wrangling",
    "href": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#data-wrangling",
    "title": "Viz- Makeover Exercise",
    "section": "2.3 Data Wrangling",
    "text": "2.3 Data Wrangling\n\n\nCode\nstu_qqq_SG_selectedV &lt;- stu_qqq_SG %&gt;% select(CNTSTUID, STRATUM, ST004D01T, IMMIG, ESCS,PV1READ:PV10READ, PV1SCIE:PV10SCIE, PV1MATH:PV10MATH)\nstu_qqq_SG_selectedV&lt;- stu_qqq_SG_selectedV %&gt;% mutate(CNTSTUID = as.character(CNTSTUID))\n\nnames(stu_qqq_SG_selectedV)[names(stu_qqq_SG_selectedV) == 'CNTSTUID'] &lt;- 'STUDENT ID'\n\nnames(stu_qqq_SG_selectedV)[names(stu_qqq_SG_selectedV) == 'ST004D01T'] &lt;- 'GENDER'\n\nstu_qqq_SG_selectedV &lt;- stu_qqq_SG_selectedV %&gt;%\n  mutate(GENDER = recode(as.character(GENDER), '1' = 'FEMALE', '2' = 'MALE'))\n\nstu_qqq_SG_selectedV &lt;- stu_qqq_SG_selectedV %&gt;%\n  mutate(STRATUM = recode(STRATUM, 'SGP01' = 'MAINSTREAM SCH', 'SGP03' = 'PRIVATE SCH'))\n\nstu_qqq_SG_selectedV&lt;- stu_qqq_SG_selectedV %&gt;%\n  mutate(IMMIG = recode(IMMIG, '1' = 'NATIVE', '2' = '2ND GEN', '3' = '1ST GEN'))"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#initial-visualisation-outlook",
    "href": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#initial-visualisation-outlook",
    "title": "Viz- Makeover Exercise",
    "section": "3.1 Initial Visualisation Outlook",
    "text": "3.1 Initial Visualisation Outlook\nThe first example we look at a visualisation example of Average PV values across frequency below:\n\nIntended Viz’s Proposition\nIn this visualisation, the author created a Histogram with a Box plot to show the Average PVs versus Frequency across 3 subjects. It was a good attempt to show the readers the distribution skews, the statistical mean (with the red dot) and, possibly the outliers’ stretch to determine min|max range within each subjects."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#potential-enhancements",
    "href": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#potential-enhancements",
    "title": "Viz- Makeover Exercise",
    "section": "3.2 Potential Enhancements",
    "text": "3.2 Potential Enhancements\nTo achieve the balance between aesthetics and clarity a few enhancements can be made:\n\nTo view the skewness of the distribution with accuracy, we must maintain the aspect ratio of the plots produced. This implies that patchwork function is not recommended as it will compress the aspect ratio making the scale of the axes inaccurate.\nThe X Axis should be represented accurate as the Average of PVs in each subject. while the Y Axis should be the score\nWe can also explore to include the Statistical Summary of Mean and Median values and the lines corresponding to it and input a legend on the top right for quick reference.\nBin width was selected at 20. This allows the balance of appeal (avoiding too many vertical lines) while still balancing the clarity of the shape of the distribution shown.\nThe Grid panels, major and minor lines were designed to be subtle-ly more apparent so that it can provide quick reference to x/y axis for the various bins\nBoth axes to start from ‘0’ to give an accurate representation of each bin.\nThe fill colour of the Histogram bins were made with high transparent fill effect, this is to allow easier reference of all the major and minor grid lines for x and y axes.\n\n\nMATHREADINGSCIENCE\n\n\n\n\nCode\nstu_qqq_SG_selectedV &lt;- stu_qqq_SG_selectedV %&gt;%\n  mutate(Maths = rowSums(stu_qqq_SG_selectedV[paste0('PV', c(1:10), \"MATH\")], \n                   na.rm = TRUE)/10) %&gt;% \n  mutate(Reading = \n           rowSums(stu_qqq_SG[paste0('PV', c(1:10), \"READ\")], \n                   na.rm = TRUE)/10) %&gt;% \n  mutate(Science = \n           rowSums(stu_qqq_SG[paste0('PV', c(1:10), \"SCIE\")], \n                   na.rm = TRUE)/10)\n\n# Maths Histogram and Boxplot with Mean and Median\nmaths_plot &lt;- ggplot(stu_qqq_SG_selectedV, aes(x = Maths)) +\n  geom_histogram(color = \"#459395\", binwidth = 20, fill = \"#459395\", alpha = 0.4) + coord_cartesian(xlim = c(0,1000), ylim = c(-80,600)) +\n  geom_boxplot(width = 40, position = position_nudge(y = -60), outlier.shape = 20, outlier.size = 4, outlier.color = \"darkblue\", fill = \"#459395\", color = \"#000000\", alpha = 0.1) +\n  geom_vline(aes(xintercept = mean(Maths, na.rm = TRUE)), linetype = \"dashed\", color = \"red\", size = 0.8, alpha = 0.5) +\n  annotate(\"text\", x = mean(stu_qqq_SG_selectedV$Maths, na.rm = TRUE) + 20, y = -20, label = paste(round(mean(stu_qqq_SG_selectedV$Maths, na.rm = TRUE), 2)), color = \"red\", size = 4, angle = 0, hjust = 1.35) +\n  geom_vline(aes(xintercept = median(Maths, na.rm = TRUE)), linetype = \"solid\", color = \"blue\", size = 0.8, alpha = 0.5) +\n  annotate(\"text\", x = median(stu_qqq_SG_selectedV$Maths, na.rm = TRUE) + 20, y = -20, label = paste(round(median(stu_qqq_SG_selectedV$Maths, na.rm = TRUE), 2)), color = \"blue\", size = 4, angle = 0, hjust = 0.15) +\n  labs(title = \"Distribution of Maths Scores (PV)\", x = \"Maths Scores\", y = \"Density\") +\n  theme_minimal()\n\nmaths_plot &lt;- maths_plot +\n  theme(panel.background = element_rect(fill = \"grey95\", color = NA),\n        panel.grid.major = element_line(color = \"grey80\", size = 0.5),\n        panel.grid.minor = element_line(color = \"grey90\", size = 0.25)) +\n  annotate(\"text\", x = 900, y = 580, label = \"Mean Value\", color = \"red\", size = 3.5, alpha = 0.8) +\n  annotate(\"text\", x = 900, y = 550, label = \"Median Value\", color = \"blue\", size = 3.5, alpha = 0.8)\n\nprint(maths_plot)\n\n\n\n\n\n\n\n\n\nCode\nreading_plot &lt;- ggplot(stu_qqq_SG_selectedV, aes(x = Reading)) +\n  geom_histogram(color = \"#EB7C69\", binwidth = 20, fill = \"#EB7C69\", alpha = 0.4) + coord_cartesian(xlim = c(0,1000), ylim = c(-80,600)) +\n  geom_boxplot(width = 40, position = position_nudge(y = -60), outlier.shape = 20, outlier.size = 4, outlier.color = \"red\", fill = \"#EB7C69\", color = \"#000000\", alpha = 0.1) +\n  geom_vline(aes(xintercept = mean(Reading, na.rm = TRUE)), linetype = \"dashed\", color = \"red\", size = 0.8, alpha = 0.5) +\n  annotate(\"text\", x = mean(stu_qqq_SG_selectedV$Reading, na.rm = TRUE) + 20, y = -20, label = paste(round(mean(stu_qqq_SG_selectedV$Reading, na.rm = TRUE), 2)), color = \"red\", size = 4, angle = 0, hjust = 1.35) +\n  geom_vline(aes(xintercept = median(Reading, na.rm = TRUE)), linetype = \"solid\", color = \"blue\", size = 0.8, alpha = 0.5) +\n  annotate(\"text\", x = median(stu_qqq_SG_selectedV$Reading, na.rm = TRUE) + 20, y = -20, label = paste(round(median(stu_qqq_SG_selectedV$Reading, na.rm = TRUE), 2)), color = \"blue\", size = 4, angle = 0, hjust = 0.15) +\n  labs(title = \"Distribution of Reading Scores (PV)\", x = \"Reading Scores\", y = \"Density\") +\n  theme_minimal()\n\nreading_plot &lt;- reading_plot +\n  theme(panel.background = element_rect(fill = \"grey95\", color = NA),\n        panel.grid.major = element_line(color = \"grey80\", size = 0.5),\n        panel.grid.minor = element_line(color = \"grey90\", size = 0.25)) +\n  annotate(\"text\", x = 900, y = 580, label = \"Mean Value\", color = \"red\", size = 3.5, alpha = 0.8) +\n  annotate(\"text\", x = 900, y = 550, label = \"Median Value\", color = \"blue\", size = 3.5, alpha = 0.8)\n\nprint(reading_plot)\n\n\n\n\n\n\n\n\n\nCode\nscience_plot &lt;- ggplot(stu_qqq_SG_selectedV, aes(x = Science)) +\n  geom_histogram(color = \"#FDA638\", binwidth = 20, fill = \"#FDA638\", alpha = 0.4) + coord_cartesian(xlim = c(0,1000), ylim = c(-80,600)) +\n  geom_boxplot(width = 40, position = position_nudge(y = -60), outlier.shape = 20, outlier.size = 4, outlier.color = \"darkorange\", fill = \"#FDA638\", color = \"#000000\", alpha = 0.1) +\n  geom_vline(aes(xintercept = mean(Science, na.rm = TRUE)), linetype = \"dashed\", color = \"red\", size = 0.8, alpha = 0.5) +\n  annotate(\"text\", x = mean(stu_qqq_SG_selectedV$Science, na.rm = TRUE) + 20, y = -20, label = paste(round(mean(stu_qqq_SG_selectedV$Science, na.rm = TRUE), 2)), color = \"red\", size = 4, angle = 0, hjust = 1.35) +\n  geom_vline(aes(xintercept = median(Science, na.rm = TRUE)), linetype = \"solid\", color = \"blue\", size = 0.8, alpha = 0.5) +\n  annotate(\"text\", x = median(stu_qqq_SG_selectedV$Science, na.rm = TRUE) + 20, y = -20, label = paste(round(median(stu_qqq_SG_selectedV$Science, na.rm = TRUE), 2)), color = \"blue\", size = 4, angle = 0, hjust = 0.15) +\n  labs(title = \"Distribution of Science Scores (PV)\", x = \"Science Scores\", y = \"Density\") +\n  theme_minimal()\n\nscience_plot &lt;- science_plot +\n  theme(panel.background = element_rect(fill = \"grey95\", color = NA),\n        panel.grid.major = element_line(color = \"grey80\", size = 0.5),\n        panel.grid.minor = element_line(color = \"grey90\", size = 0.25)) +\n  annotate(\"text\", x = 900, y = 580, label = \"Mean Value\", color = \"red\", size = 3.5, alpha = 0.8) +\n  annotate(\"text\", x = 900, y = 550, label = \"Median Value\", color = \"blue\", size = 3.5, alpha = 0.8)\n\nprint(science_plot)"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#initial-intended-visualisation-outlook",
    "href": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#initial-intended-visualisation-outlook",
    "title": "Viz- Makeover Exercise",
    "section": "4.1 Initial Intended Visualisation Outlook",
    "text": "4.1 Initial Intended Visualisation Outlook\nNext, we look at a visualisation example of Distribution of Student Performances by Gender:\n\nIntended Viz’s Proposition\nIn this visualisation, the author created boxplots to show the Reading PVs across 3 subjects by Gender."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#potential-enhancements-1",
    "href": "Take-home_Exercises/Take-Home_Ex02/Take-Home_Exercise02.html#potential-enhancements-1",
    "title": "Viz- Makeover Exercise",
    "section": "4.2 Potential Enhancements",
    "text": "4.2 Potential Enhancements\nTo achieve the balance between aesthetics and clarity these enhancements can be made:\n\nY axis must be accurately represented across all subjects. This will give a more coherent representation of the means and stats median across the 3 subjects.\nWe can also explore to include the Statistical Summary of Mean and Median values and the lines corresponding to it and input a legend on the top right for quick reference.\nA violin plot can be utilised in the background to give a sense of the distribution and range of the performance within each gender and subject domains.\nThe Grid panels, major and minor lines were designed to be subtle-ly more apparent so that it can provide quick reference to x/y axis for the various bins\nBoth axes to start from ‘0’ to give an accurate representation of each bin.\nThe fill colour of the Histogram bins were made with high transparent fill effect, this is to allow easier reference of all the major and minor grid lines for x and y axes.\n\n\n\nCode\nP7 &lt;- ggplot(data= stu_qqq_SG_selectedV,\n       aes(x= GENDER, y= Maths)) +\n  geom_violin(color = \"#459395\", size = 0.6, fill= \"#459395\", alpha = 0.4) +\n  geom_boxplot(width= 0.4, outlier.colour = \"grey30\", outlier.size = 3, outlier.color = \"darkblue\", \n               outlier.alpha = 0.5, outlier.shape = 19) +\n  stat_summary(geom = \"point\",       \n               fun =\"mean\",         \n               colour =\"red\",        \n               size=3) +  coord_cartesian(ylim = c(0,1000)) +\n  scale_color_manual(values=c(\"#999999\", \"#E69F00\")) +\n  theme_minimal() +\n  labs(title=\"Mathematics\") +  \n  theme(panel.background = element_rect(fill = \"grey95\", color = NA),\n        panel.grid.major = element_line(color = \"grey80\", size = 0.5),\n        panel.grid.minor = element_line(color = \"grey90\", size = 0.25),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        plot.title = element_text(size = 12, hjust = 0.5),\n        axis.text = element_text(size = 10))\nP7 &lt;- P7 +\n  stat_summary(aes(label = round(..y.., 2)), geom = \"text\", fun = mean, \n               vjust = -1.0, color = \"red\", size = 3) +\n  stat_summary(aes(label = round(..y.., 2)), geom = \"text\", fun = median, \n               vjust = 1.8, color = \"blue\", size = 3)\n  \n\nP8 &lt;- ggplot(data= stu_qqq_SG_selectedV,\n       aes(x= GENDER, y= Reading)) +\n  geom_violin(color = \"#EB7C69\", size = 0.6, fill= \"#EB7C69\", alpha = 0.4) +\n  geom_boxplot(width= 0.4, outlier.colour = \"grey30\", outlier.size = 3, outlier.color = \"darkred\", \n               outlier.alpha = 0.5, outlier.shape = 19) +\n  stat_summary(geom = \"point\",       \n               fun =\"mean\",         \n               colour =\"red\",        \n               size=3) +  coord_cartesian(ylim = c(0,1000)) +  \n  theme_minimal() +\n  labs(title=\"Reading\") + \n  theme(panel.background = element_rect(fill = \"grey95\", color = NA),\n        panel.grid.major = element_line(color = \"grey80\", size = 0.5),\n        panel.grid.minor = element_line(color = \"grey90\", size = 0.25),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        plot.title = element_text(size = 12, hjust = 0.5),\n        axis.text = element_text(size = 10))\n  \nP8 &lt;- P8 +\n  stat_summary(aes(label = round(..y.., 2)), geom = \"text\", fun = mean, \n               vjust = -1.0, color = \"red\", size = 3) +\n  stat_summary(aes(label = round(..y.., 2)), geom = \"text\", fun = median, \n               vjust = 1.8, color = \"blue\", size = 3)\n  \nP9 &lt;- ggplot(data= stu_qqq_SG_selectedV,\n       aes(x= GENDER, y= Science)) +\n  geom_violin(color = \"#FDA638\", size = 0.6, fill= \"#FDA638\", alpha = 0.4) +\n  geom_boxplot(width= 0.4, outlier.colour = \"grey30\", outlier.size = 3, outlier.color = \"red\", \n               outlier.alpha = 0.5, outlier.shape = 19) +\n  stat_summary(geom = \"point\",       \n               fun =\"mean\",         \n               colour =\"red\",        \n               size=3) +  coord_cartesian(ylim = c(0,1000)) +  \n  theme_minimal() +\n  labs(title=\"Science\") + \n  theme(panel.background = element_rect(fill = \"grey95\", color = NA),\n        panel.grid.major = element_line(color = \"grey80\", size = 0.5),\n        panel.grid.minor = element_line(color = \"grey90\", size = 0.25),\n        axis.title.x = element_blank(),\n        axis.title.y = element_blank(),\n        plot.title = element_text(size = 12, hjust = 0.5),\n        axis.text = element_text(size = 10))\n\nP9 &lt;- P9 +\n  stat_summary(aes(label = round(..y.., 2)), geom = \"text\", fun = mean, \n               vjust = -1.0, color = \"red\", size = 3) +\n  stat_summary(aes(label = round(..y.., 2)), geom = \"text\", fun = median, \n               vjust = 1.8, color = \"blue\", size = 3) +\n  annotate(\"text\", x = 2.0, y = 1000, label = \"Mean Value\", color = \"red\", size = 3.5, alpha = 0.8) +\n  annotate(\"text\", x =2.0, y = 960, label = \"Median Value\", color = \"blue\", size = 3.5, alpha = 0.8)\n\n(P7 + P8 + P9) +\n    plot_annotation(title= \"Distribution of Performance (PV) by Gender\", subtitle = \"Higher mean scores in Math & Science, for Male Gender\", theme = theme(plot.title=element_text(size= 15, hjust= 0.5)))"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex03/Take-home_Exercise03.html",
    "href": "Take-home_Exercises/Take-Home_Ex03/Take-home_Exercise03.html",
    "title": "Be Weatherwise or Otherwise",
    "section": "",
    "text": "Past climate trends over Singapore have shown an increase in surface air temperatures and the frequency of heavy rainfall over the past few decades. However, the climate system is complex and the past trends and the magnitude of the change will not necessarily continue into the future. Climate projections using tools like climate modelling is thus necessary to project the future climate for planning and adapting to climate change."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex03/Take-home_Exercise03.html#developing-a-static-eda-on-daily-rainfall-by-day-and-year",
    "href": "Take-home_Exercises/Take-Home_Ex03/Take-home_Exercise03.html#developing-a-static-eda-on-daily-rainfall-by-day-and-year",
    "title": "Be Weatherwise or Otherwise",
    "section": "3.5.1 Developing a Static EDA on Daily Rainfall by Day and Year",
    "text": "3.5.1 Developing a Static EDA on Daily Rainfall by Day and Year\ngeom_point() function under the ggplot package was used to plot the total rainfall (mm) on a given day by year. In this static EDA, we can observe that:\n1) majority of the days by year, total rainfall (mm) was observed to be below 50mm while,\n2) in the years 1983 and 2013, where the total rainfall on day 25 and day 3 were above 100mm. We can infer that these were anomalies with significantly heavy rainfall as compared to the volumes of other rainy days by year.\n\n\n\n\n\n\nNote\n\n\n\nThe Static EDA has its shortcomings in terms of enhancing data appreciation. Next, we will move onto interactivity to enhance our data visualisation.\n\n\n\n\nCode\nlibrary(ggplot2)\n\nggplot(data = rainfall_table, aes(x = Day, y = `Daily Rainfall Total (mm)`, color = factor(Year))) +\n  geom_point() +  # Add points for the daily rainfall totals\n  theme_minimal() +  # Use a minimal theme\n  labs(title = \"Daily Rainfall Total (mm) by Day and Year\",\n       x = \"Day\",\n       y = \"Daily Rainfall Total (mm)\",\n       color = \"Year\") +  # Label the axes and the legend\n  scale_color_brewer(palette = \"Set1\")  # Use a color palette that's easily distinguishable"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex03/Take-home_Exercise03.html#developing-interacitvity-using-plotly",
    "href": "Take-home_Exercises/Take-Home_Ex03/Take-home_Exercise03.html#developing-interacitvity-using-plotly",
    "title": "Be Weatherwise or Otherwise",
    "section": "3.5.2 Developing Interacitvity using plotly",
    "text": "3.5.2 Developing Interacitvity using plotly\nLeveraging on plotly the interactive scatter allows the reader to (1) hover for details (Day and Rainfall volume of the day) , (2) select (via cursor, legend or lasso) and (3) compare data on hover. For Sn (3), the function allows the reader to have a quick glance to make a quick analysis on the Daily Rainfall trends across the years. For instance, we can observe that:\n\n\nDay 1 and Day 2 records rainfalls on all 5 selected years, therefore we can infer that the probability of raining during the 1st two days of December will be higher (of course a larger data sample size will enhance the accuracy of this inference).\nDay 5, 7, 29 and 30 records the lowest rainfall over the 5 selected years, this can only be seen through the compare data on hover function."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex03/Take-home_Exercise03.html#extending-plotly-further-to-capture-statistical-components",
    "href": "Take-home_Exercises/Take-Home_Ex03/Take-home_Exercise03.html#extending-plotly-further-to-capture-statistical-components",
    "title": "Be Weatherwise or Otherwise",
    "section": "3.5.3 Extending plotly further to capture Statistical Components",
    "text": "3.5.3 Extending plotly further to capture Statistical Components\nThe code chunk below, calculates the statistical summary of the scatter points which includes; (1) Total Rainfall by day, (2) Mean Rainfall by day and (3) Median Rainfall by day across all years.\n\n\nCode\nlibrary(dplyr)\n\n# Calculate summary statistics for each year\nsummary_stats_by_day &lt;- rainfall_table %&gt;%\n  group_by(Day) %&gt;%\n  summarise(\n    Total_Rainfall = sum(`Daily Rainfall Total (mm)`, na.rm = TRUE),\n    Mean_Rainfall = mean(`Daily Rainfall Total (mm)`, na.rm = TRUE),\n    Median_Rainfall = median(`Daily Rainfall Total (mm)`, na.rm = TRUE),\n  ) %&gt;%\n  ungroup()\n\n\n\n\nCode\nrainfall_table_with_stats &lt;- rainfall_table %&gt;%\n  left_join(summary_stats_by_day, by = \"Day\")\n\nlibrary(plotly)\n\nplot_ly(data = rainfall_table_with_stats, \n        x = ~Day, \n        y = ~`Daily Rainfall Total (mm)`,\n        color = ~factor(Year),\n        type = 'scatter',\n        mode = 'markers',\n        hoverinfo = 'text',\n        text = ~paste('Day:', Day,\n                      ', Year:', Year,\n                      '&lt;br&gt;Total Yearly Rainfall (mm):', Total_Rainfall,\n                      '&lt;br&gt;Mean Yearly Rainfall (mm):', Mean_Rainfall,\n                      '&lt;br&gt;Median Yearly Rainfall (mm):', Median_Rainfall)) %&gt;%\n  layout(title = 'Daily Rainfall Total (mm) with Sum_Stats by Day ',\n         xaxis = list(title = 'Day'),\n         yaxis = list(title = 'Rainfall (mm)'))\n\n\n\n\n\n\nHere with the stat summary, we can observe that individual points is supported by its stats summary of total, mean and median rainfall (mm) by day across the years."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex03/Take-home_Exercise03.html#merging-temperature-records",
    "href": "Take-home_Exercises/Take-Home_Ex03/Take-home_Exercise03.html#merging-temperature-records",
    "title": "Be Weatherwise or Otherwise",
    "section": "3.6.1 Merging Temperature Records",
    "text": "3.6.1 Merging Temperature Records\n\n\nCode\ntemp_columns &lt;- c(\"Station\",\"Day\",\"Year\",\"Mean Temperature (°C)\", \"Maximum Temperature (°C)\", \"Minimum Temperature (°C)\")\n\ntemp_table &lt;- bind_rows(\n  select(data_1983, all_of(temp_columns))%&gt;% mutate(Year = as.character(Year)),\n  select(data_1993, all_of(temp_columns))%&gt;% mutate(Year = as.character(Year)),\n  select(data_2003, all_of(temp_columns))%&gt;% mutate(Year = as.character(Year)),\n  select(data_2013, all_of(temp_columns))%&gt;% mutate(Year = as.character(Year)),\n  select(data_2023, all_of(temp_columns))%&gt;% mutate(Year = as.character(Year)),\n)\n\n\nUtilising three key features of stat_halfeye(), geom_boxplot and geom_dotplot to study onto to the given data. The code chunk below shows the static plots:\n\n\nCode\nggplot(temp_table, aes(x = Year, y = `Mean Temperature (°C)`, fill = Year)) +\n  stat_halfeye(\n    adjust = 0.4, \n    position = position_nudge(x = 0.13), \n    color = NA, \n    alpha = 0.4\n  ) +\n  geom_boxplot(\n    width = 0.2, \n    outlier.shape = NA, \n    position = position_dodge(width = 0.5), \n    alpha = 0.6, \n    color = \"gray40\", \n    fill = \"grey93\"\n  ) +\n  geom_dotplot(\n    binaxis = \"y\", \n    stackdir = \"down\",\n    position = position_nudge(x = -0.13),\n    binwidth = 0.25, \n    dotsize = 0.25\n  ) +\n  scale_y_continuous(limits = c(23.5, 28.5)) +\n  scale_fill_brewer(palette = \"Pastel1\") +\n  theme_minimal(base_size = 8) +\n  theme(\n    legend.position = \"right\",\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.title = element_blank(),\n    plot.title = element_text(hjust = 0.5, size = 16),\n    plot.subtitle = element_text(hjust = 0.5, size = 12)\n  ) +\n  labs(\n    y = \"Mean Temperature (°C)\", \n    x = \"Year\", \n    title = \"Mean Temperature by Year\",\n    subtitle = \"Rising Mean Temperature over the decade\"\n  ) +\n  guides(fill = guide_legend(title.position = \"top\", title.hjust = 0.5))\n\n\n\n\n\n\nBased on the static EDA, we can see that the overall mean temperature for the selected year have increased across four decades. Through the `stat_halfeye’ it can be seen that (1) the range of fluctuating mean temps over the years has condensed significantly, (2) peaks (Frequencies of Higher Mean Temp) are compressed to be lesser but sharper in scale (i.e: 2023 has 1 main peak as compared to 1983 - 2003, with a higher peak) and (3) the number of dotplots (with binwidth=2.5) denotes the co-occurrence of a binned temperature of similar range over the given days."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex03/Take-home_Exercise03.html#adding-interactivity-to-the-temp-scale",
    "href": "Take-home_Exercises/Take-Home_Ex03/Take-home_Exercise03.html#adding-interactivity-to-the-temp-scale",
    "title": "Be Weatherwise or Otherwise",
    "section": "3.6.2 Adding Interactivity to the Temp Scale",
    "text": "3.6.2 Adding Interactivity to the Temp Scale\nThrough the interactivity, the tooltip, provides precise interactivity to give the viewer more information on the points/dots denoted above. The codes below calculates other statistical components to be added back onto the temp_table.\n\n\nCode\n#| warning = FALSE\nlibrary(ggplot2)\nlibrary(ggiraph)\nlibrary(RColorBrewer)\nlibrary(dplyr)\n\nsummary_stats &lt;- temp_table %&gt;%\n  group_by(Year) %&gt;%\n  summarise(\n    OverallMean = mean(`Mean Temperature (°C)`, na.rm = TRUE),\n    OverallMin = min(`Mean Temperature (°C)`, na.rm = TRUE),\n    OverallMax = max(`Mean Temperature (°C)`, na.rm = TRUE),\n    Range = OverallMax - OverallMin  # Calculate the range\n  ) %&gt;%\n  ungroup()\n\ntemp_table_2 &lt;- temp_table %&gt;%\n  left_join(summary_stats, by = \"Year\")\n\nhead(temp_table_2)\n\n\n# A tibble: 6 × 10\n  Station   Day Year  `Mean Temperature (°C)` `Maximum Temperature (°C)`\n  &lt;chr&gt;   &lt;dbl&gt; &lt;chr&gt;                   &lt;dbl&gt;                      &lt;dbl&gt;\n1 Changi      1 1983                     26.4                       31  \n2 Changi      2 1983                     24.3                       27.2\n3 Changi      3 1983                     25.1                       30.2\n4 Changi      4 1983                     25.2                       30.3\n5 Changi      5 1983                     26                         29.8\n6 Changi      6 1983                     25                         27.7\n# ℹ 5 more variables: `Minimum Temperature (°C)` &lt;dbl&gt;, OverallMean &lt;dbl&gt;,\n#   OverallMin &lt;dbl&gt;, OverallMax &lt;dbl&gt;, Range &lt;dbl&gt;\n\n\n\n\nCode\np &lt;- ggplot(temp_table_2, aes(x = Year, y = `Mean Temperature (°C)`, fill = Year)) +\n  stat_halfeye(\n    adjust = 0.4, \n    position = position_nudge(x = 0.2), \n    color = NA, \n    alpha = 0.4\n  ) +\n  geom_boxplot (\n    width = 0.2, \n    outlier.shape = NA, \n    position = position_dodge(width = 0.5), \n    alpha = 0.6, \n    color = \"gray40\", \n    fill = \"white\"\n  ) +\n  geom_point_interactive( \n    aes(\n      tooltip = paste('Day', `Day`, '&lt;br&gt;Mean Temp (°C):', `Mean Temperature (°C)`), \n      data_id = Year\n    ),\n    position = position_nudge(x = -0.2),\n    bindwidth = 2.5,\n    size = 1.3,  # Adjust the size as per your preference\n    alpha = 0.35\n  ) +\n  scale_y_continuous(limits = c(23.5, 28.5)) +\n  scale_fill_brewer(palette = \"Pastel1\") +\n  theme_minimal(base_size = 8) +\n  theme(\n    legend.position = \"right\",\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.title = element_blank(),\n    plot.title = element_text(hjust = 0.5, size = 16),\n    plot.subtitle = element_text(hjust = 0.5, size = 12)\n  ) +\n  labs(\n    y = \"Mean Temperature (°C)\", \n    x = \"Year\", \n    title = \"Mean Temperature by Year\",\n    subtitle = \"Rising Mean Temperature over the decade\"\n  ) +\n  guides(fill = guide_legend(title.position = \"top\", title.hjust = 0.5))\n\ng &lt;- girafe(                                  \n ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n   opts_hover(css = \"fill: #963000;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n ) \ng\n\n\n\n\n\n\n\n\nThrough the interactivity on the geom_boxplot, it can be observed that the Overall Mean and Max temperature has increased over the years with the year 2023 having the highest temperature.\nIt can also be observed that the range is much more condensed in the Year 2023, with that we can infer that as the Max Temp rises the Minimum temperature over the years have risen as well.\nThrough the intensity of the dotplot and the lumpiness of the halfeye, it can be seen that most 2023 has a ‘single’ condensed region unlike other years where there are mulitple peaks."
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html",
    "href": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html",
    "title": "Big Mac Index Choropleth and Time Series",
    "section": "",
    "text": "pacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               ggdist, ggridges,\n               colorspace, gridExtra,\n               tidyverse, tmap, sf, tmaptools, dplyr, tibble, dplyr) \n\nImporting data\n\nbig_mac &lt;- read_csv(\"data/countries_with_complete_data.csv\")"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#calling-out-forecast-packages",
    "href": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#calling-out-forecast-packages",
    "title": "Big Mac Index Choropleth and Time Series",
    "section": "3.1 Calling out Forecast Packages",
    "text": "3.1 Calling out Forecast Packages\n\nlibrary(forecast)\nlibrary(tibble)\nlibrary(dplyr)"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#filter-data-to-time-series-object",
    "href": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#filter-data-to-time-series-object",
    "title": "Big Mac Index Choropleth and Time Series",
    "section": "3.2 Filter Data to Time Series Object",
    "text": "3.2 Filter Data to Time Series Object\n\nuk_data &lt;- big_mac %&gt;%\n  filter(country == \"United Kingdom\", year &gt;= 2002, year &lt;= 2022) %&gt;%\n  arrange(year) %&gt;%\n  select(year, bmi_usd_price)\n\n# Convert to ts object\nuk_ts &lt;- ts(uk_data$bmi_usd_price, start = 2002, end = 2021, frequency = 2)"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#model-fitting-using-auto.arima",
    "href": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#model-fitting-using-auto.arima",
    "title": "Big Mac Index Choropleth and Time Series",
    "section": "3.3 Model Fitting using auto.arima",
    "text": "3.3 Model Fitting using auto.arima\nUse the auto.arima function to automatically select the best ARIMA model based on AIC or BIC.\n\nLower AIC or BIC values indicate a better-fitting model.\nAIC focuses on the goodness of fit but can suffer from overfitting.\nBIC adds a penalty term for the number of parameters in the model, which can result in choosing simpler models than AIC.\n\n\nlibrary(forecast)\n\n# The auto.arima function will search through different ARIMA models \nfit &lt;- auto.arima(uk_ts)\n\n# the summary of the fitted model which includes the AIC and BIC values\nsummary(fit)\n\nSeries: uk_ts \nARIMA(1,0,0) with non-zero mean \n\nCoefficients:\n         ar1    mean\n      0.5282  3.8809\ns.e.  0.1448  0.1399\n\nsigma^2 = 0.189:  log likelihood = -21.98\nAIC=49.97   AICc=50.65   BIC=54.96\n\nTraining set error measures:\n                     ME      RMSE       MAE       MPE     MAPE      MASE\nTraining set 0.01733105 0.4233925 0.3306332 -0.807335 8.747498 0.7345117\n                    ACF1\nTraining set -0.03813155\n\n# compare AIC and BIC manually if needed\naic_value &lt;- fit$aic\nbic_value &lt;- fit$bic\n\n# Print the AIC and BIC values\ncat(\"AIC:\", aic_value, \"\\n\")\n\nAIC: 49.96672 \n\ncat(\"BIC:\", bic_value, \"\\n\")\n\nBIC: 54.9574 \n\nfit_bic &lt;- auto.arima(uk_ts, ic = \"bic\")\n\n# Print summary of the model selected based on BIC\nsummary(fit_bic)\n\nSeries: uk_ts \nARIMA(1,0,0) with non-zero mean \n\nCoefficients:\n         ar1    mean\n      0.5282  3.8809\ns.e.  0.1448  0.1399\n\nsigma^2 = 0.189:  log likelihood = -21.98\nAIC=49.97   AICc=50.65   BIC=54.96\n\nTraining set error measures:\n                     ME      RMSE       MAE       MPE     MAPE      MASE\nTraining set 0.01733105 0.4233925 0.3306332 -0.807335 8.747498 0.7345117\n                    ACF1\nTraining set -0.03813155\n\n\nACF and PACF plots identify whether an AR, MA, or ARMA model will be more appropriate:\nAR (Autoregressive) model: The Partial Autocorrelation Function (PACF) plot would show a significant spike at the lag corresponding to the order of the AR term (p), and then it would cut off, meaning other spikes should not be significant. The Autocorrelation Function (ACF) plot would show a more gradual decline.\nMA (Moving Average) model: The Autocorrelation Function (ACF) plot would show a significant spike at the lag corresponding to the order of the MA term (q), and then it would cut off. The Partial Autocorrelation Function (PACF) would show a more gradual decline.\nARMA (Autoregressive Moving Average) model: Both ACF and PACF plots show a more complex pattern, with neither cutting off abruptly, indicating a mixture of AR and MA behaviours.\nTo determine the specific AR or MA orders, it would typically look for the number of lags before the plot crosses the significance boundary (the blue dashed lines). Spikes that go beyond this boundary are considered significant.\nWhen you’re looking at your ACF and PACF plots, consider the following:\nIf there are a few significant spikes in the PACF followed by non-significant ones, and the ACF tails off, consider an AR model with the order determined by the number of significant spikes. If there are a few significant spikes in the ACF followed by non-significant ones, and the PACF tails off, consider an MA model with the order determined by the number of significant spikes. If both the ACF and PACF show a complex pattern without a clear cutoff, an ARMA model might be needed, where it would need to experiment with different orders to find the best fit.\n\n# Load the necessary library\nlibrary(forecast)\n\n# Assuming uk_ts is your time series object\n# Plot the ACF\nacf(uk_ts)\n\n\n\n# Plot the PACF\npacf(uk_ts)"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#forecasting-and-plotting",
    "href": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#forecasting-and-plotting",
    "title": "Big Mac Index Choropleth and Time Series",
    "section": "3.4 Forecasting and plotting",
    "text": "3.4 Forecasting and plotting\nForecasting the bmi_usd_price up to 2030\n\n# Load the necessary libraries\nlibrary(forecast)\n\n# Read in your time series data\nuk_ts &lt;- ts(uk_data$bmi_usd_price, start = 2002, end = 2021, frequency = 1)\n\n# Fit an ARIMA model using auto.arima\nauto_fit &lt;- auto.arima(uk_ts)\n\n# Forecast from 2021 to 2030\nforecast_length &lt;- 2030 - max(time(uk_ts))\nforecast_result &lt;- forecast(auto_fit, h=forecast_length)\n\n# Plot the forecast with actual data\nplot(forecast_result)\nlines(uk_ts, type=\"o\", col='blue')\n\n\n\n\nIn the context of ARIMA models, the order argument specifies the order of the model as a triplet of parameters (p, d, q):\n\np: The number of autoregressive (AR) terms. It represents the number of lags of the dependent variable that are used as predictors. For instance, if p is 3, the predictors for x(t) will be x(t−1),x(t−2), and x(t−3).\nd: The degree of differencing. It indicates the number of times the data have had past values subtracted. Differencing is used to make the series stationary, which is a requirement for many statistical modelling methods.\nq: The number of moving average (MA) terms. This parameter is associated with the number of lagged forecast errors in the prediction equation. For example, if q is 2, the prediction of x(t) will be adjusted by the forecast errors made on the two previous predictions x(t−1) and x(t−2).\n\nSo when order=c(1,1,1) is in use, it specifies an ARIMA model with:\n\n1 AR term (p=1)\n1 degree of differencing (d=1)\n1 MA term (q=1)\n\nThe choice of these parameters is critical as they define the structure of the time series model you are trying to fit. The ARIMA model attempts to describe the autocorrelations in the data with these parameters.\n\n# If you want to manually specify the model, fit it like so:\nmanual_fit &lt;- Arima(uk_ts, order=c(2,1,8))\n\n\n\n# And forecast manually specified model from 2021 to 2030\nmanual_forecast &lt;- forecast(manual_fit, h=forecast_length, level=c(90, 95))\n\n# Plot the manual forecast\nplot(manual_forecast)\nlines(uk_ts, type=\"o\", col='red') \n\n\n\n\nAdding a slope/gradient to the forecast and the Confidence Interval L: 90% + U:95%\n\n# Fit a linear model to your time series data\ntrend_model &lt;- lm(uk_ts ~ time(uk_ts))\n\n# If you want to manually specify the model, fit it like so:\nmanual_fit &lt;- Arima(uk_ts, order=c(2,1,8))\n\n# And forecast manually specified model from 2021 to 2030\nmanual_forecast &lt;- forecast(manual_fit, h=forecast_length, level=c(90, 95))\n\nlower_90 &lt;- manual_forecast$lower[,1]  # 90% confidence interval lower bound\nupper_90 &lt;- manual_forecast$upper[,1]  # 90% confidence interval upper bound\nlower_95 &lt;- manual_forecast$lower[,2]  # 95% confidence interval lower bound\nupper_95 &lt;- manual_forecast$upper[,2]  # 95% confidence interval upper bound\n\n# To display these values, you could use a data frame\nconfidence_intervals &lt;- data.frame(\n  Time = time(manual_forecast$mean),\n  Lower_90 = lower_90,\n  Upper_90 = upper_90,\n  Lower_95 = lower_95,\n  Upper_95 = upper_95\n)\n\nprint(confidence_intervals)\n\n  Time Lower_90 Upper_90 Lower_95 Upper_95\n1 2022 3.555345 5.040414 3.413095 5.182663\n2 2023 3.362534 5.071375 3.198849 5.235059\n3 2024 3.587076 5.327887 3.420329 5.494634\n4 2025 3.281339 5.185129 3.098981 5.367487\n5 2026 3.522855 5.569848 3.326780 5.765922\n6 2027 3.273329 5.470929 3.062828 5.681430\n7 2028 3.238782 5.914370 2.982496 6.170656\n8 2029 2.990264 5.940387 2.707681 6.222970\n9 2030 2.954290 6.284792 2.635272 6.603810\n\n# Plot the manual forecast\nplot(manual_forecast, main = \"UK's Forecasted BMI value with CI\",  # Add a title\n     xlab = \"Year\",  # Label for the x-axis\n     ylab = \"BMI_USDprice\",  # Label for the y-axis\n     col = \"blue\",  # Color for the forecast line\n     type = \"n\",\n     lwd = 1,  # Width of the forecast line\n     cex.lab = 0.8,  # Size of axis labels\n     cex.axis = 0.8,  # Size of axis tick labels\n     cex.main = 1) \nlines(manual_forecast$mean, col = \"blue\", lwd = 2)\npoints(uk_ts, pch = 19, col = \"red\")\nlines(uk_ts, type=\"o\", col='red')\n\n# Add a linear trend line to the plot\nabline(trend_model$coefficients, col=\"grey\")\nlegend(\"topleft\", legend = c(\"Forecast\", \"Historical Data\", \"Trend Line\"), col = c(\"blue\", \"red\", \"darkgrey\"), lty = 1, lwd = 0.5, pch = c(NA, 19, NA))\n\n# Get the slope (gradient) of the linear model\nslope &lt;- coef(trend_model)[\"time(uk_ts)\"]\n\n# Add the slope value as text on the plot\n# You can adjust the x and y coordinates and the text size (cex) as needed\ntext(x = mean(time(uk_ts)), y = max(uk_ts), labels = paste(\"Gradient:\", round(slope, 3)), pos = 3, cex = 0.8)\n\nx_offset &lt;- 16\n\nci_x &lt;- c(time(manual_forecast$mean), rev(time(manual_forecast$mean)))\nci_y &lt;- c(manual_forecast$lower[,2], rev(manual_forecast$upper[,2]))\npolygon(ci_x, ci_y, col = rgb(0, 1, 1, alpha = 0.1), border = NA)\n\n\n\n\n\nlibrary(plotly)\n# Assuming manual_forecast, trend_model, and uk_ts are already defined\n\n# Convert uk_ts to a data frame for plotly (if it's not already)\nuk_ts_df &lt;- data.frame(Time = as.numeric(time(uk_ts)), Value = as.numeric(uk_ts))\n\n# Create base plot with plotly\np &lt;- plot_ly() %&gt;%\n  add_lines(data = uk_ts_df, x = ~Time, y = ~Value, name = \"Historical Data\", line = list(color = 'red')) %&gt;%\n  add_lines(x = time(manual_forecast$mean), y = manual_forecast$mean, name = \"Forecast\", line = list(color = 'blue')) %&gt;%\n  add_ribbons(x = time(manual_forecast$mean), ymin = manual_forecast$lower[,2], ymax = manual_forecast$upper[,2], name=\"95% CI\", line = list(color = 'transparent'), fillcolor = 'rgba(0, 0, 255, 0.1)') %&gt;%\n  layout(title = \"UK's Forecasted BMI value with CI\", xaxis = list(title = \"Year\"), yaxis = list(title = \"BMI_USDprice\"))\n\n# Add trend line - calculate points based on the linear model coefficients\ntrend_line_df &lt;- data.frame(Time = c(min(uk_ts_df$Time), max(uk_ts_df$Time)))\ntrend_line_df$Trend &lt;- coef(trend_model)[\"(Intercept)\"] + coef(trend_model)[\"time(uk_ts)\"] * trend_line_df$Time\n\n# Add trend line to the plot\np &lt;- p %&gt;% add_lines(data = trend_line_df, x = ~Time, y = ~Trend, name = \"Trend Line\", line = list(color = 'grey'))\n\n# Optionally, add annotations for the slope and CI labels\n# Note: Adjust the coordinates (x, y) based on your data's range\np &lt;- p %&gt;%\n  layout(annotations = list(\n    list(x = mean(uk_ts_df$Time), y = max(uk_ts_df$Value), text = paste(\"Gradient:\", round(slope, 3)), showarrow = F),\n    list(x = max(uk_ts_df$Time), y = min(manual_forecast$lower[length(manual_forecast$mean),2]), text = paste(\"Lower 95%: Mean\", round(manual_forecast$lower[length(manual_forecast$mean),2], 2)), showarrow = F),\n    list(x = max(uk_ts_df$Time), y = max(manual_forecast$upper[length(manual_forecast$mean),2]), text = paste(\"Upper 95%: Mean\", round(manual_forecast$upper[length(manual_forecast$mean),2], 2)), showarrow = F)\n  ))\n\n# Render the plot\np"
  },
  {
    "objectID": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#residual-testing",
    "href": "Take-home_Exercises/Take-Home_Ex04/Take-Home_Exercise04.html#residual-testing",
    "title": "Big Mac Index Choropleth and Time Series",
    "section": "3.5 Residual Testing",
    "text": "3.5 Residual Testing\n\n3.5.1 Checking Normality through Shapiro.Test\n\n# Assuming 'fit' is your fitted ARIMA model\nresiduals &lt;- residuals(manual_fit)\n\n# Plot histogram\nhist(residuals, breaks = 30, main = \"Histogram and Density Plot of Residuals\", xlab = \"Residuals\", col = \"skyblue\", border = \"white\", probability = TRUE)\n\n# Overlay density plot\nlines(density(residuals), col = \"red\", lwd = 2)\n\n\n\n\n\n# Shapiro-Wilk normality test\nshapiro.test(residuals)\n\n\n    Shapiro-Wilk normality test\n\ndata:  residuals\nW = 0.97558, p-value = 0.8654\n\n\nW: This is the test statistic value, where W ranges from 0 to 1. A value of 1 indicates perfect normality.\np-value = 0.8108: A common threshold for significance is 0.05. If the p-value is less than 0.05, we reject the null hypothesis and conclude that the data do not come from a normally distributed population. If the p-value is greater than 0.05.\nIn this result, with a p-value of 0.8108, there is strong evidence to suggest that residuals are normally distributed.\n\n\n3.5.2 Using QQ-plot\nA Q-Q (quantile-quantile) plot compares the distribution of residuals to a normal distribution.\n\nlibrary(car)\n\n# Create Q-Q plot with statistical annotations\nqqPlot(residuals(manual_fit), main=\"Q-Q Plot of Residuals\", \n       ylab=\"Sample Quantiles\", \n       las=1)\n\n\n\n\n[1] 7 8\n\n\n\n\n3.5.3 Checking for autocorrelation at any given lags\nThe Ljung-Box test provides a p-value that can be used to determine whether there is significant evidence of autocorrelation at any of the lags tested.\n\n# Perform the Ljung-Box test and store the result\nlb_test &lt;- Box.test(residuals(fit), type=\"Ljung-Box\")\n\n# Print the test statistic and p-value\ncat(\"Ljung-Box test statistic:\", lb_test$statistic, \"\\n\")\n\nLjung-Box test statistic: 0.06118341 \n\ncat(\"P-value:\", lb_test$p.value, \"\\n\")\n\nP-value: 0.8046352 \n\n\nIn the context of the Ljung-Box test, a higher p-value is generally considered better when using it to check the residuals of a time series model for randomness or lack of autocorrelation. The Ljung-Box test is a type of statistical test that is used to determine if there are significant autocorrelations at lag in the residuals of a time series model.\n\nHigher p-value (typically &gt; 0.05): Suggests that the residuals are random, indicating that the model has adequately captured the information in the data. In other words, there is no evidence of significant autocorrelation at any of the tested lags, and the model fits well.\nLower p-value (typically ≤ 0.05): Suggests that there is significant autocorrelation in the residuals that the model has not captured. This can indicate that the model could be improved, either by adding more terms or by considering a different model structure.\n\nTherefore, we can observe that the p-value is above 0.138 and hence we can reject the null hypothesis that there is a autocorrelation. This outcome would suggest that our model is capturing the underlying patterns in the data well, and the residuals are essentially white noise, as desired.\n\n# Plotting ACF of residuals\nAcf(residuals(manual_fit), main='ACF of Residuals')\n\n\n\n# Conducting the Ljung-Box test\nBox.test(residuals(manual_fit), lag = log(length(residuals(fit))))\n\n\n    Box-Pierce test\n\ndata:  residuals(manual_fit)\nX-squared = 0.32999, df = 3.6636, p-value = 0.9807\n\n\nFor ACF plot of residuals, the goal is to see no pattern and have all bars within the confidence interval, indicating that the residuals are random (white noise) and the model has done a good job of capturing the underlying patterns in the data.\nIf there is significant autocorrelations, there is a need to revise the model by adjusting its parameters or by considering additional explanatory variables.\n\nFor the purpose of Shiny App, all Countries will run ARIMA with the option for the viewer to select the (1) model fit criteria, (2) parameters and (3) residual checks to see if the model suffers from overfitting or autocorellation."
  },
  {
    "objectID": "index.html#three-stages-of-a-visual-analytics-student",
    "href": "index.html#three-stages-of-a-visual-analytics-student",
    "title": "ISS608",
    "section": "Three Stages of a Visual Analytics Student",
    "text": "Three Stages of a Visual Analytics Student\nMy journey through attaining data visualisation knowledge.\n\n\n\n\n\n\n\n\nStage 1: Highly Diligent & Optimistic\nStage 2: On Overdrive & Caffeine IV Drip\nStage 3: Questioning Life Choices\n\n\n\n\n\n\n\n\n\n\n\nHighly Diligent and Optimistic: This stage is all about the initial excitement and motivation. Students are full of energy, ready to conquer every textbook and lecture note. They’re the ones sitting in the front row, taking meticulous notes and perhaps even colour-coding them for good measure.\nOn Overdrive & Caffeine IV Drip: At this point, the workload has increased, and so has the reliance on coffee or any form of caffeine. Nights become longer, sleep becomes a distant memory, and the library feels more like home than the actual dorm. The motto shifts to “I’ll sleep when I’m dead” as deadlines loom closer.\nQuestioning Life Choices: This final stage is marked by a deep reevaluation of one’s life decisions leading up to this point. The workload feels insurmountable, leading to moments of existential dread and questioning whether the subject of study is a passion or a punishment. Acceptance of one’s fate becomes the coping mechanism, along with a dark sense of humour about the future."
  },
  {
    "objectID": "index.html#the-workload",
    "href": "index.html#the-workload",
    "title": "ISS608",
    "section": "The Workload",
    "text": "The Workload"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About FirGhaz",
    "section": "",
    "text": "The Dilemma\nThat was me at the start of the ADD | DROP period. Ouh well, Hi *Firdaus* here! Thrilled to be on this VAA journey, under the stewardship of Prof Kam! 😅"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "1 Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "In this chapter, you will learn the basic principles and essential components of ggplot2. At the same time, you will gain hands-on experience on using these components to plot statistical graphics based on the principle of Layered Grammar of Graphics. By then end of this chapter you will be able to apply the essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#r-graphics-vs-ggplot",
    "title": "1 Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.3.1 R Graphics VS ggplot",
    "text": "1.3.1 R Graphics VS ggplot\nFirst, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\n\nCode\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-geom_bar",
    "title": "1 Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.1 The geom_bar",
    "text": "1.7.1 The geom_bar\n\n\nCode\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-geom_dotplot",
    "title": "1 Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.2 The geom_dotplot",
    "text": "1.7.2 The geom_dotplot\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\nThe y scale is not very useful, in fact it is very misleading.\nThe code chunk below performs the following two steps:\nscale_y_continuous() is used to turn off the y-axis, and binwidth argument is used to change the binwidth to 2.5.\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-geom_histogram",
    "title": "1 Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.3 The geom_histogram()",
    "text": "1.7.3 The geom_histogram()\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\n\nThe bin is at 30."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-geom",
    "title": "1 Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.4 Modifying a geometric object by changing geom()",
    "text": "1.7.4 Modifying a geometric object by changing geom()\nIn the code chunk below,\n\nargument is used to change the number of bins to 20,\nfill argument is used to shade the histogram with light blue color, and\ncolor argument is used to change the outline colour of the bars in black\n\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill=\"light blue\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#modifying-a-geometric-object-by-changing-aes",
    "title": "1 Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.5 Modifying a geometric object by changing aes()",
    "text": "1.7.5 Modifying a geometric object by changing aes()\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-geom_density",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-geom_density",
    "title": "1 Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.6 The geom_density()",
    "text": "1.7.6 The geom_density()\ngeom-density() computes and plots kernel density estimate, which is a smoothed version of the histogram.\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\n\nThe code chunk below plots two kernel density lines by using colour or fill arguments of aes()\n\n\nCode\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-geom_boxplot",
    "title": "1 Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.7 The geom_boxplot",
    "text": "1.7.7 The geom_boxplot\ngeom_boxplot() displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually. The code chunk below plots boxplots by using geom_boxplot().\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\nThe code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-geom_violin",
    "title": "1 Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.8 The geom_violin",
    "text": "1.7.8 The geom_violin\ngeom_violin is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\nThe code below plot the distribution of Maths score by gender in violin plot.\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-geom_point",
    "title": "1 Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.9 The geom_point()",
    "text": "1.7.9 The geom_point()\ngeom_point() is especially useful for creating scatterplot.\nThe code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-combined",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#geom-objects-combined",
    "title": "1 Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.7.10 Geom Objects Combined",
    "text": "1.7.10 Geom Objects Combined\n\n\nCode\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_wrap",
    "title": "1 Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9.1 Working with facet_wrap()",
    "text": "1.9.1 Working with facet_wrap()\nfacet_wrap wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.\nThe code chunk below plots a trellis plot using facet-wrap().\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_grid",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#working-with-facet_grid",
    "title": "1 Layered Grammar of Graphics: ggplot2 methods",
    "section": "1.9.2 Working with facet_grid()",
    "text": "1.9.2 Working with facet_grid()\nfacet_grid() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.\nThe code chunk below plots a trellis plot using facet_grid().\n\n\nCode\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-requirement-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#installing-and-loading-the-requirement-libraries",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.2.1 Installing and loading the requirement libraries",
    "text": "2.2.1 Installing and loading the requirement libraries\n\nCode chunk below will be used to check if these packages have been installed and also will load them onto your working R environment:\n\n\n\n\n\n\nR Packages\nWhat does the package provide?\n\n\n\n\nggrepel\nprovides geoms for ggplot2 to repel overlapping text labels.\n\n\nggthemes\nprovides some extra themes, geoms, and scales for ‘ggplot2’.\n\n\nhrbrthemes\nprovides typography-centric themes and theme components for ggplot2.\n\n\npatchwork\n preparing composite figure created using ggplot2.\n\n\n\n\npacman::p_load(ggrepel, patchwork, \n               ggthemes, hrbrthemes,\n               tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#importing-data",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.2.2 Importing Data",
    "text": "2.2.2 Importing Data\nFor the purpose of this exercise, a data file called Exam_data will be used. It consists of year end examination grades of a cohort of primary 3 students from a local school. It is in csv file format.\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\nThere are a total of seven attributes in the exam_data tibble data frame. Four of them are categorical data type and the other three are in continuous data type.\n\nThe categorical attributes are: ID, CLASS, GENDER and RACE.\nThe continuous attributes are: MATHS, ENGLISH and SCIENCE."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "Output",
    "text": "Output\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "The Code Chunk",
    "text": "The Code Chunk\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label(aes(label = ID), \n             hjust = .5, \n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggrepel",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.3.1 Working with ggrepel",
    "text": "2.3.1 Working with ggrepel"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-1",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-1",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "Output",
    "text": "Output\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-1",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-1",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "The Code Chunk",
    "text": "The Code Chunk\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  geom_label_repel(aes(label = ID), \n                   fontface = \"bold\") +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-2",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-2",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "Output",
    "text": "Output\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-2",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-2",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "The Code Chunk",
    "text": "The Code Chunk\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-ggtheme-package",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.4.1 Working with ggtheme package",
    "text": "2.4.1 Working with ggtheme package\nggthemes provides ‘ggplot2’ themes that replicate the look of plots by Edward Tufte, Stephen Few, Fivethirtyeight, The Economist, ‘Stata’, ‘Excel’, and The Wall Street Journal, among others.\nIn the example below, The Economist theme is used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-3",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-3",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "Output",
    "text": "Output\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-3",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-3",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "The Code Chunk",
    "text": "The Code Chunk\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#working-with-hrbthems-package",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.4.2 Working with hrbthems package",
    "text": "2.4.2 Working with hrbthems package\nhrbrthemes package provides a base theme that focuses on typographic elements, including where various labels are placed as well as the fonts that are used."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-4",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-4",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "Output",
    "text": "Output\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-4",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-4",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "The Code Chunk",
    "text": "The Code Chunk\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-5",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-5",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "Output",
    "text": "Output\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-5",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-5",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "The Code Chunk",
    "text": "The Code Chunk\n\nggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  ggtitle(\"Distribution of Maths scores\") +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-6",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-6",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "Output",
    "text": "Output\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-6",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-6",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "The Code Chunk",
    "text": "The Code Chunk\n\np1 &lt;- ggplot(data=exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") + \n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of Maths scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-7",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-7",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "Output",
    "text": "Output\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-7",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-7",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "The Code Chunk",
    "text": "The Code Chunk\n\np2 &lt;- ggplot(data=exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins=20, \n                 boundary = 100,\n                 color=\"grey25\", \n                 fill=\"grey90\") +\n  coord_cartesian(xlim=c(0,100)) +\n  ggtitle(\"Distribution of English scores\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-8",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-8",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "Output",
    "text": "Output\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-8",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-8",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "The Code Chunk",
    "text": "The Code Chunk\n\np3 &lt;- ggplot(data=exam_data, \n             aes(x= MATHS, \n                 y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores for Primary 3\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-two-ggplot2-graphs",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.5.2 Combining two ggplot2 graphs",
    "text": "2.5.2 Combining two ggplot2 graphs\nFigure in the tabset below shows a composite of two histograms created using patchwork. Note how simple the syntax used to create the plot!"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-9",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-9",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "Output",
    "text": "Output\n\np1 + p2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-9",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-9",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "The Code Chunk",
    "text": "The Code Chunk\n\np1 + p2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#combining-three-ggplot2-graphs",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.5.3 Combining three ggplot2 graphs",
    "text": "2.5.3 Combining three ggplot2 graphs\nWe can plot more complex composite by using appropriate operators. For example, the composite figure below is plotted by using:\n\n“|” operator to stack two ggplot2 graphs,\n“/” operator to place the plots beside each other,\n“()” operator the define the sequence of the plotting."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-10",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-10",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "Output",
    "text": "Output\n\n(p1 / p2) | p3"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-10",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-10",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "The Code Chunk",
    "text": "The Code Chunk\n\n(p1 / p2) | p3"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-cocompositeigure-with-tag",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-cocompositeigure-with-tag",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.5.4 Creating a cocompositeigure with tag",
    "text": "2.5.4 Creating a cocompositeigure with tag\nIn order to identify subplots in text, patchwork also provides auto-tagging capabilities as shown in the figure below."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-11",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-11",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "Output",
    "text": "Output\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-11",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-11",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "The Code Chunk",
    "text": "The Code Chunk\n\n((p1 / p2) | p3) + \n  plot_annotation(tag_levels = 'I')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-figure-with-insert",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.2.5 Creating figure with insert",
    "text": "2.2.5 Creating figure with insert\nBeside providing functions to place plots next to each other based on the provided layout. With inset_element() of patchwork, we can place one or several plots or graphic elements freely on top or below another plot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-12",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-12",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "Output",
    "text": "Output\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-12",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-12",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "The Code Chunk",
    "text": "The Code Chunk\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#creating-a-composite-figure-by-using-patchwork-and-ggtheme",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "2.5.6 Creating a composite figure by using patchwork and ggtheme",
    "text": "2.5.6 Creating a composite figure by using patchwork and ggtheme\nFigure below is created by combining patchwork and theme_economist() of ggthemes package discussed earlier."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-13",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#output-13",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "Output",
    "text": "Output\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-13",
    "href": "Hands-on_Ex/Hands-on_Ex02/Hands-on_Ex02.html#the-code-chunk-13",
    "title": "2 Beyond ggplot2 Fundamentals",
    "section": "The Code Chunk",
    "text": "The Code Chunk\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html",
    "href": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, the learning outcome is to create an interactice data visualisation by using function provided by ggiraph and plotlyr packages."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#tooltip-effect-with-tooltip-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#tooltip-effect-with-tooltip-aesthetic",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.4.1 Tooltip effect with tooltip aesthetic",
    "text": "3.4.1 Tooltip effect with tooltip aesthetic\nBelow ys a code chuck to plot an interactive statistical graph by using ggiraph package. Notice that the code chunk consists of two parts. First, an ggplot object will be created. Next, girafe() of ggiraph will be used to create an interactive svg object.\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\nNotice that two steps are involved. First, an interactive version of ggplot2 geom (i.e. geom_dotplot_interactive().) will be used to create the basic graph. Then, girafe() will be used to generate an svg object to be displayed on an html page."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#displaying-multiple-information-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#displaying-multiple-information-on-tooltip",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.5.1 Displaying multiple information on tooltip",
    "text": "3.5.1 Displaying multiple information on tooltip\nThe content of the tooltip can be customised by including a list object as shown in the code chunk below.\n\n\nCode\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\nThe first three lines of codes in the code chunk create a new field called tooltip. At the same time, it populates text in ID and CLASS fields into the newly created field. Next, this newly created field is used as tooltip field as shown in the code of line 7.\n3.6 Interactivity\n\n\nCode\nexam_data$tooltip &lt;- c(paste0(     \n  \"Name = \", exam_data$ID,         \n  \"\\n Class = \", exam_data$CLASS)) \n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip), \n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\") +\n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#displaying-statistics-on-tooltip",
    "href": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#displaying-statistics-on-tooltip",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.6.2 Displaying statistics on tooltip",
    "text": "3.6.2 Displaying statistics on tooltip\nCode chunk below shows an advanced way to customise tooltip. In this example, a function is used to compute 90% confident interval of the mean. The derived statistics are then displayed in the tooltip.\n\n\nCode\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy) #standard deviation of the mean\n  paste(\"Mean maths scores:\", mean, \"\\n+/-\", sem) #whenever hover the text will be pasted over the interactive output\n}\n\ngg_point &lt;- ggplot(data=exam_data, \n                   aes(x = RACE),\n) +\n  stat_summary(aes(y = MATHS, \n                   tooltip = after_stat(  \n                     tooltip(y, ymax))),  \n    fun.data = \"mean_se\", \n    geom = GeomInteractiveCol,  \n    fill = \"light blue\"\n  ) +\n  stat_summary(aes(y = MATHS),\n    fun.data = mean_se,\n    geom = \"errorbar\", width = 0.2, size = 0.2\n  )\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nCode\ngirafe(ggobj = gg_point,\n       width_svg = 8,\n       height_svg = 8*0.618)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#hover-effect-with-data_id-aesthetic",
    "href": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#hover-effect-with-data_id-aesthetic",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.6.3 Hover effect with data_id aesthetic",
    "text": "3.6.3 Hover effect with data_id aesthetic\nCode chunk below shows the second interactive feature of ggiraph, namely ‘data_id’.\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) + \n  geom_dotplot_interactive(           \n    aes(tooltip = ID, data_id = CLASS),        #include in another argument     \n    stackgroups = TRUE,               \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618                      \n)                                        \n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote that the default value of the hover css is hover_css = “fill:orange;”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#styling-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#styling-hover-effect",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.6.4 Styling hover effect",
    "text": "3.6.4 Styling hover effect\nIn the code chunk below, css codes are used to change the highlighting effect.\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #549549;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over.\nNote: Different from previous example, in this example the ccs customisation request are encoded directly."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#combining-tooltip-and-hover-effect",
    "href": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#combining-tooltip-and-hover-effect",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.6.5 Combining tooltip and hover effect",
    "text": "3.6.5 Combining tooltip and hover effect\nThere are time that we want to combine tooltip and hover effect on the interactive statistical graph as shown in the code chunk below.\n\n\nCode\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = CLASS, \n        data_id = CLASS),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618,\n  options = list(                        \n    opts_hover(css = \"fill: #202020;\"),  \n    opts_hover_inv(css = \"opacity:0.2;\") \n  )                                        \n)                                        \n\n\n\n\n\n\nInteractivity: Elements associated with a data_id (i.e CLASS) will be highlighted upon mouse over. At the same time, the tooltip will show the CLASS.\n3.6.6 Click effect with onclick\n‘onclick’ argument of ggiraph provides hotlink interactivity on the web. The code chunk below shown an example of ‘onclick’.\n\n\nCode\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n\"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\",\nas.character(exam_data$ID))\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(onclick = onclick),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +               \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\ngirafe(                                  \n  ggobj = p,                             \n  width_svg = 6,                         \n  height_svg = 6*0.618)                                        \n\n\n\n\n\n\nInteractivity: Web document link with a data object will be displayed on the web browser upon mouse click.\n\n\n\n\n\n\nWarning\n\n\n\nNote that click actions must be a string column in the dataset containing valid javascript instructions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#coordinated-multiple-views-with-ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#coordinated-multiple-views-with-ggiraph",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.6.7 Coordinated Multiple Views with ggiraph",
    "text": "3.6.7 Coordinated Multiple Views with ggiraph\nCoordinated multiple views methods has been implemented in the data visualisation below.\nNotice that when a data point of one of the dotplot is selected, the corresponding data point ID on the second data visualisation will be highlighted too.\nIn order to build a coordinated multiple views as shown in the example above, the following programming strategy will be used:\n\nAppropriate interactive functions of ggiraph will be used to create the multiple views.\npatchwork function of patchwork package will be used inside girafe function to create the interactive coordinated multiple views.\n\n\n\nCode\np1 &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID, data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") +  \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\np2 &lt;- ggplot(data=exam_data, \n       aes(x = ENGLISH)) +\n  geom_dotplot_interactive(              \n    aes(tooltip = ID, data_id = ID),              \n    stackgroups = TRUE,                  \n    binwidth = 1,                        \n    method = \"histodot\") + \n  coord_cartesian(xlim=c(0,100)) + \n  scale_y_continuous(NULL,               \n                     breaks = NULL)\n\ngirafe(code = print(p1 + p2), # for girafe function in patchwork need to use the 'code=print' function\n       width_svg = 6,\n       height_svg = 3,\n       options = list(opts_hover(css = \"fill: #750549;\"),opts_hover_inv(css = \"opacity:0.2;\")\n         )\n       ) \n\n\n\n\n\n\nThe data_id _aesthetic is critical to link observations between plots and the tooltip aesthetic is optional but nice to have when mouse over a point.\n3.7 Interactive Data Visualisation - plotly methods!\nPlotly’s R graphing library create interactive web graphics from ggplot2 graphs and/or a custom interface to the (MIT-licensed) JavaScript library plotly.js inspired by the grammar of graphics. Different from other plotly platform, plot.R is free and open source.\n There are two ways to create interactive graph by using plotly, they are:\n-by using plot_ly(), and -by using ggplotly()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#creating-an-interactive-scatter-plot-plotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#creating-an-interactive-scatter-plot-plotly-method",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.7.1 Creating an interactive scatter plot: plotly() method",
    "text": "3.7.1 Creating an interactive scatter plot: plotly() method\nThe tabset below shows an example a basic interactive plot created by using plot_ly()\n\nThe PlotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_ly(data = exam_data, \n             x = ~MATHS, # native plotly way of writing a code (follwoing the javascript convention)\n             y = ~ENGLISH)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#working-with-visual-variable-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#working-with-visual-variable-plot_ly-method",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.7.2 Working with visual variable: plot_ly() method",
    "text": "3.7.2 Working with visual variable: plot_ly() method\nIn the code chunk below, color argument is mapped to a qualitative visual variable (i.e. RACE).\n\nThe plotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_ly(data = exam_data, \n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE)\n\n\n\n\n\n3.7.3 Creating an interactive scatter plot: ggplotly() method\nThe code chunk below plots an interactive scatter plot by using ggploty().\n\nThe plotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\nCode\np &lt;- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nggplotly(p)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#coordinated-mulitple-views-with-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#coordinated-mulitple-views-with-plotly",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.7.4 Coordinated Mulitple Views with plotly",
    "text": "3.7.4 Coordinated Mulitple Views with plotly\nThe creation of a coordinated linked plot by using plotly involves three steps:\nhighlight_key() of plotly package is used as shared data. two scatterplots will be created by using ggplot2 functions. lastly, subplot() of plotly package is used to place them next to each other side-by-side.\n\nThe plotThe code chunk\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\np2 &lt;- ggplot(data=d, \n            aes(x = MATHS,\n                y = SCIENCE)) +\n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\nsubplot(ggplotly(p1),\n        ggplotly(p2))\n\n\n\n\n\nThing to learn from the code chunk:\nhighlight_key() simply creates an object of class [crosstalk::SharedData}(https://rdrr.io/cran/crosstalk/man/SharedData.html). Visit this link to learn more about crosstalk,"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#interactive-data-table-dt-package",
    "href": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#interactive-data-table-dt-package",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.8.1 Interactive Data Table: DT package",
    "text": "3.8.1 Interactive Data Table: DT package\n\nA wrapper of the JavaScript Library DataTables.\nData objects in R can be rendered as HTML tables using the JavaScript library ‘DataTables’ (typically via R Markdown or Shiny).\n\n\n\nCode\nDT::datatable(exam_data, class= \"compact\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#linked-brushing-crosstalk-method",
    "href": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#linked-brushing-crosstalk-method",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.8.2 Linked brushing: crosstalk method",
    "text": "3.8.2 Linked brushing: crosstalk method\n::: panel-tabset ## The plot"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#the-code-chunk-4",
    "href": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#the-code-chunk-4",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "The Code Chunk",
    "text": "The Code Chunk\n\n\nCode\nd &lt;- highlight_key(exam_data) \np &lt;- ggplot(d, \n            aes(ENGLISH, \n                MATHS)) + \n  geom_point(size=1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\ngg &lt;- highlight(ggplotly(p),        \n                \"plotly_selected\")  \n\ncrosstalk::bscols(gg,               \n                  DT::datatable(d), \n                  widths = 5)\n\n\nThings to learn from the code chunk:\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#ggiraph",
    "href": "Hands-on_Ex/Hands-on_Ex03(a)/Hands-on_Ex03(a).html#ggiraph",
    "title": "3 Programming Interactive Data Visualisation with R",
    "section": "3.9.1 ggiraph",
    "text": "3.9.1 ggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(b)/Hands-on_Ex03(b).html",
    "href": "Hands-on_Ex/Hands-on_Ex03(b)/Hands-on_Ex03(b).html",
    "title": "3(b) Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When telling a visually-driven data story, animated graphics tends to attract the interest of the audience and make deeper impression than static graphics.\nThis hands-on’s learning outcomes are: 1. learn how to create animated data visualisation by using gganimate and plotly r packages. 2. learn how reshape data by using tidyr package, and process, wrangle and transform data by using dplyr package.\n\n\nWhen creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n ## 4.1.1 Terminology\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(b)/Hands-on_Ex03(b).html#basic-concept-of-animation",
    "href": "Hands-on_Ex/Hands-on_Ex03(b)/Hands-on_Ex03(b).html#basic-concept-of-animation",
    "title": "3(b) Programming Animated Statistical Graphics with R",
    "section": "",
    "text": "When creating animations, the plot does not actually move. Instead, many individual plots are built and then stitched together as movie frames, just like an old-school flip book or cartoon. Each frame is a different plot when conveying motion, which is built using some relevant subset of the aggregate data. The subset drives the flow of the animation when stitched back together.\n ## 4.1.1 Terminology\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning.\n\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making animated graphs, you should first ask yourself: Does it makes sense to go through the effort? If you are conducting an exploratory data analysis, a animated graphic may not be worth the time investment. However, if you are giving a presentation, a few well-placed animated graphics can help an audience connect with your topic remarkably better than static counterparts."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(b)/Hands-on_Ex03(b).html#loading-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex03(b)/Hands-on_Ex03(b).html#loading-r-packages",
    "title": "3(b) Programming Animated Statistical Graphics with R",
    "section": "4.2.1 Loading R Packages",
    "text": "4.2.1 Loading R Packages\nFirst, write a code chunk to check, install and load the following R packages:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\n\nCode\npacman::p_load(readxl, gifski, gapminder,\n               plotly, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(b)/Hands-on_Ex03(b).html#importing-the-data",
    "href": "Hands-on_Ex/Hands-on_Ex03(b)/Hands-on_Ex03(b).html#importing-the-data",
    "title": "3(b) Programming Animated Statistical Graphics with R",
    "section": "4.2.2 Importing the Data",
    "text": "4.2.2 Importing the Data\nIn this hands-on exercise, the Data worksheet from GlobalPopulation Excel workbook will be used.\nWrite a code chunk to import Data worksheet from GlobalPopulation Excel workbook by using appropriate R package from tidyverse family.\n\n\nCode\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\n\n\nread_xls() of readxl package is used to import the Excel worksheet.\nmutate_each_() of dplyr package is used to convert all character data type into factor.\nmutate of dplyr package is used to convert data values of Year field into integer.\n\n\nUnfortunately, ‘mutate_each_()’ was deprecated in dplyr 0.7.0. and funs() was deprecated in dplyr 0.8.0. In view of this, we will re-write the code by using mutate_at() as shown in the code chunk below.\n\n\nCode\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\nInstead of using ‘mutate_at()’, across() can be used to derive the same outputs.\n\n\nCode\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))\n\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `across(col, as.factor)`.\nCaused by warning:\n! Using an external vector in selections was deprecated in tidyselect 1.1.0.\nℹ Please use `all_of()` or `any_of()` instead.\n  # Was:\n  data %&gt;% select(col)\n\n  # Now:\n  data %&gt;% select(all_of(col))\n\nSee &lt;https://tidyselect.r-lib.org/reference/faq-external-vector.html&gt;."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(b)/Hands-on_Ex03(b).html#building-a-static-population-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03(b)/Hands-on_Ex03(b).html#building-a-static-population-bubble-plot",
    "title": "3(b) Programming Animated Statistical Graphics with R",
    "section": "4.3.1 Building a static population bubble plot",
    "text": "4.3.1 Building a static population bubble plot\nIn the code chunk below, the basic ggplot2 functions are used to create a static bubble plot.\n\n\nCode\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(b)/Hands-on_Ex03(b).html#building-the-animated-bubble-plot",
    "href": "Hands-on_Ex/Hands-on_Ex03(b)/Hands-on_Ex03(b).html#building-the-animated-bubble-plot",
    "title": "3(b) Programming Animated Statistical Graphics with R",
    "section": "4.3.2 Building the animated bubble plot",
    "text": "4.3.2 Building the animated bubble plot\nIn the code chunk below,\n\ntransition time(). of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\n\nCode\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(b)/Hands-on_Ex03(b).html#building-an-animated-bubble-plot-ggplotly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03(b)/Hands-on_Ex03(b).html#building-an-animated-bubble-plot-ggplotly-method",
    "title": "3(b) Programming Animated Statistical Graphics with R",
    "section": "4.4.1 Building an animated bubble plot: ggplotly() method",
    "text": "4.4.1 Building an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\n\n\nAppropriate ggplot2 functions are used to create a static bubble plot. The output is then saved as an R object called gg. -ggplotly() is then used to convert the R graphic object into an animated svg object.\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position=‘none’) should be used as shown in the plot and code chunk below.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex03(b)/Hands-on_Ex03(b).html#building-an-animated-bubble-plot-plot_ly-method",
    "href": "Hands-on_Ex/Hands-on_Ex03(b)/Hands-on_Ex03(b).html#building-an-animated-bubble-plot-plot_ly-method",
    "title": "3(b) Programming Animated Statistical Graphics with R",
    "section": "4.4.2 Building an animated bubble plot: plot_ly() method",
    "text": "4.4.2 Building an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html",
    "href": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html",
    "title": "4(a) Visualising Distribution",
    "section": "",
    "text": "In this exercise, the learning outcome is to develop two relatively new statistical graphic methods for visualising distribution, namely (1) ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html#learning-outcome",
    "title": "4(a) Visualising Distribution",
    "section": "",
    "text": "In this exercise, the learning outcome is to develop two relatively new statistical graphic methods for visualising distribution, namely (1) ridgeline plot and raincloud plot by using ggplot2 and its extensions."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html#getting-started",
    "title": "4(a) Visualising Distribution",
    "section": "4.2 Getting Started",
    "text": "4.2 Getting Started\n\n4.2.1 Installing R Packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nggridges, a ggplot2 extension specially designed for plotting ridgeline plots, and\nggdist for visualising distribution and uncertainty.\n\n\n\nCode\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n\n\n\n\n4.2.2 Data Import\nFor this exercise, the Exam data will be imported:\n\n\nCode\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html#visualising-distribution-with-ridgeline-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html#visualising-distribution-with-ridgeline-plot",
    "title": "4(a) Visualising Distribution",
    "section": "4.3 Visualising Distribution with Ridgeline Plot",
    "text": "4.3 Visualising Distribution with Ridgeline Plot\nRidgeline plot (sometimes called Joyplot) is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n\n\n\n\n\n\nTip\n\n\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space. Indeed, the fact that groups overlap each other allows to use space more efficiently. If you have less than 5 groups, dealing with other distribution plots is probably better.\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html#plotting-ridgeline-graph-using-ggridges-method",
    "href": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html#plotting-ridgeline-graph-using-ggridges-method",
    "title": "4(a) Visualising Distribution",
    "section": "4.3.1 Plotting Ridgeline Graph using Ggridges Method",
    "text": "4.3.1 Plotting Ridgeline Graph using Ggridges Method\nThere are several ways to plot ridgeline plot with R. In this section, you will learn how to plot ridgeline plot by using ggridges package.\nggridges package provides two main geom to plot gridgeline plots, they are: geom_ridgeline() and geom_density_ridges() The former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\nThe ridgeline plot below is plotted by using geom_density_ridges().\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html#varying-fill-colours-along-x-axis",
    "href": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html#varying-fill-colours-along-x-axis",
    "title": "4(a) Visualising Distribution",
    "section": "4.3.2 Varying fill colours along X-axis",
    "text": "4.3.2 Varying fill colours along X-axis\nSometimes we would like to have the area under a ridgeline not filled with a single solid color but rather with colors that vary in some form along the x axis. This effect can be achieved by using either geom_ridgeline_gradient() or geom_density_ridges_gradient(). Both geoms work just like geom_ridgeline() and geom_density_ridges(), except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill. For technical reasons, we can have changing fill colors or transparency but not both.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html#mapping-probabilities-directly-onto-colours",
    "href": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html#mapping-probabilities-directly-onto-colours",
    "title": "4(a) Visualising Distribution",
    "section": "4.3.2 Mapping Probabilities directly onto Colours",
    "text": "4.3.2 Mapping Probabilities directly onto Colours\nBeside providing additional geom objects to support the need to plot ridgeline plot, ggridges package also provides a stat function called stat_density_ridges() that replaces stat_density() of ggplot2.\nFigure below is plotted by mapping the probabilities calculated by using stat(ecdf) which represent the empirical cumulative density function for the distribution of English score.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n\n\n\n\n\n\nIt is important include the argument calc_ecdf = TRUE in stat_density_ridges()."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html#plotting-a-half-eye-graph",
    "href": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html#plotting-a-half-eye-graph",
    "title": "4(a) Visualising Distribution",
    "section": "4.4.1 Plotting a half eye graph",
    "text": "4.4.1 Plotting a half eye graph\nFirst, we will plot a Half-Eye graph by using stat_halfeye() of ggdist package.\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html#adding-the-boxplot-with-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html#adding-the-boxplot-with-geom_boxplot",
    "title": "4(a) Visualising Distribution",
    "section": "1.4.2 Adding the boxplot with geom_boxplot()",
    "text": "1.4.2 Adding the boxplot with geom_boxplot()\nNext, we will add the second geometry layer using geom_boxplot() of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html#adding-the-dot-plots-with-stat_dots",
    "href": "Hands-on_Ex/Hands-on_Ex04(a)/Hands-on_Ex04(a).html#adding-the-dot-plots-with-stat_dots",
    "title": "4(a) Visualising Distribution",
    "section": "4.4.3 Adding the Dot Plots with stat_dots()",
    "text": "4.4.3 Adding the Dot Plots with stat_dots()\nNext, we will add the third geometry layer using stat_dots() of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(b)/Hands-on_Ex04(b).html",
    "href": "Hands-on_Ex/Hands-on_Ex04(b)/Hands-on_Ex04(b).html",
    "title": "4(b) Visual Statistical Analysis",
    "section": "",
    "text": "The learning outcomes for this exercise are:\n-ggstatsplot package to create visual graphics with rich statistical information,\n-performance package to visualise model diagnostics, and\n=parameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(b)/Hands-on_Ex04(b).html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex04(b)/Hands-on_Ex04(b).html#learning-outcome",
    "title": "4(b) Visual Statistical Analysis",
    "section": "",
    "text": "The learning outcomes for this exercise are:\n-ggstatsplot package to create visual graphics with rich statistical information,\n-performance package to visualise model diagnostics, and\n=parameters package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(b)/Hands-on_Ex04(b).html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex04(b)/Hands-on_Ex04(b).html#getting-started",
    "title": "4(b) Visual Statistical Analysis",
    "section": "4.2 Getting Started",
    "text": "4.2 Getting Started\nggstatsplot is an extension of ggplot2 package for creating graphics with details from statistical tests included in the information-rich plots themselves. To provide alternative statistical inference methods by default. To follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the APA gold standard for statistical reporting. For example, here are results from a robust t-test:\n\n4.2.1 Installing R Packages\nIn this exercise, ggstatsplot and tidyverse will be used.\n\n\nCode\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\n\n4.2.2 Data Import\nFor this exercise, the Exam data will be imported:\n\n\nCode\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n4.2.3 One-sample test: gghistostats() method\nIn the code chunk below, gghistostats() is used to to build an visual of one-sample test on English scores.\n\n\nCode\nset.seed(1234)\n\n\n\n\nCode\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n4.2.4 Unpacking Bayes Factor\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\n4.2.5 How to interpret Bayes Factor\nA Bayes Factor can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by Lee and Wagenmakers in 2013:\n\n\n4.2.6 Two means sample test:ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for two-sample mean test of Maths scores by gender.\n\n\nCode\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\nWarning in min(x): no non-missing arguments to min; returning Inf\n\n\nWarning in max(x): no non-missing arguments to max; returning -Inf\n\n\n\n\n\nDefault information: - statistical details - Bayes Factor - sample sizes - distribution summary\n\n\n4.2.7 One way ANOVA Test: ggbetweenstats()\nIn the code chunk below, ggbetweenstats() is used to build a visual for One-way ANOVA test on English score by race.\n\n\nCode\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\n\nWarning in min(x): no non-missing arguments to min; returning Inf\n\n\nWarning in max(x): no non-missing arguments to max; returning -Inf\n\n\n\n\n\n-“ns” → only non-significant -“s” → only significant -“all” → everything\n\n4.2.7.1 Summary of Stats\n\n\n\n4.2.8 Significant Test of Correlation: ggscatterstats()\nIn the code chunk below, ggscatterstats() is used to build a visual for Significant Test of Correlation between Maths scores and English scores.\n\n\nCode\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n4.2.9 Significant Test of Association (Depedence) : ggbarstats() methods\nIn the code chunk below, the Maths scores is binned into a 4-class variable by using cut()\n\n\nCode\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n\nIn this code chunk below ggbarstats() is used to build a visual for Significant Test of Association\n\n\nCode\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(b)/Hands-on_Ex04(b).html#visualising-models",
    "href": "Hands-on_Ex/Hands-on_Ex04(b)/Hands-on_Ex04(b).html#visualising-models",
    "title": "4(b) Visual Statistical Analysis",
    "section": "4.3 Visualising Models",
    "text": "4.3 Visualising Models\nIn this section, you will learn how to visualise model diagnostic and model parameters by using parameters package.\n-Toyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(b)/Hands-on_Ex04(b).html#getting-started-1",
    "href": "Hands-on_Ex/Hands-on_Ex04(b)/Hands-on_Ex04(b).html#getting-started-1",
    "title": "4(b) Visual Statistical Analysis",
    "section": "4.4 Getting Started",
    "text": "4.4 Getting Started\nInstalling and importing\n\n\nCode\npacman::p_load(readxl, performance, parameters, see)\n\n\nIn the code chunk below, read_xls() of readxl package is used to import the data worksheet of ToyotaCorolla.xls workbook into R.\n\n\nCode\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …\n\n\nNotice that the output object car_resale is a tibble data frame.\n\n4.4.1 Multilple Regression Model using lm()\nThe code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.\n\n\nCode\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\n4.4.2 Model Diagnostic: checking for multicolinearity:\nIn the code chunk, check_collinearity() of [performance] (https://easystats.github.io/performance/) package.\n\n\nCode\ncheck_collinearity(model)\n\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\n\nCode\ncheck_c &lt;- check_collinearity(model)\nplot(check_c)\n\n\nVariable `Component` is not in your data frame :/\n\n\n\n\n\n\n\n4.4.3 Model Diagnostic: checking normality assumption\nIn the code chunk, check_normality() of performance package.\n\n\nCode\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\n\n\nCode\ncheck_n &lt;- check_normality(model1)\n\n\n\n\nCode\nplot(check_n)\n\n\n\n\n\n\n\n4.4.4 Model Diagnostic: Check model for homogeneity of variances\nIn the code chunk, check_heteroscedasticity() of performance package.\n\n\nCode\ncheck_h &lt;- check_heteroscedasticity(model1)\n\n\n\n\nCode\nplot(check_h)\n\n\n\n\n\n\n\n4.4.5 Model Check Complete\nWe can also perform the complete by using check_model().\n\n\nCode\ncheck_model(model1)\n\n\n\n\n\n\n\n4.4.6 Visualising Regression on Parameters: see methods\nIn the code below, plot() of see package and parameters() of parameters package is used to visualise the parameters of a regression model.\n\n\nCode\nplot(parameters(model1))\n\n\n\n\n\n\n\nVisualising Regression Parameters: ggcoefstats() methods\nIn the code below, ggcoefstats() of ggstatsplot package to visualise the parameters of a regression model.\n\n\nCode\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(d)/Hands-on_Ex04(d).html",
    "href": "Hands-on_Ex/Hands-on_Ex04(d)/Hands-on_Ex04(d).html",
    "title": "4(d) Final Plots for Comparison",
    "section": "",
    "text": "Funnel plot is a specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. By the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting funnel plots by using funnelPlotR package,\nplotting static funnel plot by using ggplot2 package, and\nplotting interactive funnel plot by using both plotly R and ggplot2 packages"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(d)/Hands-on_Ex04(d).html#funnelplotr-methods-the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04(d)/Hands-on_Ex04(d).html#funnelplotr-methods-the-basic-plot",
    "title": "4(d) Final Plots for Comparison",
    "section": "4.4.1 FunnelPlotR methods: The basic plot",
    "text": "4.4.1 FunnelPlotR methods: The basic plot\nThe code chunk below plots a funnel plot.\n\n\nCode\nfunnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`\n)\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above.\n\ngroup in this function is different from the scatterplot. Here, it defines the level of the points to be plotted i.e. Sub-district, District or City. If Cityc is chosen, there are only six data points.\nBy default, data_type argument is “SR”.\nlimit: Plot limits, accepted values are: 95 or 99, corresponding to 95% or 99.8% quantiles of the distribution."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(d)/Hands-on_Ex04(d).html#funnelplotr-methods-makeover-1",
    "href": "Hands-on_Ex/Hands-on_Ex04(d)/Hands-on_Ex04(d).html#funnelplotr-methods-makeover-1",
    "title": "4(d) Final Plots for Comparison",
    "section": "4.4.2 FunnelPlotR methods: Makeover 1",
    "text": "4.4.2 FunnelPlotR methods: Makeover 1\nTHe code chunk below plots a funnel plot.\n\n\nCode\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\nWarning: The `xrange` argument deprecated; please use the `x_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\nWarning: The `yrange` argument deprecated; please use the `y_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nThings to learn from the code chunk above. + data_type argument is used to change from default “SR” to “PR” (i.e. proportions). + xrange and yrange are used to set the range of x-axis and y-axis"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(d)/Hands-on_Ex04(d).html#funnelplotr-methods-makeover-2",
    "href": "Hands-on_Ex/Hands-on_Ex04(d)/Hands-on_Ex04(d).html#funnelplotr-methods-makeover-2",
    "title": "4(d) Final Plots for Comparison",
    "section": "4.4.3 FunnelPlotR methods: Makeover 2",
    "text": "4.4.3 FunnelPlotR methods: Makeover 2\nThe code chunk below plots a funnel plot.\n\n\nCode\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\nWarning: The `xrange` argument deprecated; please use the `x_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\nWarning: The `yrange` argument deprecated; please use the `y_range` argument\ninstead.  For more options, see the help: `?funnel_plot`\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\nA funnel plot object with 267 points of which 7 are outliers. Plot is adjusted for overdispersion. Things to learn from the code chunk above.\n\nlabel = NA argument is to removed the default label outliers feature.\ntitle argument is used to add plot title.\nx_label and y_label arguments are used to add/edit x-axis and y-axis titles."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(d)/Hands-on_Ex04(d).html#computing-basic-derived-fields",
    "href": "Hands-on_Ex/Hands-on_Ex04(d)/Hands-on_Ex04(d).html#computing-basic-derived-fields",
    "title": "4(d) Final Plots for Comparison",
    "section": "4.5.1 Computing basic derived fields",
    "text": "4.5.1 Computing basic derived fields\nTo plot the funnel plot from scratch, we need to derive cumulative death rate and standard error of cumulative death rate.\n\n\nCode\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\nNext, the fit.mean is computed by using the code chunk below.\n\n\nCode\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(d)/Hands-on_Ex04(d).html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "href": "Hands-on_Ex/Hands-on_Ex04(d)/Hands-on_Ex04(d).html#calculate-lower-and-upper-limits-for-95-and-99.9-ci",
    "title": "4(d) Final Plots for Comparison",
    "section": "4.5.2 Calculate lower and upper limits for 95% and 99.9% CI",
    "text": "4.5.2 Calculate lower and upper limits for 95% and 99.9% CI\nThe code chunk below is used to compute the lower and upper limits for 95% confidence interval.\n\n\nCode\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(d)/Hands-on_Ex04(d).html#plotting-a-static-funnel-plot",
    "href": "Hands-on_Ex/Hands-on_Ex04(d)/Hands-on_Ex04(d).html#plotting-a-static-funnel-plot",
    "title": "4(d) Final Plots for Comparison",
    "section": "4.5.3 Plotting a static funnel plot",
    "text": "4.5.3 Plotting a static funnel plot\nIn the code chunk below, ggplot2 functions are used to plot a static funnel plot.\n\n\nCode\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\n\n\nWarning in geom_point(aes(label = `Sub-district`), alpha = 0.4): Ignoring\nunknown aesthetics: label\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2\n3.5.0.\nℹ Please use the `legend.position.inside` argument of `theme()` instead.\n\n\nCode\np"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(d)/Hands-on_Ex04(d).html#interactive-funnel-plot-plotly-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex04(d)/Hands-on_Ex04(d).html#interactive-funnel-plot-plotly-ggplot2",
    "title": "4(d) Final Plots for Comparison",
    "section": "4.5.4 Interactive Funnel Plot: plotly + ggplot2",
    "text": "4.5.4 Interactive Funnel Plot: plotly + ggplot2\nThe funnel plot created using ggplot2 functions can be made interactive with ggplotly() of plotly r package.\n\n\nCode\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(c)/Hands-on_Ex04(c).html",
    "href": "Hands-on_Ex/Hands-on_Ex04(c)/Hands-on_Ex04(c).html",
    "title": "4(c) Visualising Uncertainty",
    "section": "",
    "text": "Visualising uncertainty is relatively new in statistical graphics. In this chapter, you will gain hands-on experience on creating statistical graphics for visualising uncertainty. By the end of this chapter you will be able:\n\nto plot statistics error bars by using ggplot2,\nto plot interactive error bars by combining ggplot2, plotly and DT,\nto create advanced by using ggdist, and\nto create hypothetical outcome plots (HOPs) by using ungeviz package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(c)/Hands-on_Ex04(c).html#installing-packages",
    "href": "Hands-on_Ex/Hands-on_Ex04(c)/Hands-on_Ex04(c).html#installing-packages",
    "title": "4(c) Visualising Uncertainty",
    "section": "4.2.1 Installing Packages",
    "text": "4.2.1 Installing Packages\nFor the purpose of this exercise, the following R packages will be used, they are:\n\ntidyverse, a family of R packages for data science process,\nplotly for creating interactive plot,\ngganimate for creating animation plot,\nDT for displaying interactive html table,\ncrosstalk for for implementing cross-widget interactions (currently, linked brushing and filtering), and\nggdist for visualising distribution and uncertainty.\n\n\n\nCode\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\nSkipping install of 'ungeviz' from a github remote, the SHA1 (aeae12b0) has not changed since last install.\n  Use `force = TRUE` to force installation\n\n\n\n\nCode\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(c)/Hands-on_Ex04(c).html#data-import",
    "href": "Hands-on_Ex/Hands-on_Ex04(c)/Hands-on_Ex04(c).html#data-import",
    "title": "4(c) Visualising Uncertainty",
    "section": "4.2.2 Data Import",
    "text": "4.2.2 Data Import\n\n\nCode\nexam &lt;- read_csv(\"data/Exam_data.csv\")\n\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(c)/Hands-on_Ex04(c).html#plotting-standard-error-bars-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04(c)/Hands-on_Ex04(c).html#plotting-standard-error-bars-of-point-estimates",
    "title": "4(c) Visualising Uncertainty",
    "section": "4.3.1 Plotting standard error bars of point estimates",
    "text": "4.3.1 Plotting standard error bars of point estimates\nNow we are ready to plot the standard error bars of mean maths score by race as shown below.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by rac\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(c)/Hands-on_Ex04(c).html#plotting-confidence-interval-of-point-estimates",
    "href": "Hands-on_Ex/Hands-on_Ex04(c)/Hands-on_Ex04(c).html#plotting-confidence-interval-of-point-estimates",
    "title": "4(c) Visualising Uncertainty",
    "section": "4.3.2 Plotting confidence interval of point estimates",
    "text": "4.3.2 Plotting confidence interval of point estimates\nInstead of plotting the standard error bar of point estimates, we can also plot the confidence intervals of mean maths score by race.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\nThe error bars are computed by using the formula mean+/-se.\nFor geom_point(), it is important to indicate stat=“identity”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(c)/Hands-on_Ex04(c).html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "href": "Hands-on_Ex/Hands-on_Ex04(c)/Hands-on_Ex04(c).html#visualizing-the-uncertainty-of-point-estimates-with-interactive-error-bars",
    "title": "4(c) Visualising Uncertainty",
    "section": "4.3.3 Visualizing the uncertainty of point estimates with interactive error bars",
    "text": "4.3.3 Visualizing the uncertainty of point estimates with interactive error bars\nIn this section, you will learn how to plot interactive error bars for the 99% confidence interval of mean maths score by race as shown in the figure below.\n\nThe PlotThe Code Chunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(c)/Hands-on_Ex04(c).html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "href": "Hands-on_Ex/Hands-on_Ex04(c)/Hands-on_Ex04(c).html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods",
    "title": "4(c) Visualising Uncertainty",
    "section": "4.4.1 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.4.1 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_pointinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThis function comes with many arguments, students are advised to read the syntax reference for more detail.\n\n\nFor example, in the code chunk below the following arguments are used:\n.width = 0.95 .point = median .interval = qi\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(.width = 0.95,\n  .point = median,\n  .interval = qi) +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\nWarning in layer_slabinterval(data = data, mapping = mapping, stat =\nStatPointinterval, : Ignoring unknown parameters: `.point` and `.interval`"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex04(c)/Hands-on_Ex04(c).html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "href": "Hands-on_Ex/Hands-on_Ex04(c)/Hands-on_Ex04(c).html#visualizing-the-uncertainty-of-point-estimates-ggdist-methods-1",
    "title": "4(c) Visualising Uncertainty",
    "section": "4.4.2 Visualizing the uncertainty of point estimates: ggdist methods",
    "text": "4.4.2 Visualizing the uncertainty of point estimates: ggdist methods\nIn the code chunk below, stat_gradientinterval() of ggdist is used to build a visual for displaying distribution of maths scores by race.\n\n\nCode\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")\n\n\nWarning: The `scale_name` argument of `continuous_scale()` is deprecated as of ggplot2\n3.5.0.\n\n\nWarning: `fill_type = \"gradient\"` is not supported by the current graphics device, which\nis `\"png\"`.\nℹ Falling back to `fill_type = \"segments\"`.\nℹ If you believe your current graphics device does support `fill_type =\n  \"gradient\"` but auto-detection failed, try setting `fill_type = \"gradient\"`\n  explicitly. If this causes the gradient to display correctly, then this\n  warning is likely a false positive caused by the graphics device failing to\n  properly report its support for the `\"LinearGradient\"` pattern via\n  `grDevices::dev.capabilities()`. Consider reporting a bug to the author of\n  the graphics device.\nℹ See the documentation for `fill_type` in `ggdist::geom_slabinterval()` for\n  more information.\n\n\n\n\n\nGentle advice: This function comes with many arguments, students are advised to read the syntax reference for more detail."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(a)/Hands-on_Ex05(a).html",
    "href": "Hands-on_Ex/Hands-on_Ex05(a)/Hands-on_Ex05(a).html",
    "title": "5(a) Creating Ternary Plot with R",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, you will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(a)/Hands-on_Ex05(a).html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex05(a)/Hands-on_Ex05(a).html#the-data",
    "title": "5(a) Creating Ternary Plot with R",
    "section": "5.3.1 The data",
    "text": "5.3.1 The data\nFor the purpose of this hands-on exercise, the Singapore Residents by Planning AreaSubzone, Age Group, Sex and Type of Dwelling, June 2000-2018 data will be used. The data set has been downloaded and included in the data sub-folder of the hands-on exercise folder. It is called respopagsex2000to2018_tidy.csv and is in csv file format."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(a)/Hands-on_Ex05(a).html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex05(a)/Hands-on_Ex05(a).html#importing-data",
    "title": "5(a) Creating Ternary Plot with R",
    "section": "5.3.2 Importing Data",
    "text": "5.3.2 Importing Data\nTo import respopagsex2000to2018_tidy.csv into R, read_csv() function of readr packadge will be used.\n\n\nCode\n#Reading the data into R environment\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\n\nRows: 108126 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): PA, SZ, AG\ndbl (2): Year, Population\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(a)/Hands-on_Ex05(a).html#preparing-data",
    "href": "Hands-on_Ex/Hands-on_Ex05(a)/Hands-on_Ex05(a).html#preparing-data",
    "title": "5(a) Creating Ternary Plot with R",
    "section": "5.3.3 Preparing Data",
    "text": "5.3.3 Preparing Data\nNext, use the mutate() function of dplyr package to derive three new measures, namely: young, active, and old.\n\n\nCode\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(a)/Hands-on_Ex05(a).html#plotting-a-static-ternary-diagram",
    "href": "Hands-on_Ex/Hands-on_Ex05(a)/Hands-on_Ex05(a).html#plotting-a-static-ternary-diagram",
    "title": "5(a) Creating Ternary Plot with R",
    "section": "5.4.1 Plotting a static ternary diagram",
    "text": "5.4.1 Plotting a static ternary diagram\nUse ggtern() function of ggtern package to create a simple ternary plot.\n\n\nCode\n#Building the static ternary plot\n#ggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  #geom_point()\n\n\n\n\nCode\n#Building the static ternary plot\n#ggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  #geom_point() +\n  #labs(title=\"Population structure, 2015\") +\n  #theme_rgbw()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(a)/Hands-on_Ex05(a).html#plotting-an-interactive-ternary-diagram",
    "href": "Hands-on_Ex/Hands-on_Ex05(a)/Hands-on_Ex05(a).html#plotting-an-interactive-ternary-diagram",
    "title": "5(a) Creating Ternary Plot with R",
    "section": "5.4.2 Plotting an interactive ternary diagram",
    "text": "5.4.2 Plotting an interactive ternary diagram\nThe code below create an interactive ternary plot using plot_ly() function of Plotly R.*\n\n\nCode\n# reusable function for creating annotation object\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )\n\n\nNo scatterternary mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -&gt; https://plotly.com/r/reference/#scatter-mode"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html",
    "href": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html",
    "title": "5(b) Visual Correlation Analysis",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using pairs() of R Graphics. Next, you will learn how to plot corrgram using corrplot package of R. Lastly, you will learn how to create an interactive correlation matrix using plotly R."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#importing-data",
    "title": "5(b) Visual Correlation Analysis",
    "section": "5.3.1 Importing Data",
    "text": "5.3.1 Importing Data\nFirst, let us import data through read_csv() of readr package.\n\n\nCode\nwine &lt;- read_csv(\"data/wine_quality.csv\")\n\n\nRows: 6497 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (1): type\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nNotice that beside quality and type, the rest of the variables are numerical and continuous data type."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#building-a-basic-correlation-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#building-a-basic-correlation-matrix",
    "title": "5(b) Visual Correlation Analysis",
    "section": "5.4.1 Building a basic correlation matrix",
    "text": "5.4.1 Building a basic correlation matrix\nFigure below shows the scatter plot matrix of Wine Quality Data. It is a 11 by 11 matrix.\n\n\nCode\npairs(wine[,1:11])\n\n\n\n\n\nThe required input of pairs() can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default pairs function. Columns 2 to 12 of wine dataframe is used to build the scatterplot matrix. The variables are: fixed acidity, volatile acidity, citric acid, residual sugar, chlorides, free sulfur dioxide, total sulfur dioxide, density, pH, sulphates and alcohol.\n\n\nCode\npairs(wine[,2:12])"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#drawing-the-lower-corner",
    "href": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#drawing-the-lower-corner",
    "title": "5(b) Visual Correlation Analysis",
    "section": "5.4.2 Drawing the lower corner",
    "text": "5.4.2 Drawing the lower corner\npairs function of R Graphics provided many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.\nTo show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.\n\n\nCode\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\nSimilarly, you can display the upper half of the correlation matrix by using the code chun below.\n\n\nCode\npairs(wine[,2:12], lower.panel = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#including-with-correlation-coefficients",
    "href": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#including-with-correlation-coefficients",
    "title": "5(b) Visual Correlation Analysis",
    "section": "5.4.3 Including with correlation coefficients",
    "text": "5.4.3 Including with correlation coefficients\nTo show the correlation coefficient of each pair of variables instead of a scatter plot, panel.cor function will be used. This will also show higher correlations in a larger font.\nDon’t worry about the details for now-just type this code into your R session or script. Let’s have more fun way to display the correlation matrix.\n\n\nCode\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter\n\nWarning in par(usr): argument 1 does not name a graphical parameter"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#the-basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#the-basic-plot",
    "title": "5(b) Visual Correlation Analysis",
    "section": "5.5.1 The Basic Plot",
    "text": "5.5.1 The Basic Plot\nOn of the advantage of using ggcorrmat() over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\n\nCode\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\nCode\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\nThings to learn from the code chunk above:\n\ncor.vars argument is used to compute the correlation matrix needed to build the corrgram.\nggcorrplot.args argument provide additional (mostly aesthetic) arguments that will be passed to ggcorrplot::ggcorrplot function. The list should avoid any of the following arguments since they are already internally being used: corr, method, p.mat, sig.level, ggtheme, colors, lab, pch, legend.title, digits.\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\n\nCode\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#getting-started-with-corrplot",
    "href": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#getting-started-with-corrplot",
    "title": "5(b) Visual Correlation Analysis",
    "section": "5.7.1 Getting started with corrplot",
    "text": "5.7.1 Getting started with corrplot\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\n\nCode\nwine.cor &lt;- cor(wine[, 1:11])\n\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\n\nCode\ncorrplot(wine.cor)\n\n\n\n\n\nNotice that the default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as saturation is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#working-with-visual-geometrics",
    "href": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#working-with-visual-geometrics",
    "title": "5(b) Visual Correlation Analysis",
    "section": "5.7.2 Working with visual geometrics",
    "text": "5.7.2 Working with visual geometrics\nIn corrplot package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the method argument as shown in the code chunk below.\n\n\nCode\ncorrplot(wine.cor, \n         method = \"ellipse\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#working-with-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#working-with-layouts",
    "title": "5(b) Visual Correlation Analysis",
    "section": "5.7.3 Working with Layouts",
    "text": "5.7.3 Working with Layouts\ncorrplor() supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the type argument of corrplot().\n\n\nCode\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\nThe default layout of the corrgram can be further customised. For example, arguments diag and tl.col are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code chunk and figure below.\n\n\nCode\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\nPlease feel free to experiment with other layout design argument such as tl.pos, tl.cex, tl.offset, cl.pos, cl.cex and cl.offset, just to mention a few of them."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#working-with-mixed-layout",
    "href": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#working-with-mixed-layout",
    "title": "5(b) Visual Correlation Analysis",
    "section": "5.7.4 Working with mixed layout",
    "text": "5.7.4 Working with mixed layout\nWith corrplot package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the corrplot.mixed(), a wrapped function for mixed visualisation style will be used.\nFigure below shows a mixed layout corrgram plotted using wine quality data.\n\n\nCode\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\nThe code chunk used to plot the corrgram are shown below.\n\n\nCode\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\nNotice that argument lower and upper are used to define the visualisation method used. In this case ellipse is used to map the lower half of the corrgram and numerical matrix (i.e. number) is used to map the upper half of the corrgram. The argument tl.pos, on the other, is used to specify the placement of the axis label. Lastly, the diag argument is used to specify the glyph on the principal diagonal of the corrgram."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#combining-corrgram-with-the-significant-test",
    "href": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#combining-corrgram-with-the-significant-test",
    "title": "5(b) Visual Correlation Analysis",
    "section": "5.7.5 Combining corrgram with the significant test",
    "text": "5.7.5 Combining corrgram with the significant test\nIn statistical analysis, we are also interested to know which pair of variables their correlation coefficients are statistically significant.\nFigure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.\n With corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\n\nCode\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\n\nCode\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#reorder-a-corrgram",
    "href": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#reorder-a-corrgram",
    "title": "5(b) Visual Correlation Analysis",
    "section": "5.7.6 Reorder a corrgram",
    "text": "5.7.6 Reorder a corrgram\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplot package support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\n\nCode\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#reordering-a-correlation-matrix-using-hclust",
    "href": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#reordering-a-correlation-matrix-using-hclust",
    "title": "5(b) Visual Correlation Analysis",
    "section": "5.7.7 Reordering a correlation matrix using hclust",
    "text": "5.7.7 Reordering a correlation matrix using hclust\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\n\nCode\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex05(b)/Hands-on_Ex05(b).html#r-packages",
    "title": "5(b) Visual Correlation Analysis",
    "section": "5.8.1 R Packages",
    "text": "5.8.1 R Packages\n\nggcormat() of ggstatsplot package\nggscatmat and ggpairs of GGally.\ncorrplot. A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.\ncorrgram calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html",
    "href": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html",
    "title": "5(c) Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, you will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html#preparing-and-transforming-data-frame-into-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html#preparing-and-transforming-data-frame-into-matrix",
    "title": "5(c) Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.3.1 Preparing and Transforming Data frame into matrix",
    "text": "5.3.1 Preparing and Transforming Data frame into matrix\nChange the rows by country name instead of row number by using the code chunk below\n\n\nCode\nrow.names(wh) &lt;- wh$Country\n\n\nWarning: Setting row names on a tibble is deprecated.\n\n\nNext, the data was loaded into a data frame, but it has to be a data matrix to make your heatmap.\nThe code chunk below will be used to transform wh data frame into a data matrix.\n\n\nCode\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html#working-with-heatmaply",
    "href": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html#working-with-heatmaply",
    "title": "5(c) Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.5.1 Working with heatmaply",
    "text": "5.5.1 Working with heatmaply\n\n\nCode\nheatmaply(mtcars)\n\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\n\nCode\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\nNote that:\n\nDifferent from heatmap(), for heatmaply() the default horizontal dendrogram is placed on the left hand side of the heatmap.\nThe text label of each raw, on the other hand, is placed on the right hand side of the heat map.\nWhen the x-axis marker labels are too long, they will be rotated by 135 degree from the north."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html#data-transformation",
    "href": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html#data-transformation",
    "title": "5(c) Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.5.2 Data Transformation",
    "text": "5.5.2 Data Transformation\nWhen analysing multivariate data set, it is very common that the variables in the data sets includes values that reflect different types of measurement. In general, these variables’ values have their own range. In order to ensure that all the variables have comparable values, data transformation are commonly used before clustering.\nThree main data transformation methods are supported by heatmaply(), namely: scale, normalise and percentile.\n\n5.5.2.1 Scaling Method\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\nThe code chunk below is used to scale varibale values colunmwise.\n\n\nCode\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\n\n5.5.2.2 Normalising Method\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\n5.5.2.3 Percentising Method\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\n\nCode\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html#clustering-algorithm",
    "href": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html#clustering-algorithm",
    "title": "5(c) Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.5.3 Clustering Algorithm",
    "text": "5.5.3 Clustering Algorithm\n8heatmaply* supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated etiher manually or statistically."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html#manual-approach",
    "href": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html#manual-approach",
    "title": "5(c) Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.5.4 Manual Approach",
    "text": "5.5.4 Manual Approach\nIn the code chunk below, the heatmap is plotted by using hierachical clustering algorithm with “Euclidean distance” and “ward.D” method.\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html#statistical-approach",
    "href": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html#statistical-approach",
    "title": "5(c) Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.5.5 Statistical Approach",
    "text": "5.5.5 Statistical Approach\nIn order to determine the best clustering method and number of cluster the dend_expend() and find_k() functions of dendextend package will be used.\n\n\nCode\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\nThe output table shows that “average” method should be used because it gave the high optimum value.\nNext, find_k() is used to determine the optimal number of cluster.\n\n\nCode\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\nFigure above shows that k=3 would be good.\nWith reference to the statistical analysis results, we can prepare the code chunk as shown below.\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html#seriation",
    "href": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html#seriation",
    "title": "5(c) Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.5.6 Seriation",
    "text": "5.5.6 Seriation\nOne of the problems with hierarchical clustering is that it doesn’t actually place the rows in a definite order, it merely constrains the space of possible orderings. Take three items A, B and C. If you ignore reflections, there are three possible orderings: ABC, ACB, BAC. If clustering them gives you ((A+B)+C) as a tree, you know that C can’t end up between A and B, but it doesn’t tell you which way to flip the A+B cluster. It doesn’t tell you if the ABC ordering will lead to a clearer-looking heatmap than the BAC ordering.\nheatmaply uses the seriation package to find an optimal ordering of rows and columns. Optimal means to optimize the Hamiltonian path length that is restricted by the dendrogram structure. This, in other words, means to rotate the branches so that the sum of distances between each adjacent leaf (label) will be minimized. This is related to a restricted version of the travelling salesman problem.\nHere we meet our first seriation algorithm: Optimal Leaf Ordering (OLO). This algorithm starts with the output of an agglomerative clustering algorithm and produces a unique ordering, one that flips the various branches of the dendrogram around so as to minimize the sum of dissimilarities between adjacent leaves. Here is the result of applying Optimal Leaf Ordering to the same clustering result as the heatmap above.\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\n\nThe default options is “OLO” (Optimal leaf ordering) which optimizes the above criterion (in O(n^4)). Another option is “GW” (Gruvaeus and Wainer) which aims for the same goal but uses a potentially faster heuristic.\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\nRegistered S3 method overwritten by 'gclus':\n  method         from     \n  reorder.hclust seriation\n\n\n\n\n\n\nThe option “none” gives us the dendrograms without any rotation that is based on the data matrix.\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html#working-with-colour-palettes",
    "href": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html#working-with-colour-palettes",
    "title": "5(c) Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.5.7 Working with Colour Palettes",
    "text": "5.5.7 Working with Colour Palettes\nThe default colour palette uses by heatmaply is viridis. heatmaply users, however, can use other colour palettes in order to improve the aestheticness and visual friendliness of the heatmap.\nIn the code chunk below, the Blues colour palette of rColorBrewer is used\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html#the-finishing-touch",
    "href": "Hands-on_Ex/Hands-on_Ex05(c)/Hands-on_Ex05(c).html#the-finishing-touch",
    "title": "5(c) Heatmap for Visualising and Analysing Multivariate Data",
    "section": "5.5.8 The Finishing Touch",
    "text": "5.5.8 The Finishing Touch\nBeside providing a wide collection of arguments for meeting the statistical analysis needs, heatmaply also provides many plotting features to ensure cartographic quality heatmap can be produced.\nIn the code chunk below the following arguments are used:\n\nk_row is used to produce 5 groups.\nmargins is used to change the top margin to 60 and row margin to 200.\nfontsizw_row and fontsize_col are used to change the font size for row and column labels to 4.\nmain is used to write the main title of the plot.\nxlab and ylab are used to write the x-axis and y-axis labels respectively.\n\n\n\nCode\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(d)/Hands-on_Ex05(d).html",
    "href": "Hands-on_Ex/Hands-on_Ex05(d)/Hands-on_Ex05(d).html",
    "title": "5(d) Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few (2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\nBy the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting statistic parallel coordinates plots by using ggparcoord() of GGally package,\nplotting interactive parallel coordinates plots by using parcoords package, and\nplotting interactive parallel coordinates plots by using parallelPlot package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(d)/Hands-on_Ex05(d).html#plotting-a-simple-parallel-coordinates",
    "href": "Hands-on_Ex/Hands-on_Ex05(d)/Hands-on_Ex05(d).html#plotting-a-simple-parallel-coordinates",
    "title": "5(d) Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.4.1 Plotting a simple parallel coordinates",
    "text": "5.4.1 Plotting a simple parallel coordinates\nSee code chunk below:\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\nNotice that only two argument namely data and columns is used. Data argument is used to map the data object (i.e. wh) and columns is used to select the columns for preparing the parallel coordinates plot."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(d)/Hands-on_Ex05(d).html#plotting-a-parallel-coordinates-with-boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex05(d)/Hands-on_Ex05(d).html#plotting-a-parallel-coordinates-with-boxplot",
    "title": "5(d) Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.4.2 Plotting a parallel coordinates with boxplot",
    "text": "5.4.2 Plotting a parallel coordinates with boxplot\nThe basic parallel coordinates failed to reveal any meaning understanding of the World Happiness measures. In this section, you will learn how to makeover the plot by using a collection of arguments provided by ggparcoord().\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\nThings to learn from the code chunk above.\n\ngroupColumn argument is used to group the observations (i.e. parallel lines) by using a single variable (i.e. Region) and colour the parallel coordinates lines by region name.\nscale argument is used to scale the variables in the parallel coordinate plot by using uniminmax method. The method univariately scale each variable so the minimum of the variable is zero and the maximum is one.\nalphaLines argument is used to reduce the intensity of the line colour to 0.2. The permissible value range is between 0 to 1.\nboxplot argument is used to turn on the boxplot by using logical TRUE. The default is FALSE.\ntitle argument is used to provide the parallel coordinates plot a title."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(d)/Hands-on_Ex05(d).html#parallel-coordinates-with-facet",
    "href": "Hands-on_Ex/Hands-on_Ex05(d)/Hands-on_Ex05(d).html#parallel-coordinates-with-facet",
    "title": "5(d) Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.4.3 Parallel Coordinates with Facet",
    "text": "5.4.3 Parallel Coordinates with Facet\nSince ggparcoord() is developed by extending ggplot2 package, we can combination use some of the ggplot2 function when plotting a parallel coordinates plot.\nIn the code chunk below, facet_wrap() of ggplot2 is used to plot 10 small multiple parallel coordinates plots. Each plot represent one geographical region such as East Asia.\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\nOne of the aesthetic defect of the current design is that some of the variable names overlap on x-axis."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(d)/Hands-on_Ex05(d).html#rotating-x-axis-text-label",
    "href": "Hands-on_Ex/Hands-on_Ex05(d)/Hands-on_Ex05(d).html#rotating-x-axis-text-label",
    "title": "5(d) Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.4.4 Rotating x-axis text label",
    "text": "5.4.4 Rotating x-axis text label\nTo make the x-axis text label easy to read, let us rotate the labels by 30 degrees. We can rotate axis text labels using theme() function in ggplot2 as shown in the code chunk below.\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\nThing to learn from the code chunk above:\nTo rotate x-axis text labels, we use axis.text.x as argument to theme() function. And we specify element_text(angle = 30) to rotate the x-axis text by an angle 30 degree."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(d)/Hands-on_Ex05(d).html#adjusting-the-rotated-x-xis-text-label",
    "href": "Hands-on_Ex/Hands-on_Ex05(d)/Hands-on_Ex05(d).html#adjusting-the-rotated-x-xis-text-label",
    "title": "5(d) Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.4.5 Adjusting the rotated x-xis text label",
    "text": "5.4.5 Adjusting the rotated x-xis text label\nRotating x-axis text labels to 30 degrees makes the label overlap with the plot and we can avoid this by adjusting the text location using hjust argument to theme’s text element with element_text(). We use axis.text.x as we want to change the look of x-axis text.\n\n\nCode\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(d)/Hands-on_Ex05(d).html#basic-plot",
    "href": "Hands-on_Ex/Hands-on_Ex05(d)/Hands-on_Ex05(d).html#basic-plot",
    "title": "5(d) Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.5.1 Basic Plot",
    "text": "5.5.1 Basic Plot\nThe code chunk below plot an interactive parallel coordinates plot by using parallelPlot().\n\n\nCode\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(d)/Hands-on_Ex05(d).html#rotate-axis-label-changing-colour-scheme-and-plot-with-histogram",
    "href": "Hands-on_Ex/Hands-on_Ex05(d)/Hands-on_Ex05(d).html#rotate-axis-label-changing-colour-scheme-and-plot-with-histogram",
    "title": "5(d) Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "5.5.2 Rotate Axis Label, Changing Colour Scheme and Plot with histogram",
    "text": "5.5.2 Rotate Axis Label, Changing Colour Scheme and Plot with histogram\nThe Combined code Chunk as stated below:\n\n\nCode\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\n\nCode\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\nCode\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html",
    "href": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html",
    "title": "5(e) Treemap Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experiences on designing treemap using appropriate R packages. The hands-on exercise consists of three main section. First, you will learn how to manipulate transaction data into a treemap strcuture by using selected functions provided in dplyr package. Then, you will learn how to plot static treemap by using treemap package. In the third section, you will learn how to design interactive treemap by using d3treeR package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#data-wrangling-1",
    "href": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#data-wrangling-1",
    "title": "5(e) Treemap Visualisation with R",
    "section": "5.3.1 Data Wrangling",
    "text": "5.3.1 Data Wrangling\n\n\nCode\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\n\nRows: 23205 Columns: 20\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (12): Project Name, Address, Type of Area, Nett Price($), Sale Date, Pro...\ndbl  (8): No. of Units, Area (sqm), Transacted Price ($), Unit Price ($ psm)...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#data-manipulation",
    "href": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#data-manipulation",
    "title": "5(e) Treemap Visualisation with R",
    "section": "5.3.2 Data Manipulation",
    "text": "5.3.2 Data Manipulation\nFor data Manipulation: The data.frame realis2018 is in transaction record form, which is highly dis-aggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and compute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively. Two key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained. grouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables. mutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”). sample_n() and sample_frac() sample the specified number/fraction of rows in each group. summarise() computes the summary for each group. In our case, group_by() will used together with summarise() to derive the summarised data.frame.\n\n\nCode\nlibrary(dplyr)\n# This step might include filtering out missing values, correcting data types, etc.\n# Example: Filtering out transactions with missing unit prices or transacted prices\nrealis2018 &lt;- realis2018 %&gt;%\n  filter(!is.na(`Unit Price ($ psm)`) & !is.na(`Transacted Price ($)`))\n\n# Grouping and summarizing the data\nrealis2018_grouped &lt;- realis2018 %&gt;%\n  group_by(`Project Name`, `Planning Region`, `Planning Area`, `Property Type`, `Type of Sale`) %&gt;%\n  summarise(\n    `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n    `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n    `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n    `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE)\n  )\n\n\n`summarise()` has grouped output by 'Project Name', 'Planning Region',\n'Planning Area', 'Property Type'. You can override using the `.groups`\nargument.\n\n\n\nStudents who are new to dplyr methods should consult Introduction to dplyr before moving on to the next section."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#grouped-summaries-without-pipe",
    "href": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#grouped-summaries-without-pipe",
    "title": "5(e) Treemap Visualisation with R",
    "section": "5.3.3 Grouped Summaries without Pipe",
    "text": "5.3.3 Grouped Summaries without Pipe\nCode Chunk Below:\n\n\nCode\nrealis2018_grouped &lt;- group_by(realis2018, `Project Name`,\n                               `Planning Region`, `Planning Area`, \n                               `Property Type`, `Type of Sale`)\nrealis2018_summarised &lt;- summarise(realis2018_grouped, \n                          `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),\n                          `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n                          `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE), \n                          `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n`summarise()` has grouped output by 'Project Name', 'Planning Region',\n'Planning Area', 'Property Type'. You can override using the `.groups`\nargument."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#grouped-summaries-with-the-pipe",
    "href": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#grouped-summaries-with-the-pipe",
    "title": "5(e) Treemap Visualisation with R",
    "section": "5.3.4 Grouped summaries with the pipe",
    "text": "5.3.4 Grouped summaries with the pipe\n\n\nCode\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))\n\n\n`summarise()` has grouped output by 'Project Name', 'Planning Region',\n'Planning Area', 'Property Type'. You can override using the `.groups`\nargument."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#basic-arguments",
    "href": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#basic-arguments",
    "title": "5(e) Treemap Visualisation with R",
    "section": "5.4.1 Basic Arguments",
    "text": "5.4.1 Basic Arguments\nThe code chunk below designed a treemap by using three core arguments of treemap(), namely: index, vSize and vColor.\n\n\nCode\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nThings to learn from the three arguments used:\n\nindex The index vector must consist of at least two column names or else no hierarchy treemap will be plotted. If multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.\nvSize The column must not contain negative values. This is because it’s vaues will be used to map the sizes of the rectangles of the treemaps. :::callout-Warning\n\nThe treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensity showing, in our case, median unit prices.\nFor treemap(), vColor is used in combination with the argument type to determines the colours of the rectangles. Without defining type, like the code chunk above, treemap() assumes type = index, in our case, the hierarchy of planning areas.\n:::"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#working-with-vcolor-and-type-arguments",
    "href": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#working-with-vcolor-and-type-arguments",
    "title": "5(e) Treemap Visualisation with R",
    "section": "5.4.2 Working with vColor and type arguments",
    "text": "5.4.2 Working with vColor and type arguments\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nThinking to learn from the conde chunk above.\n\nThe rectangles are coloured with different intensity of green, reflecting their respective median unit prices.\nThe legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#colour-in-treemap-and-value-type",
    "href": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#colour-in-treemap-and-value-type",
    "title": "5(e) Treemap Visualisation with R",
    "section": "5.4.3 Colour in treemap and “value” type",
    "text": "5.4.3 Colour in treemap and “value” type\nThere are two arguments that determine the mapping to color palettes: mapping and palette. The only difference between “value” and “manual” is the default value for mapping. The “value” treemap considers palette to be a diverging color palette (say ColorBrewer’s “RdYlBu”), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color. The “manual” treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.\nThe code chunk below shows a value type treemap.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nThing to learn from the code chunk above:\nalthough the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive. The reason why we see only 5000 to 45000 in the legend is because the range argument is by default c(min(values, max(values)) with some pretty rounding."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#the-manual-type-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#the-manual-type-treemap",
    "title": "5(e) Treemap Visualisation with R",
    "section": "5.4.4 The “manual” type treemap",
    "text": "5.4.4 The “manual” type treemap\nThe “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.\nThe code chunk below shows a manual type treemap.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nThings to learn from the code chunk above:\nThe colour scheme used is very copnfusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative To overcome this problem, a single colour palette such as Blues should be used.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#treemap-layout-algorithm-argument-and-using-sortid",
    "href": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#treemap-layout-algorithm-argument-and-using-sortid",
    "title": "5(e) Treemap Visualisation with R",
    "section": "5.4.5 Treemap layout, algorithm argument and using sortID",
    "text": "5.4.5 Treemap layout, algorithm argument and using sortID\ntreemap() supports two popular treemap layouts, namely: “squarified” and “pivotSize”. The default is “pivotSize”.\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.\nThe code chunk below plots a squarified treemap by changing the algorithm argument.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nWhen “pivotSize” algorithm is used, sortID argument can be used to dertemine the order in which the rectangles are placed from top left to bottom right.\n\n\nCode\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"pivotSize\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#installing-d3treer-package",
    "href": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#installing-d3treer-package",
    "title": "5(e) Treemap Visualisation with R",
    "section": "5.6.1 Installing d3treeR package",
    "text": "5.6.1 Installing d3treeR package\nThis slide shows you how to install a R package which is not available in cran.\n\nIf this is the first time you install a package from github, you should install devtools package by using the code below or else you can skip this step.\nNext, you will load the devtools library and install the package found in github by using the codes below.\n\n\n\nCode\nlibrary(devtools)\n\n\nLoading required package: usethis\n\n\nCode\ninstall_github(\"timelyportfolio/d3treeR\")\n\n\nSkipping install of 'd3treeR' from a github remote, the SHA1 (ebb833db) has not changed since last install.\n  Use `force = TRUE` to force installation\n\n\n\nlaunch d3treeR package\n\n\n\nCode\nlibrary(d3treeR)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#designing-an-interactive-treemap",
    "href": "Hands-on_Ex/Hands-on_Ex05(e)/Hands-On_Ex05(e).html#designing-an-interactive-treemap",
    "title": "5(e) Treemap Visualisation with R",
    "section": "5.6.2 Designing An Interactive Treemap",
    "text": "5.6.2 Designing An Interactive Treemap\nThe codes below perform two processes.\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\nCode\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\nCode\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "6 Visualising and Analysing Time-oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-the-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-the-calendar-heatmaps",
    "title": "6 Visualising and Analysing Time-oriented Data",
    "section": "6.4.1 Building the Calendar Heatmaps",
    "text": "6.4.1 Building the Calendar Heatmaps\n\n\nCode\n#|warning: FALSE\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call(C_textBounds, as.graphicsAnnot(x$label), x$x, x$y, : font\nfamily not found in Windows font database\n\n\nWarning in grid.Call(C_stringMetric, as.graphicsAnnot(x$label)): font family\nnot found in Windows font database\n\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\nWarning in grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y, :\nfont family not found in Windows font database\n\n\n\n\n\n::: callout-Things to Learn - a tibble data table called grouped is derived by aggregating the attack by wkday and hour fields. - a new field called n is derived by using group_by() and count() functions. - na.omit() is used to exclude missing value. - geom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles. - theme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot. - coord_equal() is used to ensure the plot will have an aspect ratio of 1:1. - scale_fill_gradient() function is used to creates a two colour gradient (low-high). :::\nThen we can simply group the count by hour and wkday and plot it, since we know that we have values for every combination there’s no need to further preprocess the data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-multiple-calendar-heatmaps",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#building-multiple-calendar-heatmaps",
    "title": "6 Visualising and Analysing Time-oriented Data",
    "section": "6.4.2 Building Multiple Calendar Heatmaps",
    "text": "6.4.2 Building Multiple Calendar Heatmaps\nChallenge: Building multiple heatmaps for the top four countries with the highest number of attacks.\nStep 1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\n\nCode\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\n\nStep 2: Preparing the tidy data frame\nIn this step, you are required to extract the attack records of the top 4 countries from attacks data frame and save the data in a new tibble data frame (i.e. top4_attacks).\n\n\nCode\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n\nStep 3: Plotting the Multiple Calender Heatmap by using ggplot2 package.\n\n\nCode\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html",
    "href": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html",
    "title": "7a Chloropleth Mapping with R",
    "section": "",
    "text": "Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\nIn this chapter, you will learn how to plot functional and truthful choropleth maps by using an R package called tmap package.\nIt is advisable for you to read the functional description of each function before using them."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#the-data",
    "title": "7a Chloropleth Mapping with R",
    "section": "7.3.1 The Data",
    "text": "7.3.1 The Data\nTwo data set will be used to create the choropleth map. They are:\n\nMaster Plan 2014 Subzone Boundary (Web) (i.e. MP14_SUBZONE_WEB_PL) in ESRI shapefile format. It can be downloaded at data.gov.sg This is a geospatial data. It consists of the geographical boundary of Singapore at the planning subzone level. The data is based on URA Master Plan 2014.\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 in csv format (i.e. respopagesextod2011to2020.csv). This is an aspatial data file. It can be downloaded at Department of Statistics, Singapore Although it does not contain any coordinates values, but it’s PA and SZ fields can be used as unique identifiers to geocode to MP14_SUBZONE_WEB_PL shapefile."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#importing-geospatial-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#importing-geospatial-data-into-r",
    "title": "7a Chloropleth Mapping with R",
    "section": "7.3.2 Importing Geospatial Data into R",
    "text": "7.3.2 Importing Geospatial Data into R\nThe code chunk below uses the st_read() function of sf package to import MP14_SUBZONE_WEB_PL shapefile into R as a simple feature data frame called mpsz.\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\",\n                layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\FirGhaz\\ISSS608-VAA\\Hands-on_Ex\\Hands-on_Ex07(a)\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nYou can examine the content of mpsz by using the code chunk below.\n\nmpsz\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29..."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#importing-attribute-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#importing-attribute-data-into-r",
    "title": "7a Chloropleth Mapping with R",
    "section": "7.3.3 Importing Attribute Data into R",
    "text": "7.3.3 Importing Attribute Data into R\nNext, we will import respopagsex2011to2020.csv file into RStudio and save the file into an R dataframe called popagsex.\nThe task will be performed by using read_csv() function of readr package as shown in the code chunk below.\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#data-preparation",
    "title": "7a Chloropleth Mapping with R",
    "section": "7.3.4 Data Preparation",
    "text": "7.3.4 Data Preparation\nBefore a thematic map can be prepared, you are required to prepare a data table with year 2020 values. The data table should include the variables PA, SZ, YOUNG, ECONOMY ACTIVE, AGED, TOTAL, and DEPENDENCY.\n\nYOUNG: age group 0 to 4 until age group 20 to 24,\nECONOMY ACTIVE: age group 25-29 until age group 60-64,\nAGED: age group 65 and above,\nTOTAL: all age groups, and\nDEPENDENCY: the ratio between young and aged against the economy active group\n\n\n7.3.4.1 Data Wrangling\nThe following data wrangling and transformation functions will be used:\n\npivot_wider() of tidyr package, and\nmutate(), filter(), group_by() and select() of dplyr package\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\n7.3.4.2 Joining the attribute data and geospatial data\nBefore we can perform the georelational join, one extra step is required to convert the values in PA and SZ fields to uppercase. This is because the values of PA and SZ fields are made up of upper- and lowercase. On the other, hand the SUBZONE_N and PLN_AREA_N are in uppercase.\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nNext, left_join() of dplyr is used to join the geographical data and attribute table using planning subzone name e.g. SUBZONE_N and SZ as the common identifier.\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nThings to learn from the code chunk above:\n\nleft_join() of dplyr package is used with mpsz simple feature data frame as the left data table is to ensure that the output will be a simple features data frame.\n\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#plotting-a-chloropeth-map-quickly-by-using-qtm",
    "href": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#plotting-a-chloropeth-map-quickly-by-using-qtm",
    "title": "7a Chloropleth Mapping with R",
    "section": "7.4.1 Plotting a chloropeth map quickly by using qtm()",
    "text": "7.4.1 Plotting a chloropeth map quickly by using qtm()\nThe easiest and quickest to draw a choropleth map using tmap is using qtm(). It is concise and provides a good default visualisation in many cases.\nThe code chunk below will draw a cartographic standard choropleth map as shown below.\n\ntmap_mode(\"plot\")\nqtm(mpsz_pop2020, \n    fill = \"DEPENDENCY\")\n\n\n\n\nThings to learn from the code chunk above:\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\nfill argument is used to map the attribute (i.e. DEPENDENCY)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#creating-a-chloropleth-map-by-using-tmaps-elements",
    "href": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#creating-a-chloropleth-map-by-using-tmaps-elements",
    "title": "7a Chloropleth Mapping with R",
    "section": "7.4.2 Creating a chloropleth map by using tmap’s elements",
    "text": "7.4.2 Creating a chloropleth map by using tmap’s elements\nDespite its usefulness in drawing a choropleth map quickly and easily, the disadvantage of· qtm()· is that it makes theaesthetics of individual layers harder to control. To draw a high-quality cartographic choropleth map as shown in the figure below, tmap’s drawing elements should be used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nIn the following sub-section, we will share with youtmap functions that used to plot these elements.\n\n7.4.2.1 Drawing a base map\nThe basic building block of tmap is tm_shape() followed by one or more layer elemments such as tm_fill() and tm_polygons().\nIn the code chunk below, tm_shape() is used to define the input data (i.e mpsz_pop2020) and tm_polygons() is used to draw the planning subzone polygons\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n7.4.2.2 Drawing a chloropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign the target variable such as Dependency to tm_polygons().\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\nThings to learn from tm_polygons():\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\n7.4.2.3 Drawing a chloropleth map using tm_fill() and tm_border()\nActually, tm_polygons() is a wraper of tm_fill() and tm_border(). tm_fill() shades the polygons by using the default colour scheme and tm_borders() adds the borders of the shapefile onto the choropleth map.\nThe code chunk below draws a choropleth map by using tm_fill() alone.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\nNotice that the planning subzones are shared according to the respective dependecy values\nTo add the boundary of the planning subzones, tm_borders will be used as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\nNotice that light-gray border lines have been added on the choropleth map.\nThe alpha argument is used to define transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nBeside alpha argument, there are three other arguments for tm_borders(), they are:\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is “solid”."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#data-classification-methods-of-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#data-classification-methods-of-tmap",
    "title": "7a Chloropleth Mapping with R",
    "section": "7.4.3 Data Classification methods of tmap",
    "text": "7.4.3 Data Classification methods of tmap\nMost choropleth maps employ some methods of data classification. The point of classification is to take a large number of observations and group them into data ranges or classes.\ntmap provides a total ten data classification methods, namely: fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks.\nTo define a data classification method, the style argument of tm_fill() or tm_polygons() will be used.\n\n7.4.3.1 Plotting chloropleth maps with built-in classification methods\nThe code chunk below shows a quantile data classification that used 5 classes.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nIn the code chunk below, equal data classification method is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNotice that the distribution of quantile data classification method are more evenly distributed then equal data classification method.\n\n\n7.4.3.2 Plotting chloropleth map with costume break\nFor all the built-in styles, the category breaks are computed internally. In order to override these defaults, the breakpoints can be set explicitly by means of the breaks argument to the tm_fill(). It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\nBefore we get started, it is always a good practice to get some descriptive statistics on the variable before setting the break points. Code chunk below will be used to compute and display the descriptive statistics of DEPENDENCY field.\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nWith reference to the results above, we set break point at 0.60, 0.70, 0.80, and 0.90. In addition, we also need to include a minimum and maximum, which we set at 0 and 100. Our breaks vector is thus c(0, 0.60, 0.70, 0.80, 0.90, 1.00)\nNow, we will plot the choropleth map by using the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#colour-scheme",
    "href": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#colour-scheme",
    "title": "7a Chloropleth Mapping with R",
    "section": "7.4.4 Colour Scheme",
    "text": "7.4.4 Colour Scheme\ntmap supports colour ramps either defined by the user or a set of predefined colour ramps from the RColorBrewer package.\n\n7.4.4.1 Using ColourBrewer palette\nTo change the colour, we assign the preferred colour to palette argument of tm_fill() as shown in the code chunk below.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNotice that the choropleth map is shaded in green.\nTo reverse the colour shading, add a “-” prefix.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\nNotice that the colour scheme has been reversed."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#map-layouts",
    "href": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#map-layouts",
    "title": "7a Chloropleth Mapping with R",
    "section": "7.4.5 Map Layouts",
    "text": "7.4.5 Map Layouts\nMap layout refers to the combination of all map elements into a cohesive map. Map elements include, among others, the objects to be mapped, the title, the scale bar, the compass, margins and aspect ratios. Colour settings and data classification methods covered in the previous section relate to the palette, and break-points are used to affect how the map looks.\n\n7.4.5.1 Map Legend\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n7.4.5.2 Map Style\ntmap allows a wide variety of layout settings to be changed. They can be called by using tmap_style().\nThe code chunk below shows the classic style is used.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n7.4.5.3 Cartographic Furniture\nBeside map style, tmap also also provides arguments to draw other map furniture such as compass, scale bar and grid lines.\nIn the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add compass, scale bar and grid lines onto the choropleth map.\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#drawing-small-multiple-chloropleth-maps",
    "href": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#drawing-small-multiple-chloropleth-maps",
    "title": "7a Chloropleth Mapping with R",
    "section": "7.4.6 Drawing Small Multiple Chloropleth Maps",
    "text": "7.4.6 Drawing Small Multiple Chloropleth Maps\nSmall multiple maps, also referred to as facet maps, are composed of many maps arranged side-by-side and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the aesthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n7.4.6.1 By assigning multiple values to at least one of the aesthetic arguments\nIn this example, small multiple choropleth maps are created by defining ncols in tm_fill()\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\nIn this example, small multiple choropleth maps are created by assigning multiple values to at least one of the aesthetic arguments.\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n7.4.6.2 By defining a group-by variable in tm_facets()\nIn this example, multiple small choropleth maps are created by using tm_facets().\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=FALSE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n7.4.6.3 By creating multiple stand-alone maps with tmap_arrange()\nIn this example, multiple small choropleth maps are created by creating multiple stand-alone maps with tmap_arrange().\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#mapping-spatial-object-meeting-a-selection-criterion",
    "href": "Hands-on_Ex/Hands-on_Ex07(a)/Hands-on_Ex07(a).html#mapping-spatial-object-meeting-a-selection-criterion",
    "title": "7a Chloropleth Mapping with R",
    "section": "7.4.7 Mapping Spatial Object Meeting a Selection Criterion",
    "text": "7.4.7 Mapping Spatial Object Meeting a Selection Criterion\nInstead of creating small multiple chloropleth map, you can also use selection funtion to map spatial objects meeting the selection criterion.\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html",
    "href": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html",
    "title": "7b Visualising Geospatial Point Data",
    "section": "",
    "text": "Proportional symbol maps (also known as graduate symbol maps) are a class of maps that use the visual variable of size to represent differences in the magnitude of a discrete, abruptly changing phenomenon, e.g. counts of people. Like choropleth maps, you can create classed or unclassed versions of these maps. The classed ones are known as range-graded or graduated symbols, and the unclassed are called proportional symbols, where the area of the symbols are proportional to the values of the attribute being mapped. In this hands-on exercise, you will learn how to create a proportional symbol map showing the number of wins by Singapore Pools’ outlets using an R package called tmap.\n\n\nBy the end of this hands-on exercise, you will acquire the following skills by using appropriate R packages:\n\nTo import an aspatial data file into R.\nTo convert it into simple point feature data frame and at the same time, to assign an appropriate projection reference to the newly create simple point feature data frame.\nTo plot interactive proportional symbol maps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#learning-outcome",
    "href": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#learning-outcome",
    "title": "7b Visualising Geospatial Point Data",
    "section": "",
    "text": "By the end of this hands-on exercise, you will acquire the following skills by using appropriate R packages:\n\nTo import an aspatial data file into R.\nTo convert it into simple point feature data frame and at the same time, to assign an appropriate projection reference to the newly create simple point feature data frame.\nTo plot interactive proportional symbol maps."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#the-data",
    "title": "7b Visualising Geospatial Point Data",
    "section": "7.3.1 The data",
    "text": "7.3.1 The data\nThe data set used for this hands-on exercise is called SGPools_svy21. The data is in csv file format.\nThe figure below shows the first 15 records of SGPools_svy21.csv. It consists of seven columns. The XCOORD and YCOORD columns are the x-coordinates and y-coordinates of SingPools outlets and branches. They are in Singapore SVY21 Projected Coordinates System."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#data-import-and-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#data-import-and-preparation",
    "title": "7b Visualising Geospatial Point Data",
    "section": "7.2 Data Import and Preparation",
    "text": "7.2 Data Import and Preparation\nThe code chunk below uses read_csv() function of readr package to import SGPools_svy21.csv into R as a tibble data frame called sgpools.\n\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nAfter importing the data file into R, it is important for us to examine if the data file has been imported correctly.\nThe code chunk below shows list() is used to do the job.\n\nlist(sgpools) \n\n[[1]]\n# A tibble: 306 × 7\n   NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n   &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5\n 2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11\n 3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0\n 4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44\n 5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0\n 6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3\n 7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17\n 8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16\n 9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21\n10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25\n# ℹ 296 more rows\n\n\nNotice that the sgpools data in tibble data frame and not the common R data frame."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "href": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#creating-a-sf-data-frame-from-an-aspatial-data-frame",
    "title": "7b Visualising Geospatial Point Data",
    "section": "7.3 Creating a sf data frame from an aspatial data frame",
    "text": "7.3 Creating a sf data frame from an aspatial data frame\nThe code chunk below converts sgpools data frame into a simple feature data frame by using st_as_sf() of sf packages\n\nsgpools_sf &lt;- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\n\nThings to learn from the arguments above:\n\nThe coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\nThe crs argument required you to provide the coordinates system in epsg format. EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by refering to epsg.io.\n\nFigure below shows the data table of sgpools_sf. Notice that a new column called geometry has been added into the data frame.\n\nYou can display the basic information of the newly created sgpools_sf by using the code chunk below.\n\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`\n * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5\n 2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11\n 3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0\n 4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44\n 5 Prime Serangoon North        Blk 54…   552542 Branch                        0\n 6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3\n 7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17\n 8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16\n 9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21\n10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25\n# ℹ 296 more rows\n# ℹ 1 more variable: geometry &lt;POINT [m]&gt;\n\n\nThe output shows that sgppols_sf is in point feature class. It’s epsg ID is 3414. The bbox provides information of the extend of the geospatial data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#it-all-started-with-an-interactive-point-symbol-map",
    "href": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#it-all-started-with-an-interactive-point-symbol-map",
    "title": "7b Visualising Geospatial Point Data",
    "section": "7.4.1 It all started with an interactive point symbol map",
    "text": "7.4.1 It all started with an interactive point symbol map\nThe code chunks below are used to create an interactive point symbol map.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#lets-make-it-proportional",
    "href": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#lets-make-it-proportional",
    "title": "7b Visualising Geospatial Point Data",
    "section": "7.4.2 Lets make it proportional",
    "text": "7.4.2 Lets make it proportional\nTo draw a proportional symbol map, we need to assign a numerical variable to the size visual attribute. The code chunks below show that the variable Gp1Gp2Winnings is assigned to size visual attribute.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = \"Gp1Gp2 Winnings\",\n           border.col = \"black\",\n           border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#lets-give-it-a-different-colour",
    "href": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#lets-give-it-a-different-colour",
    "title": "7b Visualising Geospatial Point Data",
    "section": "7.4.3 Lets give it a different colour",
    "text": "7.4.3 Lets give it a different colour\nThe proportional symbol map can be further improved by using the colour visual attribute. In the code chunks below, OUTLET_TYPE variable is used as the colour attribute variable.\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#twin-map",
    "href": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#twin-map",
    "title": "7b Visualising Geospatial Point Data",
    "section": "7.4.4 Twin Map",
    "text": "7.4.4 Twin Map\nAn impressive and little-know feature of tmap’s view mode is that it also works with faceted plots. The argument sync in tm_facets() can be used in this case to produce multiple maps with synchronised zoom and pan settings.\n\ntm_shape(sgpools_sf) +\n  tm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1) +\n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nBefore you end the session, it is wiser to switch tmap’s Viewer back to plot mode by using the code chunk below.\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#all-about-tmap-package",
    "href": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#all-about-tmap-package",
    "title": "7b Visualising Geospatial Point Data",
    "section": "7.5.1 All about tmap package",
    "text": "7.5.1 All about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#geospatial-data-wrangling-1",
    "href": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#geospatial-data-wrangling-1",
    "title": "7b Visualising Geospatial Point Data",
    "section": "7.5.2 Geospatial data wrangling",
    "text": "7.5.2 Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex07(b)/Hands-on_Ex07(b).html#data-wrangling",
    "title": "7b Visualising Geospatial Point Data",
    "section": "7.5.3 Data wrangling",
    "text": "7.5.3 Data wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with ‘spread()’ and ‘gather()’ Functions"
  }
]